{"version":3,"sources":["webpack://roosterjs/webpack/bootstrap","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getTagOfNode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/contains.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/Position.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/execCommand.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getBlockElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementAtNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafSibling.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/createRange.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/applyInlineStyle.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/splitParentNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/wrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/findClosestElementAncestor.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/NodeInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/PartialInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/NodeBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/collapseNodes.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isVoidHtmlElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/ContentTraverser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyTextStyle.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/shouldSkipNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getComputedStyles.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getInlineElementBeforeAfter.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetEventData.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/processList.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/index.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/StartEndBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/fromHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/blockElements/getFirstLastBlockElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/ImageInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/LinkInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/getFirstLastInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getLeafNode.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/inlineElements/EmptyInlineElement.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/Browser.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/changeElementTag.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/isNodeEmpty.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/isPositionAtBeginningOf.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/unwrap.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/table/VTable.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEditFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/collapseSelectedBlocks.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setBackgroundColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontName.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setTextColor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBold.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleItalic.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleUnderline.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/CopyPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/darkMode/getColorNormalizedContent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/DOMEventPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/EditPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/FirefoxTypeAfterLink.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/clearEventDataCache.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/MouseUpPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/corePlugins/TypeInContainerPlugin.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/Undo.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isCharacterValue.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/isModifierKey.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/calculateDefaultFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/hasFocus.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/utils/toggleTagCore.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getInheritableStyles.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/htmlToDom.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/cloneObject.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/CustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/LevelLists.ts","webpack://roosterjs/./packages/roosterjs/lib/index.ts","webpack://roosterjs/./packages/roosterjs/lib/createEditor.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/HyperLink/HyperLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/BodyScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionBlockScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/SelectionScoper.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/contentTraverser/PositionContentSearcher.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/applyFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/extractClipboardEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getPendableFormatState.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/matchLink.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/adjustNodeInsertPosition.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/queryElements.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/utils/getTextContent.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getPositionRect.ts","webpack://roosterjs/./packages/roosterjs-editor-dom/lib/selection/getSelectionPath.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/ContentEdit.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/autoLinkFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/changeFontSize.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearBlockFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/clearFormat.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/createLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/getFormatState.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/Editor.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/adjustBrowserBehavior.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/createEditorCore.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/undo/UndoSnapshots.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/attachDomEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/editWithUndo.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/focus.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getCustomData.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/getSelectionRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/insertNode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/selectRange.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/coreAPI/triggerEvent.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/editor/mapPluginEvents.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/darkMode/convertContentToDarkMode.ts","webpack://roosterjs/./packages/roosterjs-editor-core/lib/eventApi/cacheGetElementAtCursor.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/insertImage.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/insertTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/editTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/table/formatTable.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/removeLink.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/replaceWithNode.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setAlignment.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setDirection.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setImageAltText.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/setIndentation.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBullet.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleNumbering.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleBlockQuote.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleCodeBlock.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleStrikethrough.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSubscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleSuperscript.ts","webpack://roosterjs/./packages/roosterjs-editor-api/lib/format/toggleHeader.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/shortcutFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/insertLineBeforeStructuredNodeFeature.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/tableFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/listFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/ContentEdit/features/quoteFeatures.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/Paste.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/buildClipboardData.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/fragmentHandler.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/excelConverter/convertPastedContentFromExcel.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/sanitizer/HtmlSanitizer.ts","webpack://roosterjs/./packages/roosterjs-html-sanitizer/lib/utils/getAllowedValues.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/convertPastedContentFromWord.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/wordConverter.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/WordConverterArguments.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/wordConverter/converterUtils.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Paste/textToHtml.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/Watermark/Watermark.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/TableResize/TableResize.ts","webpack://roosterjs/./packages/roosterjs-editor-plugins/lib/CustomReplace/CustomReplace.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-image-resize/lib/ImageResize.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/index.ts","webpack://roosterjs/./packages/roosterjs-plugin-picker/lib/PickerPlugin.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NodeBlockElement_1","NodeBlockElement","default","getBlockElementAtNode_1","getBlockElementAtNode","getFirstLastBlockElement_1","getFirstLastBlockElement","StartEndBlockElement_1","StartEndBlockElement","ContentTraverser_1","ContentTraverser","PositionContentSearcher_1","PositionContentSearcher","getInlineElementAtNode_1","getInlineElementAtNode","ImageInlineElement_1","ImageInlineElement","LinkInlineElement_1","LinkInlineElement","NodeInlineElement_1","NodeInlineElement","PartialInlineElement_1","PartialInlineElement","applyTextStyle_1","applyTextStyle","Browser_1","Browser","getBrowserInfo","applyFormat_1","applyFormat","changeElementTag_1","changeElementTag","collapseNodes_1","collapseNodes","contains_1","contains","extractClipboardEvent_1","extractClipboardEvent","findClosestElementAncestor_1","findClosestElementAncestor","fromHtml_1","fromHtml","getComputedStyles_1","getComputedStyles","getComputedStyle","getPendableFormatState_1","getPendableFormatState","PendableFormatCommandMap","getTagOfNode_1","getTagOfNode","isBlockElement_1","isBlockElement","isNodeEmpty_1","isNodeEmpty","isVoidHtmlElement_1","isVoidHtmlElement","matchLink_1","matchLink","adjustNodeInsertPosition_1","adjustNodeInsertPosition","queryElements_1","queryElements","splitParentNode_1","splitParentNode","splitBalancedNodeRange","unwrap_1","unwrap","wrap_1","wrap","getLeafSibling_1","getNextLeafSibling","getPreviousLeafSibling","getLeafNode_1","getFirstLeafNode","getLastLeafNode","getTextContent_1","getTextContent","VTable_1","VTable","Position_1","Position","createRange_1","createRange","getRangeFromSelectionPath","getPositionRect_1","getPositionRect","isPositionAtBeginningOf_1","isPositionAtBeginningOf","getSelectionPath_1","getSelectionPath","node","nodeType","tagName","toUpperCase","Editor_1","Editor","Undo_1","Undo","EditPlugin_1","EditPlugin","MouseUpPlugin_1","MouseUpPlugin","DOMEventPlugin_1","DOMEventPlugin","TypeInContainerPlugin_1","TypeInContainerPlugin","FirefoxTypeAfterLink_1","FirefoxTypeAfterLink","CopyPlugin_1","CopyPlugin","cacheGetEventData_1","cacheGetEventData","clearEventDataCache_1","clearEventDataCache","cacheGetContentSearcher_1","cacheGetContentSearcher","clearContentSearcherCache","cacheGetElementAtCursor_1","cacheGetElementAtCursor","isModifierKey_1","isModifierKey","isCharacterValue_1","isCharacterValue","container","contained","treatSameNodeAsContain","Node","commonAncestorContainer","parentNode","isNodeAfter_1","nodeOrPosition","offsetOrPosType","this","offset","getIndexOfNode","isAtEnd","nextSibling","getEndOffset","endOffset","Math","max","min","element","normalize","firstChild","newOffset","lastChild","childNodes","equalTo","position","isAfter","move","getStart","range","startContainer","startOffset","getEnd","endContainer","previousSibling","nodeValue","length","roosterjs_editor_dom_1","pendableFormatCommands","editor","command","focus","formatter","getDocument","execCommand","getSelectionRange","collapsed","addUndoSnapshot","keys","map","indexOf","isPendableFormatCommand","triggerPluginEvent","formatState","findHeadTailLeafNode","containerBlockNode","isTail","result","sibling","rootNode","getBlockContext","headNode","tailNode","nodes","changeFontSize_1","changeFontSize","FONT_SIZES","clearBlockFormat_1","clearBlockFormat","TAGS_TO_UNWRAP","TAGS_TO_STOP_UNWRAP","ATTRIBUTES_TO_PRESERVE","clearFormat_1","clearFormat","createLink_1","createLink","getFormatState_1","getFormatState","getElementBasedFormatState","getStyleBasedFormatState","insertImage_1","insertImage","insertTable_1","insertTable","editTable_1","editTable","formatTable_1","formatTable","removeLink_1","removeLink","replaceWithNode_1","replaceWithNode","setAlignment_1","setAlignment","setBackgroundColor_1","setBackgroundColor","setTextColor_1","setTextColor","setDirection_1","setDirection","setFontName_1","setFontName","setFontSize_1","setFontSize","setImageAltText_1","setImageAltText","setIndentation_1","setIndentation","toggleBold_1","toggleBold","toggleBullet_1","toggleBullet","toggleItalic_1","toggleItalic","toggleNumbering_1","toggleNumbering","toggleBlockQuote_1","toggleBlockQuote","toggleCodeBlock_1","toggleCodeBlock","toggleStrikethrough_1","toggleStrikethrough","toggleSubscript_1","toggleSubscript","toggleSuperscript_1","toggleSuperscript","toggleUnderline_1","toggleUnderline","toggleHeader_1","toggleHeader","parent","parentBlock","inlineElement","nodeChain","parent_1","push","currentNode","tag","resolveInlineElement","shouldSkipNode_1","getLeafSibling","startNode","isNext","getSibling","getChild","curNode","shouldContinue","node1","node2","compareDocumentPosition","arg1","arg2","arg3","arg4","start","end","isNodePosition","Array","getPositionFromPath","ownerDocument","getFocusablePosition","setStart","setEnd","arg","path","ZERO_WIDTH_SPACE","callback","createTextNode","insertNode","select","firstNode","lastNode","contentTraverser","getSelectionTraverser","currentInlineElement","nextInlineElement","getNextInlineElement","applyStyle","isInnerNode","HtmlSanitizer_1","HtmlSanitizer","htmlToDom_1","htmlToDom","splitWithFragment","getInheritableStyles_1","getInheritableStyles","splitBefore","newParent","cloneNode","removeAttribute","appendChild","innerHTML","insertBefore","temp","wrapper","Element","document_1","test","createElement","_i","nodes_1","root","selector","closest","matches","msMatchesSelector","parentElement","containerNode","textContent","getContainerNode","getParentBlock","getStartPosition","getEndPosition","isTextualInlineElement","pos","styler","getDecoratedInline","toString","thisStart","otherEnd","from","to","nextNode","previousNode","collapseToSingleElement","getStartNode","getEndNode","equals","blockElement","collapse","ref","isStart","canSplitParent","slice","startIndex","endIndex","BLOCK_ELEMENT_TAGS","split","BLOCK_DISPLAY_STYLES","style","display","HTML_VOID_ELEMENTS","BodyScoper_1","EmptyInlineElement_1","SelectionBlockScoper_1","SelectionScoper_1","getInlineElementBeforeAfter_1","scoper","createBodyTraverser","createSelectionTraverser","createBlockTraverser","currentBlock","getStartBlockElement","getNextBlockElement","getPreviousNextBlockElement","getPreviousBlockElement","current","currentBlockElement","leaf","newBlock","isBlockInScope","currentInline","getStartInlineElement","getPreviousNextInlineElement","getPreviousInlineElement","newInline","getInlineElementBeforeAfter","previousInlineElement","getNextPreviousInlineElement","trimInlineElement","STYLETAGS","callStylerWithInnerNode","splitTextNode","textNode","returnFirstPart","firstPart","substr","secondPart","newNode","formatNodes","formatNode","parentTag","every","newNode_1","shift","forEach","removeChild","CRLF","styleNames","styles","defaultView","window","styleNames_1","getPropertyValue","toLowerCase","px2Pt","px","round","parseFloat","styleName","isPartial","getInlineElementBefore","getInlineElementAfter","event","eventDataCache","TEMP_NODE_CLASS","TEMP_NODE_HTML","clonedNode","relativeSelectionPath","isChrome","parentLINode","getElementAtCursor","currentRange","traverser","block","tempNode","workaroundForChrome","newParentNode","existingList","deleteNode","newList","HTMLElement","replaceChild","document","body","newRange","HyperLink_1","HyperLink","ContentEdit_1","ContentEdit","Paste_1","Paste","ContentEditFeatures_1","getDefaultContentEditFeatures","Watermark_1","Watermark","TableResize_1","TableResize","CustomReplace_1","CustomReplace","STRUCTURE_NODE_TAGS","endNode","blockContext","html","isFirst","getFirstBlockElement","getLastBlockElement","_super","__extends","getFirstInlineElement","getLastInlineElement","getLeafNode","EmptyInlineElement","userAgent","appVersion","isIE11OrGreater","isIE","isFirefox","isSafari","isEdge","isWebKit","isMac","isWin","isIEOrEdge","navigator","newTag","newElement","attributes","attr","setAttribute","_a","marginTop","marginBottom","VISIBLE_ELEMENT_TAGS","VISIBLE_CHILD_ELEMENT_SELECTOR","join","trim","replace","trimContent","querySelectorAll","areAllPrevousNodesEmpty","targetNode","_this","trs","table","HTMLTableElement","td","getTableFromTd","currentTd_1","rows","cells","row","tr","rowIndex","sourceCol","targetCol","col","colSpan","rowSpan","spanLeft","spanAbove","writeBack","moveChildren","cell","recalcSpans","format","borderCollapse","backgroundColor","bgColorOdd","bgColorEven","filter","borderTop","getBorderStyle","topBorderColor","borderBottom","bottomBorderColor","borderLeft","verticalBorderColor","borderRight","edit","operation","currentRow","currentCell","splice","cloneCell","newRow_1","countSpanAbove","colIndex","nextCell","getCell","newCell","getTd","forEachCellOfCurrentColumn","newCol_1","countSpanLeft","forEachCellOfColumn","forEachCellOfCurrentRow","rowStep","aboveCell","belowCell","colStep","leftCell","rightCell","splitRow","forEachCellOfRow","getCurrentTd","HTMLTableCellElement","fromNode","toNode","autoLink","indentWhenTab","outdentWhenShiftTab","outdentWhenBackspaceOnEmptyFirstLine","outdentWhenEnterOnEmptyLine","mergeInNewLineWhenBackspaceOnFirstChar","unquoteWhenBackspaceOnEmptyFirstLine","unquoteWhenEnterOnEmptyLine","autoBullet","tabInTable","upDownInTable","insertLineBeforeStructuredNodeFeature","defaultShortcut","unlinkWhenBackspaceAfterLink","smartOrderedList","smartOrderedListStyles","isEmptyBlockUnderTR","forEachCallback","blocks","applyInlineStyle_1","color","trimmedColor_1","darkMode_1","isDarkMode","appliedColor_1","darkModeColor","lightModeColor","dataset","ogsb","fontName","fontFamily","fontSize","lineHeight","ogsc","execCommand_1","getColorNormalizedContent_1","onCopy","selectionRange","clipboardEvent","copyFragment","cloneContents","normalizedContent","containerDiv","clipboardData","setData","innerText","preventDefault","getName","initialize","copyDisposer","addDomEventHandler","dispose","isDataAttributeSettable","newStyle","content","el","DocumentFragment","allChildElements","getElementsByTagName","ogac","ogab","disableRestoreSelectionOnFocus","inIme","onNativeEvent","e","runAsync","type","onFocus","cachedPosition","cachedFormatState","restorePendingFormatState","clear","restoreSavedRange","onBlur","saveSelectionRange","disposer","compositionstart","compositionend","rawEvent","drop","cut","onPluginEvent","eventType","getCurrentPosition","formatState_1","isInIME","featureMap","autoCompleteSnapshot","autoCompleteChangeSource","addFeature","shouldHandleEvent","handleEvent","setContent","contentChanged","currentFeature","findFeature","source","feature","array","performAutoComplete","changeSource","snapshot","data","features","hasFunctionKey","ctrlKey","altKey","metaKey","which","allowFunctionKeys","CONTENTSEARCHER_KEY","getContentSearcherOfCursor","onMouseUp","removeMouseUpEventListener","mouseUpEventListerAdded","addEventListener","removeEventListener","onKeyPress","ensureTypeInElement","shouldSetNodeStyles","wasNodeJustCreatedByKeyboardEvent","updateCursor","replaceSelection","insertOnNewLine","getDefaultFormat","tryNormalizeTyping","target","UndoSnapshots_1","preserveSnapshots","maxBufferSize","canUndo","canRedo","onKeyDown","clearRedoForInput","isRestoring","undoSnapshots","hasNewContent","undo","restoreSnapshot","redo","getSnapshotsManager","canMove","getContent","addSnapshot","delta","evt","lastKeyPress","clearRedo","CTRL_CHARCODE","ALT_CHARCODE","META_CHARCODE","isCtrlKey","isAltKey","isMetaKey","DARK_MODE_DEFAULT_FORMAT","backgroundColors","textColors","calculateDefaultFormat","baseFormat","inDarkMode","textColor","bold","italic","underline","currentStyles","hasFocus","core","activeElement","contentDiv","UNWRAPPABLE_NODES","DEFAULT_STYLER","_","wrapFunction","unwrapFunction","startBlock","endBlock","tag_1","some","INHERITABLE_PROPERTIES","win","START_FRAGMENT","END_FRAGMENT","lastIndexOf","before","after","substring","preserveFragmentOnly","fragmentHandler","doc","DOMParser","parseFromString","sourceHtml","cloneObject","assign","existingObj","NODE_ID_ATTRIBUTE_NAME","getAndSetNodeId","customData","id","getAttribute","nextNodeId","createCustomData","dict","setObject","getObject","createLevelLists","listsMetadata","currentUniqueListId","createEditor_1","createEditor","__export","roosterjs_editor_plugins_1","roosterjs_editor_core_1","additionalPlugins","initialContent","plugins","concat","options","defaultFormat","getTooltipCallback","onLinkClick","href","onMouse","a","tryGetHref","setEditorDomAttribute","mouseover","mouseout","anchor","button","open","getFirstLastInlineElement_1","BodyScoper","SelectionBlockScoper","startFrom","Range","blockNode","getFirstLastInlineElementFromBlockElement","startInline","SelectionScoper","inScope","selStartBlock","selEndBlock","inline","startPartial","endPartial","WHITESPACE_REGEX","text","inlineElements","getWordBefore","word","traverse","inlineBefore","inlineAfter","getSubStringBefore","getRangeFromText","exactMatch","startPosition","endPosition","textIndex","forEachTextInlineElement","textInline","nodeContent","nodeIndex","charCodeAt","getNearestNonTextInlineElement","nearestNonTextInlineElement","traversingComplete","previousInline","exec","elementStyle","fontWeight","fontStyle","textDecoration","CLIPBOARD_HTML_HEADER_REGEX","getImage","dataTransfer","fileCount","items","item","getAsFile","files","file","workaroundForEdge","headerValues","parseInt","types","getData","image","undefined","getAsString","isBold","isItalic","isUnderline","isStrikeThrough","isSubscript","isSuperscript","reduce","state","queryCommandState","httpExcludeRegEx","domainPortWithUrlRegEx","domainPortRegEx","linkMatchRules","http","match","RegExp","except","normalizeUrl","url","https","mailto","notes","unc","ftp","news","telnet","gopher","wais","schema","rule","scheme","originalUrl","normalizedUrl","nodeToInsert","rootNodeToInsert","rootNodes","hasBrNextToRoot","listItem","listNode","tdNode","trNode","newTable","currentTable","shouldInsertListAsText","div","checkPosition","targets","scope","elements","nodeContainedByRangeOnly","targetPositions","isIntersectWithNodeRange","normalizeRect","clientRect","left","right","top","bottom","rect","getBoundingClientRect","rects","getClientRects","span","getPositionPath","unshift","isPreviousText","autoLinkFeatures_1","shortcutFeatures_1","insertLineBeforeStructuredNodeFeature_1","tableFeatures_1","listFeatures_1","quoteFeatures_1","featureSet","getFilteredFeatures","addContentEditFeature","allFeatures","IndentWhenTab","OutdentWhenShiftTab","OutdentWhenBackOn1stEmptyLine","OutdentWhenEnterOnEmptyLine","MergeInNewLine","UnquoteWhenBackOnEmpty1stLine","UnquoteWhenEnterOnEmptyLine","TabInTable","UpDownInTable","InsertLineBeforeStructuredNodeFeature","AutoBullet","AutoLink","UnlinkWhenBackspaceAfterLink","DefaultShortcut","getSmartOrderedList","roosterjs_editor_api_1","TRAILING_PUNCTUATION_REGEX","MINIMUM_LENGTH","cacheGetLinkData","link","searcher","trailingPunctuation","candidate_1","str","linkData","MIN_FONT_SIZE","MAX_FONT_SIZE","getNewFontSize","pt","changeBase","fontSizes","floor","ceil","last","change","collapseSelectedBlocks_1","canCollapse","tagsToStopUnwrap","tagsToUnwrap","attributesToPreserve","groups","stopUnwrapSelector","group","first","clearNodeFormat","allChildrenAreBlock","previousValue","returnBlockElement","clearAttribute","styleArray","STYLES_TO_REMOVE","isDefaultFormatEmpty","removeProperty","URI_REGEX","MAILTO_REGEX","FTP_REGEX","TEMP_TITLE","getAnchorNodeAtCursor","updateAnchorDisplayText","displayText","altText","normalizedUrl_1","prefix","search","applyLinkPrefix","originalUrl_1","title","roosterjs_editor_dom_2","listTag","headerTag","isBullet","isNumbering","headerLevel","canUnlink","canAddImageAltText","isBlockQuote","__assign","adjustBrowserBehavior_1","createEditorCore_1","mapPluginEvents_1","calculateDefaultFormat_1","convertContentToDarkMode_1","Error","plugin","eventDisposers","additionalEditFeatures","omitContentEditableAttributeChanges","isContentEditable","userSelect","msUserSelect","webkitUserSelect","contenteditableChanged","corePlugins","typeInContainer","isDisposed","option","darkModeOptions","getDarkModeOptions","darkModeTransform","convertContentToDarkMode","onExternalContentTransform","api","replaceNode","existingNode","scopeOrCallback","Function","isEmpty","triggerExtractContentEvent","includeSelectionMarker","selectionPath","JSON","stringify","triggerContentChangedEvent","pathComment","parse","convertFunction","insertContent","allNodes","selectRange","getSelection","cachedSelectionRange","getFocusedPosition","sel","focusNode","focusOffset","getCursorRect","nameOrMap","handler","handlers_1","eventName","attachDomEvent","x","broadcast","triggerEvent","pluginEvent","editWithUndo","getCustomData","domEvent","getBodyTraverser","getBlockTraverser","requestAnimationFrame","setDarkModeState","nextDarkMode","currentContent","COMMANDS","_b","attachDomEvent_1","editWithUndo_1","focus_1","getCustomData_1","getSelectionRange_1","hasFocus_1","insertNode_1","selectRange_1","triggerEvent_1","createCoreApiMap","initValue","mouseUp","firefoxTypeAfterLink","copyPlugin","allPlugins","buildPluginList","eventHandlerPlugins","willHandleEventExclusively","currentUndoSnapshot","coreApiOverride","defaultApi","MAXSIZELIMIT","UndoSnapshots","maxSize","snapshots","totalSize","currentIndex","newIndex","removeCount","removedSize","pluginEventType","beforeDispatch","onEvent","stopPropagation","isNested","event_1","tryGetFromCache","selection","rangeCount","getRangeAt","isBegin","insertedNode","refNode","rangeToRestore","cloneRange","getInitialRange","deleteContents","nodeForCursor","skipSameRange","needAddRange","removeAllRanges","addRange","handledExclusively","EVENT_MAPPING","keypress","keydown","keyup","mousedown","skipRootElement","childElements","CACHE_KEY_PREFIX","imageFile","reader","FileReader","onload","src","maxWidth","readAsDataURL","getTableCellWidth","columns","fragment","createDocumentFragment","cellSpacing","cellPadding","j","width","vtable","textOrRange","backupRange","alignment","align","textAlign","direction","processList_1","indentation","toggleTagCore_1","BLOCKQUOTE_TAG","borderColor","paddingLeft","PRE_TAG","CODE_TAG","CODE_NODE_TAG","codeBlock","level","wrapped","header","createCommand","winKey","macKey","action","commands","cacheGetCommand","shiftKey","cmd","NEWLINE_HTML","CHILD_PARENT_TAG_MAP","TD","TH","LI","CHILD_SELECTOR","cacheGetStructuredElement","cacheGetTableCell","firstTd","step","isUp","targetTd","hasShiftKey","anchorNode","anchorOffset","newContainer","newPos","setBaseAndExtent","toggleListAndPreventDefault","listInfo","cacheGetListElement","listElement","li","br","textBeforeCursor","rangeToDelete","tempBr","styleList","HTMLOListElement","ol","parentOl","listStyle","QUOTE_TAG","STRUCTURED_TAGS","cacheGetQuoteChild","quote","splitQuote","childOfQuote","buildClipboardData_1","fragmentHandler_1","textToHtml_1","roosterjs_editor_api_2","roosterjs_html_sanitizer_1","preserved","attributeCallbacks","onPaste","pasteOriginal","snapshotBeforePaste","originalFormat","getCurrentFormat","rawHtml","sanitizeHtml","applyFormatting","sanitizer","pasteDisposer","paste","detectPasteOption","pasteText","pasteAndMergeFormat","pasteOption","mergeCurrentFormat","applyToElements","internalPaste","elementTransform","parents","parents_1","convertGlobalCssToInlineCss","sanitize","CONTAINER_HTML","originalSelectionRange","tempDiv","pasteDiv","getTempDivForPaste","retrieveHtmlViaTempDiv","convertPastedContentFromExcel_1","convertPastedContentFromWord_1","WORD_ATTRIBUTE_NAME","WORD_ATTRIBUTE_VALUE","EXCEL_ATTRIBUTE_NAME","EXCEL_ATTRIBUTE_VALUE","LAST_TD_END_REGEX","LAST_TR_END_REGEX","LAST_TR_REGEX","LAST_TABLE_REGEX","querySelector","trMatch","tableMatch","styleCallbacks","border","additionalAllowAttributes","styleNode","cloneObject_1","getAllowedValues_1","elementCallbacks","getStyleCallbacks","allowedTags","getAllowedTags","additionalAllowedTags","allowedAttributes","getAllowedAttributes","defaultStyleValues","getDefaultStyleValues","additionalDefaultStyleValues","additionalGlobalStyleNodes","allowPreserveWhiteSpace","convertInlineCss","additionalStyleNodes","currentElementOrStyle","convertCssOnly","processNode","styleNodes","toArray","styleSheets_1","reverse","sheet","styleSheet","styleRule","cssRules","cssText","CSSRule","STYLE_RULE","selectorText","currentStyle","context","isElement","ELEMENT_NODE","isText","TEXT_NODE","allowElement","insidePRE","thisStyle","processAttributes","processCss","child","next","getAttributeNode","pair","isInheritable","keep","attribute","name_1","list","ALLOWED_HTML_TAGS","ALLOWED_HTML_ATTRIBUTES","DEFAULT_STYLE_VALUES","background-color","border-bottom-color","border-bottom-style","border-bottom-width","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left-color","border-left-style","border-left-width","border-right-color","border-right-style","border-right-width","border-top-color","border-top-style","border-top-width","outline-color","outline-style","outline-width","overflow","text-decoration","-webkit-text-stroke-width","word-wrap","margin-left","margin-right","padding","padding-top","padding-left","padding-right","padding-bottom","border-top","border-left","border-right","border-bottom","vertical-align","float","removeValue","removeWidthForLiAndDiv","unique","index","self","additionalTags","additionalAttributes","toLocaleLowerCase","additionalDefaultStyles","callbacks","wordConverter_1","WordConverterArguments_1","converterUtils_1","wordConverter","createWordConverter","wordConverterArgs","createWordConverterArguments","processNodesDiscovery","processNodeConvert","CustomData_1","nextUniqueId","numBulletsConverted","numNumberedConverted","LevelLists_1","lists","listItems","currentListIdsByLevels","lastProcessedItem","LOOKUP_DEPTH","UNIQUE_LIST_ID_CUSTOM_DATA","MSO_LIST_STYLE_NAME","LINE_BREAKS","getOrCreateListForNode","metadata","listMetadata","recurringGetOrCreateListAtNode","possibleList","getRealPreviousSibling","listId","uniqueListId","convertListIfNeeded","cleanupListIgnore","levels","nodesToRemove","isEmptySpan","fixWordListComments","isIgnoreNode","getListItemMetadata","listatt","getStyleValue","listprops","wordListId","originalNode","isFakeBullet","fakeBullet","getFakeBulletText","removeComments","nextElement","endComment","getRealNextSibling","newSpan","prevSibling","isEmptyTextNode","textStyle","inStyles","nvpair","resetCurrentLists","args","ll","itemMetadata","levelInfo","ignore","numberOfItems","secondFakeBullet","firstFakeBullet","className","lines","lineEnd_1","line","WATERMARK_REGEX","watermark","handleWatermark","showHideWatermark","blur","hideWatermark","isWatermarkShowing","removeWartermarkFromHtml","ignoreCachedState","showWatermark","watermarkNode","pageX","onMouseOver","srcElement","calcAndShowHandle","onMouseDown","initialPageX","attachMouseEvents","getResizeHandle","borderWidth","cancelEvent","onMouseMove","adjustHandle","detachMouseEvents","isNaN","newWidth_1","clientWidth","isRtl","setTableColumnWidth","onMouseOverDisposer","clickIntoCurrentTd","getPosition","top_1","handle","offsetLeft","offsetWidth","height","offsetHeight","offsetParent","scrollLeft","offsetTop","scrollTop","document_2","makeReplacement","sourceString","replacementHTML","matchSourceCaseSensitive","defaultReplacements","CustomReplacePlugin","replacements","updateReplacements","newReplacements","longestReplacementLength","apply","replacement","replacementEndCharacters","endChars","Set","replacements_1","lastChar","add","toLocaleUpperCase","getReplacementEndCharacters","has","stringToSearch","getMatchingReplacement","matchingText","matchingRange","parsingSpan","lowerCaseStringToSearch","sourceMatch","replacementMatch","ImageResize_1","ImageResize","BEGIN_TAG","END_TAG","EXTRACT_HTML_REGEX","minWidth","minHeight","selectionBorderColor","forcePreserveRatio","resizableImageSelector","startResize","img","getSelectedImage","startPageX","startPageY","pageY","startWidth","startHeight","clientHeight","doResize","finishResize","cursor","stopEvent","widthChange","heightChange","newWidth","isWest","newHeight","isNorth","ratio","resizeDiv","removeResizeDivIfAny","previous","removeResizeDiv","hideResizeHandle","onDragStart","dragstart","contentEditable","currentImg","showResizeHandle","event_2","event_3","extractHtml","createResizeDiv","selectImageAfterUnSelect","referenceNode","createComment","pointerEvents","comment","arguments","PickerPlugin_1","PickerPlugin","ESC_CHARCODE","LEFT_ARROW_CHARCODE","UP_ARROW_CHARCODE","RIGHT_ARROW_CHARCODE","DOWN_ARROW_CHARCODE","DELETE_CHARCODE","dataProvider","pickerOptions","onInitalize","htmlNode","wordToReplace","getWord","lastKnownRange","setIsSuggesting","handleAutoComplete","isSuggesting","onDispose","onContentChanged","elementIds_1","elementIdPrefix","eventHandledOnKeyDown","onKeyDownEvent","onKeyUpDomEvent","setLastKnownRange","onIsSuggestingChanged","setAriaOwns","setAriaActiveDescendant","handleKeyDownEvent","stopImmediatePropagation","getIdValue","getNamedItem","getWordBeforeCursor","replacementNode","getRangeUntilAt","startPos","endPos","hasMatched","triggerCharacter","trimmedWordBeforeCursor","wordBeforeCursorWithoutTriggerChar","wordBeforeCursor","queryStringUpdated","blockSuggestions","setCursorPoint","rangeNode","nodeBeforeCursor","setRangeStart","nodeBeforeNodeBeforeCursor","detach","targetPoint","y","bufferZone","keyboardEvent","shiftHighlight","isHorizontal","getSelectedIndex","selectOption","nodeId","onRemove","nodeAfterCursor","wordFromRange","wordFromCache","nodeOffset","suggestionsLabel","selectedIndex","suggestionLabelPrefix"],"mappings":"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","file":"rooster-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 74);\n","export { default as NodeBlockElement } from './blockElements/NodeBlockElement';\r\nexport { default as getBlockElementAtNode } from './blockElements/getBlockElementAtNode';\r\nexport { default as getFirstLastBlockElement } from './blockElements/getFirstLastBlockElement';\r\nexport { default as StartEndBlockElement } from './blockElements/StartEndBlockElement';\r\n\r\nexport { default as ContentTraverser } from './contentTraverser/ContentTraverser';\r\nexport { default as PositionContentSearcher } from './contentTraverser/PositionContentSearcher';\r\n\r\nexport { default as getInlineElementAtNode } from './inlineElements/getInlineElementAtNode';\r\nexport { default as ImageInlineElement } from './inlineElements/ImageInlineElement';\r\nexport { default as LinkInlineElement } from './inlineElements/LinkInlineElement';\r\nexport { default as NodeInlineElement } from './inlineElements/NodeInlineElement';\r\nexport { default as PartialInlineElement } from './inlineElements/PartialInlineElement';\r\n\r\nexport { default as applyTextStyle } from './utils/applyTextStyle';\r\nexport { Browser, getBrowserInfo } from './utils/Browser';\r\nexport { default as applyFormat } from './utils/applyFormat';\r\nexport { default as changeElementTag } from './utils/changeElementTag';\r\nexport { default as collapseNodes } from './utils/collapseNodes';\r\nexport { default as contains } from './utils/contains';\r\nexport { default as extractClipboardEvent } from './utils/extractClipboardEvent';\r\nexport { default as findClosestElementAncestor } from './utils/findClosestElementAncestor';\r\nexport { default as fromHtml } from './utils/fromHtml';\r\nexport { default as getComputedStyles, getComputedStyle } from './utils/getComputedStyles';\r\nexport {\r\n    default as getPendableFormatState,\r\n    PendableFormatCommandMap,\r\n    PendableFormatNames,\r\n} from './utils/getPendableFormatState';\r\nexport { default as getTagOfNode } from './utils/getTagOfNode';\r\nexport { default as isBlockElement } from './utils/isBlockElement';\r\nexport { default as isNodeEmpty } from './utils/isNodeEmpty';\r\nexport { default as isVoidHtmlElement } from './utils/isVoidHtmlElement';\r\nexport { default as matchLink } from './utils/matchLink';\r\nexport { default as adjustNodeInsertPosition } from './utils/adjustNodeInsertPosition';\r\nexport { default as queryElements } from './utils/queryElements';\r\nexport { default as splitParentNode, splitBalancedNodeRange } from './utils/splitParentNode';\r\nexport { default as unwrap } from './utils/unwrap';\r\nexport { default as wrap } from './utils/wrap';\r\nexport { getNextLeafSibling, getPreviousLeafSibling } from './utils/getLeafSibling';\r\nexport { getFirstLeafNode, getLastLeafNode } from './utils/getLeafNode';\r\nexport { default as getTextContent } from './utils/getTextContent';\r\n\r\nexport { default as VTable, VCell } from './table/VTable';\r\n\r\nexport { default as Position } from './selection/Position';\r\nexport { default as createRange, getRangeFromSelectionPath } from './selection/createRange';\r\nexport { default as getPositionRect } from './selection/getPositionRect';\r\nexport { default as isPositionAtBeginningOf } from './selection/isPositionAtBeginningOf';\r\nexport { default as getSelectionPath } from './selection/getSelectionPath';\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the html tag of a node, or empty if it is not an element\r\n * @param node The node to get tag of\r\n * @returns Tag name in upper case if the given node is an Element, or empty string otherwise\r\n */\r\nexport default function getTagOfNode(node: Node): string {\r\n    return node && node.nodeType == NodeType.Element ? (<Element>node).tagName.toUpperCase() : '';\r\n}\r\n","// Interfaces\r\nexport {\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from './interfaces/ContentEditFeature';\r\nexport { default as CustomData, CustomDataMap } from './interfaces/CustomData';\r\nexport {\r\n    default as EditorCore,\r\n    CorePlugins,\r\n    CoreApiMap,\r\n    AttachDomEvent,\r\n    EditWithUndo,\r\n    Focus,\r\n    GetCustomData,\r\n    GetSelectionRange,\r\n    HasFocus,\r\n    InsertNode,\r\n    Select,\r\n    SelectRange,\r\n    TriggerEvent,\r\n} from './interfaces/EditorCore';\r\nexport { default as EditorOptions } from './interfaces/EditorOptions';\r\nexport { default as EditorPlugin } from './interfaces/EditorPlugin';\r\nexport { default as UndoService } from './interfaces/UndoService';\r\nexport { default as UndoSnapshotsService } from './interfaces/UndoSnapshotsService';\r\n\r\n// Classes\r\nexport { default as Editor } from './editor/Editor';\r\nexport { default as Undo } from './undo/Undo';\r\n\r\n// Core Plugins\r\nexport { default as EditPlugin } from './corePlugins/EditPlugin';\r\nexport { default as MouseUpPlugin } from './corePlugins/MouseUpPlugin';\r\nexport { default as DOMEventPlugin } from './corePlugins/DOMEventPlugin';\r\nexport { default as TypeInContainerPlugin } from './corePlugins/TypeInContainerPlugin';\r\nexport { default as FirefoxTypeAfterLink } from './corePlugins/FirefoxTypeAfterLink';\r\nexport { default as CopyPlugin } from './corePlugins/CopyPlugin';\r\n\r\n// Event APIs\r\nexport { default as cacheGetEventData } from './eventApi/cacheGetEventData';\r\nexport { default as clearEventDataCache } from './eventApi/clearEventDataCache';\r\nexport {\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n} from './eventApi/cacheGetContentSearcher';\r\nexport { default as cacheGetElementAtCursor } from './eventApi/cacheGetElementAtCursor';\r\nexport { default as isModifierKey } from './eventApi/isModifierKey';\r\nexport { default as isCharacterValue } from './eventApi/isCharacterValue';\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Test if a node contains another node\r\n * @param container The container node\r\n * @param contained The node to check if it is inside container\r\n * @param treatSameNodeAsContain When container and contained are the same node,\r\n * return true if this param is set to true, otherwise return false. Default value is false\r\n * @returns True if contained is insied container, or they are the same node when treatSameNodeAsContain is true.\r\n * Otherwise false.\r\n */\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean;\r\n\r\n/**\r\n * Test if a node contains a given range\r\n * @param container The container node\r\n * @param contained The range to check if it is inside container\r\n * @returns True if contained is insied container, otherwise false\r\n */\r\nexport default function contains(container: Node, contained: Range): boolean;\r\n\r\nexport default function contains(\r\n    container: Node,\r\n    contained: Node | Range,\r\n    treatSameNodeAsContain?: boolean\r\n): boolean {\r\n    if (!container || !contained) {\r\n        return false;\r\n    }\r\n\r\n    if (treatSameNodeAsContain && container == contained) {\r\n        return true;\r\n    }\r\n\r\n    if (!(contained instanceof Node)) {\r\n        contained = contained && contained.commonAncestorContainer;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (contained && contained.nodeType == NodeType.Text) {\r\n        contained = contained.parentNode;\r\n        treatSameNodeAsContain = true;\r\n    }\r\n\r\n    if (container.nodeType != NodeType.Element) {\r\n        return !!treatSameNodeAsContain && container == contained;\r\n    }\r\n\r\n    return !!(treatSameNodeAsContain || container != contained) && container.contains(contained);\r\n}\r\n","import findClosestElementAncestor from '../utils/findClosestElementAncestor';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a position in DOM tree by the node and its offset index\r\n */\r\nexport default class Position implements NodePosition {\r\n    readonly node: Node;\r\n    readonly element: HTMLElement;\r\n    readonly offset: number;\r\n    readonly isAtEnd: boolean;\r\n\r\n    /**\r\n     * Clone and validate a position from existing position.\r\n     * If the given position has invalid offset, this function will return a corrected value.\r\n     * @param position The original position to clone from\r\n     */\r\n    constructor(position: NodePosition);\r\n\r\n    /**\r\n     * Create a Position from node and an offset number\r\n     * @param node The node of this position\r\n     * @param offset Offset of this position\r\n     */\r\n    constructor(node: Node, offset: number);\r\n\r\n    /**\r\n     * Create a Position from node and a type of position\r\n     * @param node The node of this position\r\n     * @param positionType Type of the postion, can be Begin, End, Before, After\r\n     */\r\n    constructor(node: Node, positionType: PositionType);\r\n\r\n    constructor(nodeOrPosition: Node | NodePosition, offsetOrPosType?: number) {\r\n        if ((<NodePosition>nodeOrPosition).node) {\r\n            this.node = (<NodePosition>nodeOrPosition).node;\r\n            offsetOrPosType = (<NodePosition>nodeOrPosition).offset;\r\n        } else {\r\n            this.node = <Node>nodeOrPosition;\r\n        }\r\n\r\n        switch (offsetOrPosType) {\r\n            case PositionType.Before:\r\n                this.offset = getIndexOfNode(this.node);\r\n                this.node = this.node.parentNode;\r\n                this.isAtEnd = false;\r\n                break;\r\n\r\n            case PositionType.After:\r\n                this.offset = getIndexOfNode(this.node) + 1;\r\n                this.isAtEnd = !this.node.nextSibling;\r\n                this.node = this.node.parentNode;\r\n                break;\r\n\r\n            case PositionType.End:\r\n                this.offset = getEndOffset(this.node);\r\n                this.isAtEnd = true;\r\n                break;\r\n\r\n            default:\r\n                let endOffset = getEndOffset(this.node);\r\n                this.offset = Math.max(0, Math.min(<number>offsetOrPosType, endOffset));\r\n                this.isAtEnd = offsetOrPosType > 0 && offsetOrPosType >= endOffset;\r\n                break;\r\n        }\r\n\r\n        this.element = findClosestElementAncestor(this.node);\r\n    }\r\n\r\n    /**\r\n     * Normalize this position to the leaf node, return the normalize result.\r\n     * If current position is already using leaf node, return this position object itself\r\n     */\r\n    normalize(): NodePosition {\r\n        if (this.node.nodeType == NodeType.Text || !this.node.firstChild) {\r\n            return this;\r\n        }\r\n\r\n        let node = this.node;\r\n        let newOffset: number | PositionType.Begin | PositionType.End = this.isAtEnd\r\n            ? PositionType.End\r\n            : this.offset;\r\n        while (node.nodeType == NodeType.Element && node.firstChild) {\r\n            node =\r\n                newOffset == PositionType.Begin\r\n                    ? node.firstChild\r\n                    : newOffset == PositionType.End\r\n                    ? node.lastChild\r\n                    : node.childNodes[<number>newOffset];\r\n            newOffset = this.isAtEnd ? PositionType.End : PositionType.Begin;\r\n        }\r\n        return new Position(node, newOffset);\r\n    }\r\n\r\n    /**\r\n     * Check if this position is equal to the given position\r\n     * @param position The position to check\r\n     */\r\n    equalTo(position: NodePosition): boolean {\r\n        return (\r\n            position &&\r\n            (this == position ||\r\n                (this.node == position.node &&\r\n                    this.offset == position.offset &&\r\n                    this.isAtEnd == position.isAtEnd))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if this position is after the given position\r\n     */\r\n    isAfter(position: NodePosition): boolean {\r\n        return this.node == position.node\r\n            ? (this.isAtEnd && !position.isAtEnd) || this.offset > position.offset\r\n            : isNodeAfter(this.node, position.node);\r\n    }\r\n\r\n    /**\r\n     * Move this position with offset, returns a new position with a valid offset in the same node\r\n     * @param offset Offset to move with\r\n     */\r\n    move(offset: number) {\r\n        return new Position(this.node, Math.max(this.offset + offset, 0));\r\n    }\r\n\r\n    /**\r\n     * Get start position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getStart(range: Range) {\r\n        return new Position(range.startContainer, range.startOffset);\r\n    }\r\n\r\n    /**\r\n     * Get end position of the given Range\r\n     * @param range The range to get position from\r\n     */\r\n    static getEnd(range: Range) {\r\n        return new Position(range.endContainer, range.endOffset);\r\n    }\r\n}\r\n\r\nfunction getIndexOfNode(node: Node): number {\r\n    let i = 0;\r\n    while ((node = node.previousSibling)) {\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction getEndOffset(node: Node): number {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return node.nodeValue.length;\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return node.childNodes.length;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n","import { ChangeSource, DocumentCommand, PluginEventType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    getPendableFormatState,\r\n    PendableFormatCommandMap,\r\n    PendableFormatNames,\r\n} from 'roosterjs-editor-dom';\r\n\r\nlet pendableFormatCommands: string[] = null;\r\n\r\n/**\r\n * Execute a document command\r\n * @param editor The editor instance\r\n * @param command The command to execute\r\n * @param addUndoSnapshotWhenCollapsed Optional, set to true to always add undo snapshot even current selection is collapsed.\r\n * Default value is false.\r\n * @param doWorkaroundForList Optional, set to true to do workaround for list in order to keep current format.\r\n * Default value is false.\r\n */\r\nexport default function execCommand(editor: Editor, command: DocumentCommand) {\r\n    editor.focus();\r\n    let formatter = () => editor.getDocument().execCommand(command, false, null);\r\n\r\n    let range = editor.getSelectionRange();\r\n    if (range && range.collapsed) {\r\n        editor.addUndoSnapshot();\r\n        formatter();\r\n\r\n        if (isPendableFormatCommand(command)) {\r\n            // Trigger PendingFormatStateChanged event since we changed pending format state\r\n            editor.triggerPluginEvent(PluginEventType.PendingFormatStateChanged, {\r\n                formatState: getPendableFormatState(editor.getDocument()),\r\n            });\r\n        }\r\n    } else {\r\n        editor.addUndoSnapshot(formatter, ChangeSource.Format);\r\n    }\r\n}\r\n\r\nfunction isPendableFormatCommand(command: DocumentCommand): boolean {\r\n    if (!pendableFormatCommands) {\r\n        pendableFormatCommands = Object.keys(PendableFormatCommandMap).map(\r\n            key => PendableFormatCommandMap[key as PendableFormatNames]\r\n        );\r\n    }\r\n    return pendableFormatCommands.indexOf(command) >= 0;\r\n}\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport NodeBlockElement from './NodeBlockElement';\r\nimport StartEndBlockElement from './StartEndBlockElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This produces a block element from a a node\r\n * It needs to account for various HTML structure. Examples:\r\n * 1) &lt;root&gt;&lt;div&gt;abc&lt;/div&gt;&lt;/root&gt;\r\n *   This is most common the case, user passes in a node pointing to abc, and get back a block representing &lt;div&gt;abc&lt;/div&gt;\r\n * 2) &lt;root&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/root&gt;\r\n *   Common content for empty block, user passes node pointing to &lt;br&gt;, and get back a block representing &lt;p&gt;&lt;br&gt;&lt;/p&gt;\r\n * 3) &lt;root&gt;abc&lt;/root&gt;\r\n *   Not common, but does happen. It is still a block in user's view. User passes in abc, and get back a start-end block representing abc\r\n *   NOTE: abc could be just one node. However, since it is not a html block, it is more appropriate to use start-end block although they point to same node\r\n * 4) &lt;root&gt;&lt;div&gt;abc&lt;br&gt;123&lt;/div&gt;&lt;/root&gt;\r\n *   A bit tricky, but can happen when user use Ctrl+Enter which simply inserts a &lt;BR&gt; to create a link break. There're two blocks:\r\n *   block1: 1) abc&lt;br&gt; block2: 123\r\n * 5) &lt;root&gt;&lt;div&gt;abc&lt;div&gt;123&lt;/div&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   Nesting div and there is text node in same level as a DIV. Two blocks: 1) abc 2) &lt;div&gt;123&lt;/div&gt;\r\n * 6) &lt;root&gt;&lt;div&gt;abc&lt;span&gt;123&lt;br&gt;456&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;\r\n *   This is really tricky. Essentially there is a &lt;BR&gt; in middle of a span breaking the span into two blocks;\r\n *   block1: abc&lt;span&gt;123&lt;br&gt; block2: 456\r\n * In summary, given any arbitary node (leaf), to identify the head and tail of the block, following rules need to be followed:\r\n * 1) to identify the head, it needs to crawl DOM tre left/up till a block node or BR is encountered\r\n * 2) same for identifying tail\r\n * 3) should also apply a block ceiling, meaning as it crawls up, it should stop at a block node\r\n * @param rootNode Root node of the scope, the block element will be inside of this node\r\n * @param node The node to get BlockElement start from\r\n */\r\nexport default function getBlockElementAtNode(rootNode: Node, node: Node): BlockElement {\r\n    if (!contains(rootNode, node)) {\r\n        return null;\r\n    }\r\n\r\n    // Identify the containing block. This serves as ceiling for traversing down below\r\n    // NOTE: this container block could be just the rootNode,\r\n    // which cannot be used to create block element. We will special case handle it later on\r\n    let containerBlockNode = StartEndBlockElement.getBlockContext(node);\r\n    if (containerBlockNode == node) {\r\n        return new NodeBlockElement(containerBlockNode);\r\n    }\r\n\r\n    // Find the head and leaf node in the block\r\n    let headNode = findHeadTailLeafNode(node, containerBlockNode, false /*isTail*/);\r\n    let tailNode = findHeadTailLeafNode(node, containerBlockNode, true /*isTail*/);\r\n\r\n    // At this point, we have the head and tail of a block, here are some examples and where head and tail point to\r\n    // 1) &lt;root&gt;&lt;div&gt;hello&lt;br&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: &lt;br&gt;\r\n    // 2) &lt;root&gt;&lt;div&gt;hello&lt;span style=\"font-family: Arial\"&gt;world&lt;/span&gt;&lt;/div&gt;&lt;/root&gt;, head: hello, tail: world\r\n    // Both are actually completely and exclusively wrapped in a parent div, and can be represented with a Node block\r\n    // So we shall try to collapse as much as we can to the nearest common ancester\r\n    let nodes = collapseNodes(rootNode, headNode, tailNode, false /*canSplitParent*/);\r\n    headNode = nodes[0];\r\n    tailNode = nodes[nodes.length - 1];\r\n\r\n    if (headNode.parentNode != tailNode.parentNode) {\r\n        // Un-Balanced start and end, create a start-end block\r\n        return new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    } else {\r\n        // Balanced start and end (point to same parent), need to see if further collapsing can be done\r\n        while (!headNode.previousSibling && !tailNode.nextSibling) {\r\n            let parentNode = headNode.parentNode;\r\n            if (parentNode == containerBlockNode) {\r\n                // Has reached the container block\r\n                if (containerBlockNode != rootNode) {\r\n                    // If the container block is not the root, use the container block\r\n                    headNode = tailNode = parentNode;\r\n                }\r\n                break;\r\n            } else {\r\n                // Continue collapsing to parent\r\n                headNode = tailNode = parentNode;\r\n            }\r\n        }\r\n\r\n        // If head and tail are same and it is a block element, create NodeBlock, otherwise start-end block\r\n        return headNode == tailNode && isBlockElement(headNode)\r\n            ? new NodeBlockElement(headNode as HTMLElement)\r\n            : new StartEndBlockElement(rootNode, headNode, tailNode);\r\n    }\r\n}\r\n\r\n/**\r\n * Given a node and container block, identify the first/last leaf node\r\n * A leaf node is defined as deepest first/last node in a block\r\n * i.e. &lt;div&gt;&lt;span style=\"font-family: Arial\"&gt;abc&lt;/span&gt;&lt;/div&gt;, abc is the head leaf of the block\r\n * Often &lt;br&gt; or a child &lt;div&gt; is used to create a block. In that case, the leaf after the sibling div or br should be the head leaf\r\n * i.e. &lt;div&gt;123&lt;br&gt;abc&lt;/div&gt;, abc is the head of a block because of a previous sibling &lt;br&gt;\r\n * i.e. &lt;div&gt;&lt;div&gt;123&lt;/div&gt;abc&lt;/div&gt;, abc is also the head of a block because of a previous sibling &lt;div&gt;\r\n */\r\nfunction findHeadTailLeafNode(node: Node, containerBlockNode: Node, isTail: boolean): Node {\r\n    let result = node;\r\n\r\n    if (getTagOfNode(result) == 'BR' && isTail) {\r\n        return result;\r\n    }\r\n\r\n    while (result) {\r\n        let sibling = node;\r\n        while (!(sibling = isTail ? node.nextSibling : node.previousSibling)) {\r\n            node = node.parentNode;\r\n            if (node == containerBlockNode) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        while (sibling) {\r\n            if (isBlockElement(sibling)) {\r\n                return result;\r\n            } else if (getTagOfNode(sibling) == 'BR') {\r\n                return isTail ? sibling : result;\r\n            }\r\n\r\n            node = sibling;\r\n            sibling = isTail ? node.firstChild : node.lastChild;\r\n        }\r\n\r\n        result = node;\r\n    }\r\n    return result;\r\n}\r\n","export { default as changeFontSize, FONT_SIZES } from './format/changeFontSize';\r\nexport {\r\n    default as clearBlockFormat,\r\n    TAGS_TO_UNWRAP,\r\n    TAGS_TO_STOP_UNWRAP,\r\n    ATTRIBUTES_TO_PRESERVE,\r\n} from './format/clearBlockFormat';\r\nexport { default as clearFormat } from './format/clearFormat';\r\nexport { default as createLink } from './format/createLink';\r\nexport {\r\n    default as getFormatState,\r\n    getElementBasedFormatState,\r\n    getStyleBasedFormatState,\r\n} from './format/getFormatState';\r\nexport { default as insertImage } from './format/insertImage';\r\nexport { default as insertTable } from './table/insertTable';\r\nexport { default as editTable } from './table/editTable';\r\nexport { default as formatTable } from './table/formatTable';\r\nexport { default as removeLink } from './format/removeLink';\r\nexport { default as replaceWithNode } from './format/replaceWithNode';\r\nexport { default as setAlignment } from './format/setAlignment';\r\nexport { default as setBackgroundColor } from './format/setBackgroundColor';\r\nexport { default as setTextColor } from './format/setTextColor';\r\nexport { default as setDirection } from './format/setDirection';\r\nexport { default as setFontName } from './format/setFontName';\r\nexport { default as setFontSize } from './format/setFontSize';\r\nexport { default as setImageAltText } from './format/setImageAltText';\r\nexport { default as setIndentation } from './format/setIndentation';\r\nexport { default as toggleBold } from './format/toggleBold';\r\nexport { default as toggleBullet } from './format/toggleBullet';\r\nexport { default as toggleItalic } from './format/toggleItalic';\r\nexport { default as toggleNumbering } from './format/toggleNumbering';\r\nexport { default as toggleBlockQuote } from './format/toggleBlockQuote';\r\nexport { default as toggleCodeBlock } from './format/toggleCodeBlock';\r\nexport { default as toggleStrikethrough } from './format/toggleStrikethrough';\r\nexport { default as toggleSubscript } from './format/toggleSubscript';\r\nexport { default as toggleSuperscript } from './format/toggleSuperscript';\r\nexport { default as toggleUnderline } from './format/toggleUnderline';\r\nexport { default as toggleHeader } from './format/toggleHeader';\r\n\r\n// @deprecated the function getPendableFormatState will still be available from\r\n// roosterjs-editor-dom package, keep export it here just for compatibility\r\nexport { getPendableFormatState } from 'roosterjs-editor-dom';\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport ImageInlineElement from './ImageInlineElement';\r\nimport LinkInlineElement from './LinkInlineElement';\r\nimport NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param rootNode The root node of current scope\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(rootNode: Node, node: Node): InlineElement;\r\n\r\n/**\r\n * Get the inline element at a node\r\n * @param parentBlock Parent BlockElement of this node\r\n * @param node The node to get InlineElement from\r\n */\r\nexport default function getInlineElementAtNode(\r\n    parentBlock: BlockElement,\r\n    node: Node\r\n): InlineElement;\r\n\r\nexport default function getInlineElementAtNode(\r\n    parent: Node | BlockElement,\r\n    node: Node\r\n): InlineElement {\r\n    // An inline element has to be in a block element, get the block first and then resolve through the factory\r\n    let parentBlock = parent instanceof Node ? getBlockElementAtNode(parent, node) : parent;\r\n    return node && parentBlock && resolveInlineElement(node, parentBlock);\r\n}\r\n\r\n/**\r\n * Resolve an inline element by a leaf node\r\n * @param node The node to resolve from\r\n * @param parentBlock The parent block element\r\n */\r\nfunction resolveInlineElement(node: Node, parentBlock: BlockElement): InlineElement {\r\n    let nodeChain = [node];\r\n    for (\r\n        let parent = node.parentNode;\r\n        parent && parentBlock.contains(parent);\r\n        parent = parent.parentNode\r\n    ) {\r\n        nodeChain.push(parent);\r\n    }\r\n\r\n    let inlineElement: InlineElement;\r\n\r\n    for (let i = nodeChain.length - 1; i >= 0 && !inlineElement; i--) {\r\n        let currentNode = nodeChain[i];\r\n        let tag = getTagOfNode(currentNode);\r\n        if (tag == 'A') {\r\n            inlineElement = new LinkInlineElement(currentNode, parentBlock);\r\n        } else if (tag == 'IMG') {\r\n            inlineElement = new ImageInlineElement(currentNode, parentBlock);\r\n        }\r\n    }\r\n\r\n    return inlineElement || new NodeInlineElement(node, parentBlock);\r\n}\r\n","import contains from './contains';\r\nimport shouldSkipNode from './shouldSkipNode';\r\n\r\n/**\r\n * This walks forwards/backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n * @param isNext True to get next leaf sibling node, false to get previous leaf sibling node\r\n */\r\nexport function getLeafSibling(rootNode: Node, startNode: Node, isNext: boolean): Node {\r\n    let result = null;\r\n    let getSibling = isNext\r\n        ? (node: Node) => node.nextSibling\r\n        : (node: Node) => node.previousSibling;\r\n    let getChild = isNext ? (node: Node) => node.firstChild : (node: Node) => node.lastChild;\r\n    if (contains(rootNode, startNode)) {\r\n        let curNode = startNode;\r\n        let shouldContinue = true;\r\n\r\n        while (shouldContinue) {\r\n            // Find next/previous node, starting from next/previous sibling, then one level up to find next/previous sibling from parent\r\n            // till a non-null nextSibling/previousSibling is found or the ceiling is encountered (rootNode)\r\n            let parentNode = curNode.parentNode;\r\n            curNode = getSibling(curNode);\r\n            while (!curNode && parentNode != rootNode) {\r\n                curNode = getSibling(parentNode);\r\n                parentNode = parentNode.parentNode;\r\n            }\r\n\r\n            // Now traverse down to get first/last child\r\n            while (curNode && getChild(curNode)) {\r\n                curNode = getChild(curNode);\r\n            }\r\n\r\n            // Check special nodes (i.e. node that has a display:none etc.) and continue looping if so\r\n            shouldContinue = curNode && shouldSkipNode(curNode);\r\n            if (!shouldContinue) {\r\n                // Found a good leaf node, assign and exit\r\n                result = curNode;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * This walks forwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n */\r\nexport function getNextLeafSibling(rootNode: Node, startNode: Node): Node {\r\n    return getLeafSibling(rootNode, startNode, true /*isNext*/);\r\n}\r\n\r\n/**\r\n * This walks backwards DOM tree to get next meaningful node\r\n * @param rootNode Root node to scope the leaf sibling node\r\n * @param startNode current node to get sibling node from\r\n */\r\nexport function getPreviousLeafSibling(rootNode: Node, startNode: Node): Node {\r\n    return getLeafSibling(rootNode, startNode, false /*isNext*/);\r\n}\r\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Checks if node1 is after node2\r\n * @param node1 The node to check if it is after another node\r\n * @param node2 The node to check if another node is after this one\r\n * @returns True if node1 is after node2, otherwise false\r\n */\r\nexport default function isNodeAfter(node1: Node, node2: Node): boolean {\r\n    return !!(\r\n        node1 &&\r\n        node2 &&\r\n        (node2.compareDocumentPosition(node1) & DocumentPosition.Following) ==\r\n            DocumentPosition.Following\r\n    );\r\n}\r\n","import isVoidHtmlElement from '../utils/isVoidHtmlElement';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, PositionType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Create a range around the given node(s)\r\n * @param startNode The start node to create range from\r\n * @param endNode The end node to create range from. If specified, the range will start before startNode and\r\n * end after endNode, otherwise, the range will start before and end after the start node\r\n * @returns A range start before the given node and end after the given node\r\n */\r\nexport default function createRange(startNode: Node, endNode?: Node): Range;\r\n\r\n/**\r\n * Create a collapsed range at the given node and offset\r\n * @param node The container node of the range\r\n * @param offset The offset of the range, can be a number or value of PositionType\r\n * @returns A range at the given node and offset\r\n */\r\nexport default function createRange(node: Node, offset: number | PositionType): Range;\r\n\r\n/**\r\n * Create a range with the given start/end container node and offset\r\n * @param startNode The start container node of the range\r\n * @param startOffset The start offset of the range\r\n * @param endNode The end container node of the range\r\n * @param endOffset The end offset of the range\r\n * @returns A range at the given start/end container node and offset\r\n */\r\nexport default function createRange(\r\n    startNode: Node,\r\n    startOffset: number | PositionType,\r\n    endNode: Node,\r\n    endOffset: number | PositionType\r\n): Range;\r\n\r\n/**\r\n * Create a range under the given rootNode with start and end selection paths\r\n * @param rootNode The root node that the selection paths start from\r\n * @param startPath The selection path of the start position of the range\r\n * @param endPath The selection path of the end position of the range\r\n * @returns A range with the given start and end selection paths\r\n */\r\nexport default function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n\r\n/**\r\n * Create a range with the start and end position\r\n * @param startPosition The start position of the range\r\n * @param endPosition The end position of the range, if not specified, the range will be collapsed at start position\r\n * @returns A range start at startPosition, end at endPosition, or startPosition when endPosition is not specified\r\n */\r\nexport default function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n\r\nexport default function createRange(\r\n    arg1: Node | NodePosition,\r\n    arg2?: number | number[] | Node | NodePosition,\r\n    arg3?: Node | number[],\r\n    arg4?: number\r\n): Range {\r\n    let start: NodePosition;\r\n    let end: NodePosition;\r\n\r\n    if (isNodePosition(arg1)) {\r\n        // function createRange(startPosition: NodePosition, endPosition?: NodePosition): Range;\r\n        start = arg1;\r\n        end = isNodePosition(arg2) ? arg2 : null;\r\n    } else if (arg1 instanceof Node) {\r\n        if (arg2 instanceof Array) {\r\n            // function createRange(rootNode: Node, startPath: number[], endPath?: number[]): Range;\r\n            start = getPositionFromPath(arg1, arg2);\r\n            end = arg3 instanceof Array ? getPositionFromPath(arg1, arg3) : null;\r\n        } else if (typeof arg2 == 'number') {\r\n            // function createRange(node: Node, offset: number | PositionType): Range;\r\n            // function createRange(startNode: Node, startOffset: number | PositionType, endNode: Node, endOffset: number | PositionType): Range;\r\n            start = new Position(arg1, arg2);\r\n            end = arg3 instanceof Node ? new Position(arg3, arg4) : null;\r\n        } else if (arg2 instanceof Node || !arg2) {\r\n            // function createRange(startNode: Node, endNode?: Node): Range;\r\n            start = new Position(arg1, PositionType.Before);\r\n            end = new Position(<Node>arg2 || arg1, PositionType.After);\r\n        }\r\n    }\r\n\r\n    if (start && start.node) {\r\n        let range = start.node.ownerDocument.createRange();\r\n        start = getFocusablePosition(start);\r\n        end = getFocusablePosition(end || start);\r\n        range.setStart(start.node, start.offset);\r\n        range.setEnd(end.node, end.offset);\r\n\r\n        return range;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Convert to focusable position\r\n * If current node is a void element, we need to move up one level to put cursor outside void element\r\n */\r\nfunction getFocusablePosition(position: NodePosition) {\r\n    return position.node.nodeType == NodeType.Element && isVoidHtmlElement(position.node)\r\n        ? new Position(position.node, position.isAtEnd ? PositionType.After : PositionType.Before)\r\n        : position;\r\n}\r\n\r\nfunction isNodePosition(arg: any): arg is NodePosition {\r\n    return arg && arg.node;\r\n}\r\n\r\nfunction getPositionFromPath(node: Node, path: number[]): NodePosition {\r\n    if (!node || !path) {\r\n        return null;\r\n    }\r\n\r\n    // Iterate with a for loop to avoid mutating the passed in element path stack\r\n    // or needing to copy it.\r\n    let offset: number;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        offset = path[i];\r\n        if (\r\n            i < path.length - 1 &&\r\n            node &&\r\n            node.nodeType == NodeType.Element &&\r\n            node.childNodes.length > offset\r\n        ) {\r\n            node = node.childNodes[offset];\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return new Position(node, offset);\r\n}\r\n\r\n/**\r\n * @deprecated Use createRange instead\r\n * Get range from the given selection path\r\n * @param rootNode Root node of the selection path\r\n * @param path The selection path which contains start and end position path\r\n */\r\nexport function getRangeFromSelectionPath(rootNode: HTMLElement, path: SelectionPath) {\r\n    return createRange(rootNode, path.start, path.end);\r\n}\r\n","import { applyTextStyle, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { ChangeSource, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst ZERO_WIDTH_SPACE = '\\u200B';\r\n\r\n/**\r\n * Apply inline style to current selection\r\n * @param editor The editor instance\r\n * @param callback The callback function to apply style\r\n */\r\nexport default function applyInlineStyle(\r\n    editor: Editor,\r\n    callback: (element: HTMLElement, isInnerNode?: boolean) => any\r\n) {\r\n    editor.focus();\r\n    let range = editor.getSelectionRange();\r\n\r\n    if (range && range.collapsed) {\r\n        let node = range.startContainer;\r\n        let isEmptySpan =\r\n            getTagOfNode(node) == 'SPAN' &&\r\n            (!node.firstChild ||\r\n                (getTagOfNode(node.firstChild) == 'BR' && !node.firstChild.nextSibling));\r\n        if (isEmptySpan) {\r\n            editor.addUndoSnapshot();\r\n            callback(node as HTMLElement);\r\n        } else {\r\n            let isZWSNode =\r\n                node &&\r\n                node.nodeType == NodeType.Text &&\r\n                node.nodeValue == ZERO_WIDTH_SPACE &&\r\n                getTagOfNode(node.parentNode) == 'SPAN';\r\n\r\n            if (!isZWSNode) {\r\n                editor.addUndoSnapshot();\r\n                // Create a new text node to hold the selection.\r\n                // Some content is needed to position selection into the span\r\n                // for here, we inject ZWS - zero width space\r\n                node = editor.getDocument().createTextNode(ZERO_WIDTH_SPACE);\r\n                range.insertNode(node);\r\n            }\r\n\r\n            applyTextStyle(node, callback);\r\n            editor.select(node, PositionType.End);\r\n        }\r\n    } else {\r\n        // This is start and end node that get the style. The start and end needs to be recorded so that selection\r\n        // can be re-applied post-applying style\r\n        editor.addUndoSnapshot(() => {\r\n            let firstNode: Node;\r\n            let lastNode: Node;\r\n            let contentTraverser = editor.getSelectionTraverser();\r\n            let inlineElement = contentTraverser && contentTraverser.currentInlineElement;\r\n            while (inlineElement) {\r\n                let nextInlineElement = contentTraverser.getNextInlineElement();\r\n                inlineElement.applyStyle((element, isInnerNode) => {\r\n                    callback(element, isInnerNode);\r\n                    firstNode = firstNode || element;\r\n                    lastNode = element;\r\n                });\r\n                inlineElement = nextInlineElement;\r\n            }\r\n            if (firstNode && lastNode) {\r\n                editor.select(firstNode, PositionType.Before, lastNode, PositionType.After);\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","export { default as HtmlSanitizer } from './sanitizer/HtmlSanitizer';\r\nexport { default as HtmlSanitizerOptions } from './types/HtmlSanitizerOptions';\r\nexport { default as SanitizeHtmlOptions } from './types/SanitizeHtmlOptions';\r\nexport { default as htmlToDom, splitWithFragment } from './utils/htmlToDom';\r\nexport { default as getInheritableStyles } from './utils/getInheritableStyles';\r\nexport {\r\n    AttributeCallback,\r\n    AttributeCallbackMap,\r\n    ElementCallback,\r\n    Map,\r\n    StringMap,\r\n    StyleCallback,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n} from './types/maps';\r\n","import isNodeAfter from './isNodeAfter';\r\n\r\n/**\r\n * Split parent node of the given node before/after the given node.\r\n * When a parent node contains [A,B,C] and pass B as the given node,\r\n * If split before, the new nodes will be [A][B,C] and returns [A];\r\n * otherwise, it will be [A,B][C] and returns [C].\r\n * @param node The node to split before/after\r\n * @param splitBefore Whether split before or after\r\n * @param removeEmptyNewNode If the new node is empty (even then only child is space or ZER_WIDTH_SPACE),\r\n * we remove it. @default false\r\n * @returns The new parent node\r\n */\r\nexport default function splitParentNode(node: Node, splitBefore: boolean): Node {\r\n    if (!node || !node.parentNode) {\r\n        return null;\r\n    }\r\n\r\n    let parentNode = node.parentNode;\r\n    let newParent = parentNode.cloneNode(false /*deep*/) as HTMLElement;\r\n    newParent.removeAttribute('id');\r\n    if (splitBefore) {\r\n        while (parentNode.firstChild && parentNode.firstChild != node) {\r\n            newParent.appendChild(parentNode.firstChild);\r\n        }\r\n    } else {\r\n        while (node.nextSibling) {\r\n            newParent.appendChild(node.nextSibling);\r\n        }\r\n    }\r\n\r\n    // When the only child of new parent is ZERO_WIDTH_SPACE, we can still prevent keeping it by set removeEmptyNewNode to true\r\n    if (newParent.firstChild && newParent.innerHTML != '') {\r\n        parentNode.parentNode.insertBefore(\r\n            newParent,\r\n            splitBefore ? parentNode : parentNode.nextSibling\r\n        );\r\n    } else {\r\n        newParent = null;\r\n    }\r\n\r\n    return newParent;\r\n}\r\n\r\n/**\r\n * Split parent node by a balanced node range\r\n * @param nodes The nodes to split from. If only one node is passed, split it from all its siblings.\r\n * If two or nodes are passed, will split before the first one and after the last one, all other nodes will be ignored\r\n * @returns The parent node of the given node range if the given nodes are balanced, otherwise null\r\n */\r\nexport function splitBalancedNodeRange(nodes: Node | Node[]): HTMLElement {\r\n    let start = nodes instanceof Array ? nodes[0] : nodes;\r\n    let end = nodes instanceof Array ? nodes[nodes.length - 1] : nodes;\r\n    let parentNode = start && end && start.parentNode == end.parentNode ? start.parentNode : null;\r\n    if (parentNode) {\r\n        if (isNodeAfter(start, end)) {\r\n            let temp = end;\r\n            end = start;\r\n            start = temp;\r\n        }\r\n        splitParentNode(start, true /*splitBefore*/);\r\n        splitParentNode(end, false /*splitBefore*/);\r\n    }\r\n\r\n    return parentNode as HTMLElement;\r\n}\r\n","import fromHtml from './fromHtml';\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML tag name\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap<T extends keyof HTMLElementTagNameMap>(\r\n    nodes: Node | Node[],\r\n    wrapper?: T\r\n): HTMLElementTagNameMap[T];\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML string, default value is DIV\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string): HTMLElement;\r\n\r\n/**\r\n * Wrap all the node with html and return the wrapped node, and put the wrapper node under the parent of the first node\r\n * @param nodes The node or node array to wrap\r\n * @param wrapper The wrapper HTML element, default value is a new DIV element\r\n * @returns The wrapper element\r\n */\r\nexport default function wrap(nodes: Node | Node[], wrapper?: HTMLElement): HTMLElement;\r\n\r\nexport default function wrap(nodes: Node | Node[], wrapper?: string | HTMLElement): HTMLElement {\r\n    nodes = !nodes ? [] : nodes instanceof Node ? [nodes] : nodes;\r\n    if (nodes.length == 0 || !nodes[0]) {\r\n        return null;\r\n    }\r\n\r\n    if (!(wrapper instanceof Element)) {\r\n        let document = nodes[0].ownerDocument;\r\n        wrapper = wrapper || 'div';\r\n        wrapper = /^\\w+$/.test(wrapper)\r\n            ? document.createElement(wrapper)\r\n            : (fromHtml(wrapper, document)[0] as HTMLElement);\r\n    }\r\n\r\n    let parentNode = nodes[0].parentNode;\r\n\r\n    if (parentNode) {\r\n        parentNode.insertBefore(wrapper, nodes[0]);\r\n    }\r\n\r\n    for (let node of nodes) {\r\n        wrapper.appendChild(node);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n","import contains from './contains';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\ninterface HTMLElementForIE extends HTMLElement {\r\n    msMatchesSelector: (selector: string) => boolean;\r\n}\r\n\r\n/**\r\n * Find closest element ancestor start from the given node which matches the given selector\r\n * @param node Find ancestor start from this node\r\n * @param root Root node where the search should stop at. The return value can never be this node\r\n * @param selector The expected selector. If null, return the first HTML Element found from start node\r\n * @returns An HTML element which matches the given selector. If the given start node matches the selector,\r\n * returns the given node\r\n */\r\nexport default function findClosestElementAncestor(\r\n    node: Node,\r\n    root?: Node,\r\n    selector?: string\r\n): HTMLElement {\r\n    node = !node ? null : node.nodeType == NodeType.Element ? node : node.parentNode;\r\n    let element = node && node.nodeType == NodeType.Element ? <HTMLElement>node : null;\r\n\r\n    if (element && selector) {\r\n        if (element.closest) {\r\n            element = element.closest(selector) as HTMLElement;\r\n        } else {\r\n            while (\r\n                element &&\r\n                element != root &&\r\n                !(element.matches || (<HTMLElementForIE>element).msMatchesSelector).call(\r\n                    element,\r\n                    selector\r\n                )\r\n            ) {\r\n                element = element.parentElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    return !root || contains(root, element) ? element : null;\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport Position from '../selection/Position';\r\nimport {\r\n    BlockElement,\r\n    InlineElement,\r\n    NodePosition,\r\n    NodeType,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents an inline element that can be reprented by a single html node.\r\n * This serves as base for most inline element as it contains most implentation\r\n * of all operations that can happen on an inline element. Other sub inline elements mostly\r\n * just identify themself for a certain type\r\n */\r\nexport default class NodeInlineElement implements InlineElement {\r\n    constructor(private containerNode: Node, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * The text content for this inline element\r\n     */\r\n    public getTextContent(): string {\r\n        // nodeValue is better way to retrieve content for a text. Others, just use textContent\r\n        return this.containerNode.nodeType == NodeType.Text\r\n            ? this.containerNode.nodeValue\r\n            : this.containerNode.textContent;\r\n    }\r\n\r\n    /**\r\n     * Get the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.containerNode;\r\n    }\r\n\r\n    // Get the parent block\r\n    public getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of the inline element\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest first child node from the container\r\n        return new Position(this.containerNode, 0).normalize();\r\n    }\r\n\r\n    /**\r\n     * Get the end position of the inline element\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        // For a position, we always want it to point to a leaf node\r\n        // We should try to go get the lowest last child node from the container\r\n        return new Position(this.containerNode, PositionType.End).normalize();\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.containerNode && this.containerNode.nodeType == NodeType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks if an inline element is after the current inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && isNodeAfter(this.containerNode, inlineElement.getContainerNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if the given position is contained in the inline element\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        let start = this.getStartPosition();\r\n        let end = this.getEndPosition();\r\n        return pos && pos.isAfter(start) && end.isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to an inline element\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement, isInnerNode?: boolean) => any): void {\r\n        applyTextStyle(this.containerNode, styler);\r\n    }\r\n}\r\n","import applyTextStyle from '../utils/applyTextStyle';\r\nimport createRange from '../selection/createRange';\r\nimport Position from '../selection/Position';\r\nimport { BlockElement, InlineElement, NodePosition, PositionType } from 'roosterjs-editor-types';\r\nimport { getNextLeafSibling, getPreviousLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * This is a special version of inline element that identifies a section of an inline element\r\n * We often have the need to cut an inline element in half and perform some operation only on half of an inline element\r\n * i.e. users select only some text of a text node and apply format, in that case, format has to happen on partial of an inline element\r\n * PartialInlineElement is implemented in a way that decorate another full inline element with its own override on methods like isAfter\r\n * It also offers some special methods that others don't have, i.e. nextInlineElement etc.\r\n */\r\nexport default class PartialInlineElement implements InlineElement {\r\n    constructor(\r\n        private inlineElement: InlineElement,\r\n        private start?: NodePosition,\r\n        private end?: NodePosition\r\n    ) {}\r\n\r\n    /**\r\n     * Get the full inline element that this partial inline decorates\r\n     */\r\n    public getDecoratedInline(): InlineElement {\r\n        return this.inlineElement;\r\n    }\r\n\r\n    /**\r\n     * Gets the container node\r\n     */\r\n    public getContainerNode(): Node {\r\n        return this.inlineElement.getContainerNode();\r\n    }\r\n\r\n    /**\r\n     * Gets the parent block\r\n     */\r\n    public getParentBlock(): BlockElement {\r\n        return this.inlineElement.getParentBlock();\r\n    }\r\n\r\n    /**\r\n     * Gets the text content\r\n     */\r\n    public getTextContent(): string {\r\n        let range = createRange(this.getStartPosition(), this.getEndPosition());\r\n\r\n        return range.toString();\r\n    }\r\n\r\n    /**\r\n     * Get start position of this inline element.\r\n     */\r\n    public getStartPosition(): NodePosition {\r\n        return this.start || this.inlineElement.getStartPosition();\r\n    }\r\n\r\n    /**\r\n     * Get end position of this inline element.\r\n     */\r\n    public getEndPosition(): NodePosition {\r\n        return this.end || this.inlineElement.getEndPosition();\r\n    }\r\n\r\n    /**\r\n     * Get next partial inline element if it is not at the end boundary yet\r\n     */\r\n    public get nextInlineElement(): PartialInlineElement {\r\n        return this.end && new PartialInlineElement(this.inlineElement, this.end, null);\r\n    }\r\n\r\n    /**\r\n     * Get previous partial inline element if it is not at the begin boundary yet\r\n     */\r\n    public get previousInlineElement(): PartialInlineElement {\r\n        return this.start && new PartialInlineElement(this.inlineElement, null, this.start);\r\n    }\r\n\r\n    /**\r\n     * Checks if it contains a position\r\n     */\r\n    public contains(pos: NodePosition): boolean {\r\n        return pos && pos.isAfter(this.getStartPosition()) && this.getEndPosition().isAfter(pos);\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    public isTextualInlineElement(): boolean {\r\n        return this.inlineElement && this.inlineElement.isTextualInlineElement();\r\n    }\r\n\r\n    /**\r\n     * Check if this inline element is after the other inline element\r\n     */\r\n    public isAfter(inlineElement: InlineElement): boolean {\r\n        let thisStart = this.getStartPosition();\r\n        let otherEnd = inlineElement && inlineElement.getEndPosition();\r\n        return otherEnd && (thisStart.isAfter(otherEnd) || thisStart.equalTo(otherEnd));\r\n    }\r\n\r\n    /**\r\n     * apply style\r\n     */\r\n    public applyStyle(styler: (element: HTMLElement, isInnerNode?: boolean) => any) {\r\n        let from = this.getStartPosition().normalize();\r\n        let to = this.getEndPosition().normalize();\r\n        let container = this.getContainerNode();\r\n\r\n        if (from.isAtEnd) {\r\n            let nextNode = getNextLeafSibling(container, from.node);\r\n            from = nextNode ? new Position(nextNode, PositionType.Begin) : null;\r\n        }\r\n        if (to.offset == 0) {\r\n            let previousNode = getPreviousLeafSibling(container, to.node);\r\n            to = previousNode ? new Position(previousNode, PositionType.End) : null;\r\n        }\r\n\r\n        applyTextStyle(container, styler, from, to);\r\n    }\r\n}\r\n","import contains from '../utils/contains';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This presents a content block that can be reprented by a single html block type element.\r\n * In most cases, it corresponds to an HTML block level element, i.e. P, DIV, LI, TD etc.\r\n */\r\nexport default class NodeBlockElement implements BlockElement {\r\n    constructor(private element: HTMLElement) { }\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the start node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Get the end node of the block\r\n     * For NodeBlockElement, start and end essentially refers to same node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.element;\r\n    }\r\n\r\n    /**\r\n     * Checks if it refers to same block\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        // Ideally there is only one unique way to generate a block so we only need to compare the startNode\r\n        return this.element == blockElement.getStartNode();\r\n    }\r\n\r\n    /**\r\n     * Checks if a block is after the current block\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        // if the block's startNode is after current node endEnd, we say it is after\r\n        return isNodeAfter(this.element, blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if a certain html node is within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return contains(this.element, node, true /*treatSameNodeAsContain*/);\r\n    }\r\n\r\n    /**\r\n     * Get the text content of this block element\r\n     */\r\n    public getTextContent(): string {\r\n        return this.element.textContent;\r\n    }\r\n}\r\n","import contains from './contains';\r\nimport splitParentNode from './splitParentNode';\r\n\r\n/**\r\n * Collapse nodes within the given start and end nodes to their common ascenstor node,\r\n * split parent nodes if necessary\r\n * @param root The root node of the scope\r\n * @param start The start node\r\n * @param end The end node\r\n * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\r\n * and the returned nodes will be all nodes from start trhough end after splitting\r\n * False to disallow split parent\r\n * @returns When cansplitParent is true, returns all node from start through end after splitting,\r\n * otherwise just return start and end\r\n */\r\nexport default function collapseNodes(\r\n    root: Node,\r\n    start: Node,\r\n    end: Node,\r\n    canSplitParent: boolean\r\n): Node[] {\r\n    if (!contains(root, start) || !contains(root, end)) {\r\n        return [];\r\n    }\r\n\r\n    start = collapse(root, start, end, true /*isStart*/, canSplitParent);\r\n    end = collapse(root, end, start, false /*isStart*/, canSplitParent);\r\n\r\n    if (contains(start, end, true /*treateSameNodeAsContain*/)) {\r\n        return [start];\r\n    } else if (contains(end, start)) {\r\n        return [end];\r\n    } else if (start.parentNode == end.parentNode) {\r\n        let nodes = [].slice.call(start.parentNode.childNodes) as Node[];\r\n        let startIndex = nodes.indexOf(start);\r\n        let endIndex = nodes.indexOf(end);\r\n        return nodes.slice(startIndex, endIndex + 1);\r\n    } else {\r\n        return [start, end];\r\n    }\r\n}\r\n\r\nfunction collapse(\r\n    root: Node,\r\n    node: Node,\r\n    ref: Node,\r\n    isStart: boolean,\r\n    canSplitParent: boolean\r\n): Node {\r\n    while (node.parentNode != root && !contains(node.parentNode, ref)) {\r\n        if ((isStart && node.previousSibling) || (!isStart && node.nextSibling)) {\r\n            if (!canSplitParent) {\r\n                break;\r\n            }\r\n            splitParentNode(node, isStart);\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n    return node;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\nconst BLOCK_ELEMENT_TAGS = 'ADDRESS,ARTICLE,ASIDE,BLOCKQUOTE,CANVAS,DD,DIV,DL,DT,FIELDSET,FIGCAPTION,FIGURE,FOOTER,FORM,H1,H2,H3,H4,H5,H6,HEADER,HR,LI,MAIN,NAV,NOSCRIPT,OL,OUTPUT,P,PRE,SECTION,TABLE,TD,TH,TFOOT,UL,VIDEO'.split(\r\n    ','\r\n);\r\nconst BLOCK_DISPLAY_STYLES = ['block', 'list-item', 'table-cell'];\r\n\r\n/**\r\n * Checks if the node is a block like element. Block like element are usually those P, DIV, LI, TD etc.\r\n * @param node The node to check\r\n * @returns True if the node is a block element, otherwise false\r\n */\r\nexport default function isBlockElement(node: Node): boolean {\r\n    let tag = getTagOfNode(node);\r\n    return !!(\r\n        tag &&\r\n        (BLOCK_DISPLAY_STYLES.indexOf((<HTMLElement>node).style.display) >= 0 ||\r\n            BLOCK_ELEMENT_TAGS.indexOf(tag) >= 0)\r\n    );\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * HTML void elements\r\n * Per https://www.w3.org/TR/html/syntax.html#syntax-elements, cannot have child nodes\r\n * This regex is used when we move focus to very begin of editor. We should avoid putting focus inside\r\n * void elements so users don't accidently create child nodes in them\r\n */\r\nconst HTML_VOID_ELEMENTS = 'AREA,BASE,BR,COL,COMMAND,EMBED,HR,IMG,INPUT,KEYGEN,LINK,META,PARAM,SOURCE,TRACK,WBR'.split(\r\n    ','\r\n);\r\n\r\n/**\r\n * Check if the given node is html void element. Void element cannot have childen\r\n * @param node The node to check\r\n */\r\nexport default function isVoidHtmlElement(node: Node): boolean {\r\n    return !!node && HTML_VOID_ELEMENTS.indexOf(getTagOfNode(node)) >= 0;\r\n}\r\n","import BodyScoper from './BodyScoper';\r\nimport EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport SelectionBlockScoper from './SelectionBlockScoper';\r\nimport SelectionScoper from './SelectionScoper';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementBeforeAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\n\r\n/**\r\n * The provides traversing of content inside editor.\r\n * There are two ways to traverse, block by block, or inline element by inline element\r\n * Block and inline traversing is independent from each other, meanning if you traverse block by block, it does not change\r\n * the current inline element position\r\n */\r\nexport default class ContentTraverser {\r\n    private currentInline: InlineElement;\r\n    private currentBlock: BlockElement;\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param scoper Traversing scoper object to help scope the traversing\r\n     */\r\n    private constructor(private scoper: TraversingScoper) {}\r\n\r\n    /**\r\n     * Create a content traverser for the whole body of given root node\r\n     * @param rootNode The root node to traverse in\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    public static createBodyTraverser(rootNode: Node, startNode?: Node): ContentTraverser {\r\n        return new ContentTraverser(new BodyScoper(rootNode, startNode));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for the given selection\r\n     * @param rootNode The root node to traverse in\r\n     * @param range The selection range to scope the traversing\r\n     */\r\n    public static createSelectionTraverser(rootNode: Node, range: Range): ContentTraverser {\r\n        return new ContentTraverser(new SelectionScoper(rootNode, range));\r\n    }\r\n\r\n    /**\r\n     * Create a content traverser for a block element which contains the given position\r\n     * @param rootNode The root node to traverse in\r\n     * @param position A position inside a block, traversing will be scoped within this block.\r\n     * If passing a range, the start position of this range will be used\r\n     * @param startFrom Start position of traversing. The value can be Begin, End, SelectionStart\r\n     */\r\n    public static createBlockTraverser(\r\n        rootNode: Node,\r\n        position: NodePosition | Range,\r\n        start: ContentPosition = ContentPosition.SelectionStart\r\n    ): ContentTraverser {\r\n        return new ContentTraverser(new SelectionBlockScoper(rootNode, position, start));\r\n    }\r\n\r\n    /**\r\n     * Get current block\r\n     */\r\n    public get currentBlockElement(): BlockElement {\r\n        // Prepare currentBlock from the scoper\r\n        if (!this.currentBlock) {\r\n            this.currentBlock = this.scoper.getStartBlockElement();\r\n        }\r\n\r\n        return this.currentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get next block element\r\n     */\r\n    public getNextBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous block element\r\n     */\r\n    public getPreviousBlockElement(): BlockElement {\r\n        return this.getPreviousNextBlockElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextBlockElement(isNext: boolean): BlockElement {\r\n        let current = this.currentBlockElement;\r\n        let leaf = getLeafSibling(\r\n            this.scoper.rootNode,\r\n            isNext ? current.getEndNode() : current.getStartNode(),\r\n            isNext\r\n        );\r\n        let newBlock = leaf ? getBlockElementAtNode(this.scoper.rootNode, leaf) : null;\r\n\r\n        // Make sure this is right block:\r\n        // 1) the block is in scope per scoper\r\n        // 2) the block is after (for next) or before (for previous) the current block\r\n        // Then:\r\n        // 1) Re-position current block to newly found block\r\n        if (\r\n            newBlock &&\r\n            this.scoper.isBlockInScope(newBlock) &&\r\n            ((isNext && newBlock.isAfter(current)) || (!isNext && current.isAfter(newBlock)))\r\n        ) {\r\n            this.currentBlock = newBlock;\r\n            return this.currentBlock;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Current inline element getter\r\n     */\r\n    public get currentInlineElement(): InlineElement {\r\n        // Retrieve a start inline from scoper\r\n        if (!this.currentInline) {\r\n            this.currentInline = this.scoper.getStartInlineElement();\r\n        }\r\n\r\n        return this.currentInline instanceof EmptyInlineElement ? null : this.currentInline;\r\n    }\r\n\r\n    /**\r\n     * Get next inline element\r\n     */\r\n    public getNextInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(true /*isNext*/);\r\n    }\r\n\r\n    /**\r\n     * Get previous inline element\r\n     */\r\n    public getPreviousInlineElement(): InlineElement {\r\n        return this.getPreviousNextInlineElement(false /*isNext*/);\r\n    }\r\n\r\n    private getPreviousNextInlineElement(isNext: boolean): InlineElement {\r\n        let current = this.currentInlineElement || this.currentInline;\r\n        let newInline: InlineElement;\r\n\r\n        if (current instanceof EmptyInlineElement) {\r\n            newInline = getInlineElementBeforeAfter(\r\n                this.scoper.rootNode,\r\n                current.getStartPosition(),\r\n                isNext\r\n            );\r\n            if (newInline && !current.getParentBlock().contains(newInline.getContainerNode())) {\r\n                newInline = null;\r\n            }\r\n        } else {\r\n            newInline = getNextPreviousInlineElement(this.scoper.rootNode, current, isNext);\r\n            newInline =\r\n                newInline &&\r\n                current &&\r\n                ((isNext && newInline.isAfter(current)) || (!isNext && current.isAfter(newInline)))\r\n                    ? newInline\r\n                    : null;\r\n        }\r\n\r\n        // For inline, we need to make sure:\r\n        // 1) it is really next/previous to current\r\n        // 2) pass on the new inline to this.scoper to do the triming and we still get back an inline\r\n        // Then\r\n        // 1) re-position current inline\r\n        if (newInline && (newInline = this.scoper.trimInlineElement(newInline))) {\r\n            this.currentInline = newInline;\r\n            return this.currentInline;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getNextPreviousInlineElement(\r\n    rootNode: Node,\r\n    current: InlineElement,\r\n    isNext: boolean\r\n): InlineElement {\r\n    if (!current) {\r\n        return null;\r\n    }\r\n    if (current instanceof PartialInlineElement) {\r\n        // if current is partial, get the the othe half of the inline unless it is no more\r\n        let result = isNext ? current.nextInlineElement : current.previousInlineElement;\r\n\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Get a leaf node after startNode and use that base to find next inline\r\n    let startNode = current.getContainerNode();\r\n    startNode = getLeafSibling(rootNode, startNode, isNext);\r\n    return getInlineElementAtNode(rootNode, startNode);\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport Position from '../selection/Position';\r\nimport wrap from './wrap';\r\nimport { getNextLeafSibling } from './getLeafSibling';\r\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from './splitParentNode';\r\n\r\nconst STYLETAGS = 'SPAN,B,I,U,EM,STRONG,STRIKE,S,SMALL'.split(',');\r\n\r\n/**\r\n * Apply style using a styler function to the given container node in the given range\r\n * @param container The container node to apply style to\r\n * @param styler The styler function\r\n * @param from From position\r\n * @param to To position\r\n */\r\nexport default function applyTextStyle(\r\n    container: Node,\r\n    styler: (node: HTMLElement, isInnerNode?: boolean) => any,\r\n    from: NodePosition = new Position(container, PositionType.Begin).normalize(),\r\n    to: NodePosition = new Position(container, PositionType.End).normalize()\r\n) {\r\n    let formatNodes: Node[] = [];\r\n\r\n    while (from && to && to.isAfter(from)) {\r\n        let formatNode = from.node;\r\n        let parentTag = getTagOfNode(formatNode.parentNode);\r\n\r\n        // The code below modifies DOM. Need to get the next sibling first otherwise you won't be able to reliably get a good next sibling node\r\n        let nextNode = getNextLeafSibling(container, formatNode);\r\n\r\n        if (formatNode.nodeType == NodeType.Text && ['TR', 'TABLE'].indexOf(parentTag) < 0) {\r\n            if (formatNode == to.node && !to.isAtEnd) {\r\n                formatNode = splitTextNode(formatNode, to.offset, true /*returnFirstPart*/);\r\n            }\r\n\r\n            if (from.offset > 0) {\r\n                formatNode = splitTextNode(formatNode, from.offset, false /*returnFirstPart*/);\r\n            }\r\n\r\n            formatNodes.push(formatNode);\r\n        }\r\n\r\n        from = nextNode && new Position(nextNode, PositionType.Begin);\r\n    }\r\n\r\n    if (formatNodes.length > 0) {\r\n        if (formatNodes.every(node => node.parentNode == formatNodes[0].parentNode)) {\r\n            let newNode = formatNodes.shift();\r\n            formatNodes.forEach(node => {\r\n                newNode.nodeValue += node.nodeValue;\r\n                node.parentNode.removeChild(node);\r\n            });\r\n            formatNodes = [newNode];\r\n        }\r\n\r\n        formatNodes.forEach(node => {\r\n            // When apply style within style tags like B/I/U/..., we split the tag and apply outside them\r\n            // So that the inner style tag such as U, STRIKE can inherit the style we added\r\n            while (\r\n                getTagOfNode(node) != 'SPAN' &&\r\n                STYLETAGS.indexOf(getTagOfNode(node.parentNode)) >= 0\r\n            ) {\r\n                callStylerWithInnerNode(node, styler);\r\n                node = splitBalancedNodeRange(node);\r\n            }\r\n\r\n            if (getTagOfNode(node) != 'SPAN') {\r\n                callStylerWithInnerNode(node, styler);\r\n                node = wrap(node, 'SPAN');\r\n            }\r\n            styler(<HTMLElement>node);\r\n        });\r\n    }\r\n}\r\n\r\nfunction callStylerWithInnerNode(\r\n    node: Node,\r\n    styler: (node: HTMLElement, isInnerNode?: boolean) => any\r\n) {\r\n    if (node && node.nodeType == NodeType.Element) {\r\n        styler(node as HTMLElement, true /*isInnerNode*/);\r\n    }\r\n}\r\n\r\nfunction splitTextNode(textNode: Node, offset: number, returnFirstPart: boolean) {\r\n    let firstPart = textNode.nodeValue.substr(0, offset);\r\n    let secondPart = textNode.nodeValue.substr(offset);\r\n    let newNode = textNode.ownerDocument.createTextNode(returnFirstPart ? firstPart : secondPart);\r\n    textNode.nodeValue = returnFirstPart ? secondPart : firstPart;\r\n    textNode.parentNode.insertBefore(newNode, returnFirstPart ? textNode : textNode.nextSibling);\r\n    return newNode;\r\n}\r\n","import { getComputedStyle } from './getComputedStyles';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst CRLF = /^[\\r\\n]+$/gm;\r\n\r\n/**\r\n * Skip a node when any of following conditions are true\r\n * - it is neither Element nor Text\r\n * - it is a text node but is empty\r\n * - it is a text node but contains just CRLF (noisy text node that often comes in-between elements)\r\n * - has a display:none\r\n */\r\nexport default function shouldSkipNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Text) {\r\n        return !node.nodeValue || node.textContent == '' || CRLF.test(node.nodeValue);\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        return getComputedStyle(node, 'display') == 'none';\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n","import findClosestElementAncestor from './findClosestElementAncestor';\r\n\r\n/**\r\n * Get computed styles of a node\r\n * @param node The node to get computed styles from\r\n * @param styleNames Names of style to get, can be a single name or an array.\r\n * Default value is font-family, font-size, color, background-color\r\n * @returns An array of the computed styles\r\n */\r\nexport default function getComputedStyles(\r\n    node: Node,\r\n    styleNames: string | string[] = ['font-family', 'font-size', 'color', 'background-color']\r\n): string[] {\r\n    let element = findClosestElementAncestor(node);\r\n    let result: string[] = [];\r\n    styleNames = styleNames instanceof Array ? styleNames : [styleNames];\r\n    if (element) {\r\n        let win = element.ownerDocument.defaultView || window;\r\n        let styles = win.getComputedStyle(element);\r\n\r\n        if (styles) {\r\n            for (let style of styleNames) {\r\n                let value = (styles.getPropertyValue(style) || '').toLowerCase();\r\n                value = style == 'font-size' ? px2Pt(value) : value;\r\n                result.push(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * A shortcut for getComputedStyles() when only one style is to be retrieved\r\n * @param node The node to get style from\r\n * @param styleName The style name\r\n * @returns The style value\r\n */\r\nexport function getComputedStyle(node: Node, styleName: string): string {\r\n    return getComputedStyles(node, styleName)[0] || '';\r\n}\r\n\r\nfunction px2Pt(px: string) {\r\n    if (px && px.indexOf('px') == px.length - 2) {\r\n        // Edge may not handle the floating computing well which causes the calculated value is a little less than actual value\r\n        // So add 0.05 to fix it\r\n        return Math.round(parseFloat(px) * 75 + 0.05) / 100 + 'pt';\r\n    }\r\n    return px;\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport PartialInlineElement from './PartialInlineElement';\r\nimport shouldSkipNode from '../utils/shouldSkipNode';\r\nimport { getLeafSibling } from '../utils/getLeafSibling';\r\nimport { InlineElement, NodePosition, NodeType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get inline element before a position\r\n * This is mostly used when we want to get the inline element before selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement before\r\n */\r\nexport function getInlineElementBefore(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, false /*isAfter*/);\r\n}\r\n\r\n/**\r\n * Get inline element after a position\r\n * This is mostly used when we want to get the inline element after selection/cursor\r\n * There is a possible that the cursor is in middle of an inline element (i.e. mid of a text node)\r\n * in this case, we only want to return what is before cursor (a partial of an inline) to indicate\r\n * that we're in middle.\r\n * @param root Root node of current scope, use for create InlineElement\r\n * @param position The position to get InlineElement after\r\n */\r\nexport function getInlineElementAfter(root: Node, position: NodePosition): InlineElement {\r\n    return getInlineElementBeforeAfter(root, position, true /*isAfter*/);\r\n}\r\n\r\nexport function getInlineElementBeforeAfter(root: Node, position: NodePosition, isAfter: boolean) {\r\n    if (!root || !position || !position.node) {\r\n        return null;\r\n    }\r\n\r\n    position = position.normalize();\r\n    let { node, offset, isAtEnd } = position;\r\n    let isPartial = false;\r\n\r\n    if ((!isAfter && offset == 0 && !isAtEnd) || (isAfter && isAtEnd)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    } else if (\r\n        node.nodeType == NodeType.Text &&\r\n        ((!isAfter && !isAtEnd) || (isAfter && offset > 0))\r\n    ) {\r\n        isPartial = true;\r\n    }\r\n\r\n    if (node && shouldSkipNode(node)) {\r\n        node = getLeafSibling(root, node, isAfter);\r\n    }\r\n\r\n    let inlineElement = getInlineElementAtNode(root, node);\r\n\r\n    if (inlineElement && (isPartial || inlineElement.contains(position))) {\r\n        inlineElement = isAfter\r\n            ? new PartialInlineElement(inlineElement, position, null)\r\n            : new PartialInlineElement(inlineElement, null, position);\r\n    }\r\n\r\n    return inlineElement;\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Gets the cached event data by cache key from event object if there is already one.\r\n * Otherwise, call getter function to create one, and cache it.\r\n * @param event The event object\r\n * @param key Cache key string, need to be unique\r\n * @param getter Getter function to get the object when it is not in cache yet\r\n */\r\nexport default function cacheGetEventData<T>(event: PluginEvent, key: string, getter: () => T): T {\r\n    let result =\r\n        event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)\r\n            ? <T>event.eventDataCache[key]\r\n            : getter();\r\n    if (event) {\r\n        event.eventDataCache = event.eventDataCache || {};\r\n        event.eventDataCache[key] = result;\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    fromHtml,\r\n    isVoidHtmlElement,\r\n    isBlockElement,\r\n    Browser,\r\n    getSelectionPath,\r\n    getRangeFromSelectionPath,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst TEMP_NODE_CLASS = 'ROOSTERJS_TEMP_NODE_FOR_LIST';\r\nconst TEMP_NODE_HTML = \"<img class=\\\"\" + TEMP_NODE_CLASS + \"\\\">\";\r\n\r\ntype ValidProcessListDocumentCommands =\r\n    DocumentCommand.Outdent |\r\n    DocumentCommand.Indent |\r\n    DocumentCommand.InsertOrderedList |\r\n    DocumentCommand.InsertUnorderedList;\r\n\r\n/**\r\n * Browsers don't handle bullet/numbering list well, especially the formats when switching list statue\r\n * So we workaround it by always adding format to list element\r\n */\r\nexport default function processList(editor: Editor, command: ValidProcessListDocumentCommands): Node {\r\n    let clonedNode: Node;\r\n    let relativeSelectionPath;\r\n    if (Browser.isChrome && command == DocumentCommand.Outdent) {\r\n        const parentLINode =  editor.getElementAtCursor('LI');\r\n        if (parentLINode) {\r\n            let currentRange = editor.getSelectionRange();\r\n            if (\r\n                currentRange.collapsed ||\r\n                (\r\n                    editor.getElementAtCursor('LI', currentRange.startContainer) == parentLINode &&\r\n                    editor.getElementAtCursor('LI', currentRange.endContainer) == parentLINode\r\n                )\r\n            ) {\r\n                relativeSelectionPath = getSelectionPath(parentLINode, currentRange);\r\n                // Chrome has some bad behavior when outdenting\r\n                // in order to work around this, we need to take steps to deep clone the current node\r\n                // after the outdent, we'll replace the new LI with the cloned content.\r\n                clonedNode =  parentLINode.cloneNode(true);\r\n            }\r\n        }\r\n\r\n        workaroundForChrome(editor);\r\n    }\r\n\r\n    let existingList = editor.getElementAtCursor('OL,UL');\r\n    editor.getDocument().execCommand(command, false, null);\r\n    let newParentNode: Node;\r\n    editor.queryElements('.' + TEMP_NODE_CLASS, node => {\r\n        newParentNode = node.parentNode;\r\n        editor.deleteNode(node);\r\n    });\r\n    let newList = editor.getElementAtCursor('OL,UL');\r\n    if (newList == existingList) {\r\n        newList = null;\r\n    }\r\n\r\n    if (newList && clonedNode && newParentNode) {\r\n        // if the clonedNode and the newLIParent share the same tag name\r\n        // we can 1:1 swap them\r\n        if ((clonedNode instanceof HTMLElement)) {\r\n            if (newParentNode instanceof HTMLElement && clonedNode.tagName == newParentNode.tagName) {\r\n                newList.replaceChild(clonedNode, newParentNode);\r\n            }\r\n            if (relativeSelectionPath && document.body.contains(clonedNode)) {\r\n                let newRange = getRangeFromSelectionPath(clonedNode, relativeSelectionPath);\r\n                editor.select(newRange);\r\n            }\r\n\r\n        }\r\n        // The alternative case is harder to solve, but we didn't specifically handle this before either.\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\nfunction workaroundForChrome(editor: Editor) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    while (block) {\r\n        let container = block.getStartNode();\r\n\r\n        if (container) {\r\n            // Add a temp <IMG> tag before all other nodes in the block to avoid Chrome remove existing format when toggle list\r\n            const tempNode = fromHtml(TEMP_NODE_HTML, editor.getDocument())[0];\r\n            if (isVoidHtmlElement(container) || !isBlockElement(container)) {\r\n                container.parentNode.insertBefore(tempNode, container);\r\n            } else {\r\n                container.insertBefore(tempNode, container.firstChild);\r\n            }\r\n        }\r\n\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n}\r\n","export { default as HyperLink } from './HyperLink/HyperLink';\r\nexport { default as ContentEdit } from './ContentEdit/ContentEdit';\r\nexport { default as Paste } from './Paste/Paste';\r\nexport {\r\n    default as ContentEditFeatures,\r\n    getDefaultContentEditFeatures,\r\n} from './ContentEdit/ContentEditFeatures';\r\nexport { default as Watermark } from './Watermark/Watermark';\r\nexport { default as TableResize } from './TableResize/TableResize';\r\nexport { default as CustomReplace, Replacement } from './CustomReplace/CustomReplace';\r\n","import collapseNodes from '../utils/collapseNodes';\r\nimport contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isBlockElement from '../utils/isBlockElement';\r\nimport isNodeAfter from '../utils/isNodeAfter';\r\nimport wrap from '../utils/wrap';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\nimport { splitBalancedNodeRange } from '../utils/splitParentNode';\r\nimport createRange from '../selection/createRange';\r\n\r\nconst STRUCTURE_NODE_TAGS = ['TD', 'TH', 'LI', 'BLOCKQUOTE'];\r\n\r\n/**\r\n * This reprents a block that is identified by a start and end node\r\n * This is for cases like &lt;root&gt;Hello&lt;BR&gt;World&lt;/root&gt;\r\n * in that case, Hello&lt;BR&gt; is a block, World is another block\r\n * Such block cannot be represented by a NodeBlockElement since they don't chained up\r\n * to a single parent node, instead they have a start and end\r\n * This start and end must be in same sibling level and have same parent in DOM tree\r\n */\r\nexport default class StartEndBlockElement implements BlockElement {\r\n    constructor(private rootNode: Node, private startNode: Node, private endNode: Node) { }\r\n\r\n    static getBlockContext(node: Node): HTMLElement {\r\n        while (node && !isBlockElement(node)) {\r\n            node = node.parentNode;\r\n        }\r\n        return node as HTMLElement;\r\n    }\r\n\r\n    /**\r\n     * Collapse this element to a single DOM element.\r\n     * If the content nodes are separated in different root nodes, wrap them to a single node\r\n     * If the content nodes are included in root node with other nodes, split root node\r\n     */\r\n    public collapseToSingleElement(): HTMLElement {\r\n        let nodes = collapseNodes(\r\n            StartEndBlockElement.getBlockContext(this.startNode),\r\n            this.startNode,\r\n            this.endNode,\r\n            true /*canSplitParent*/\r\n        );\r\n        let blockContext = StartEndBlockElement.getBlockContext(this.startNode);\r\n        while (\r\n            nodes[0] &&\r\n            nodes[0] != blockContext &&\r\n            nodes[0].parentNode != this.rootNode &&\r\n            STRUCTURE_NODE_TAGS.indexOf(getTagOfNode(nodes[0].parentNode)) < 0\r\n        ) {\r\n            nodes = [splitBalancedNodeRange(nodes)];\r\n        }\r\n        return nodes.length == 1 && isBlockElement(nodes[0])\r\n            ? (nodes[0] as HTMLElement)\r\n            : wrap(nodes);\r\n    }\r\n\r\n    /**\r\n     * Gets the start node\r\n     */\r\n    public getStartNode(): Node {\r\n        return this.startNode;\r\n    }\r\n\r\n    /**\r\n     * Gets the end node\r\n     */\r\n    public getEndNode(): Node {\r\n        return this.endNode;\r\n    }\r\n\r\n    /**\r\n     * Checks equals of two blocks\r\n     */\r\n    public equals(blockElement: BlockElement): boolean {\r\n        return (\r\n            this.startNode == blockElement.getStartNode() &&\r\n            this.endNode == blockElement.getEndNode()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if another block is after this current\r\n     */\r\n    public isAfter(blockElement: BlockElement): boolean {\r\n        return isNodeAfter(this.getStartNode(), blockElement.getEndNode());\r\n    }\r\n\r\n    /**\r\n     * Checks if an Html node is contained within the block\r\n     */\r\n    public contains(node: Node): boolean {\r\n        return (\r\n            contains(this.startNode, node, true /*treatSameNodeAsContain*/) ||\r\n            contains(this.endNode, node, true /*treatSameNodeAsContain*/) ||\r\n            (isNodeAfter(node, this.startNode) && isNodeAfter(this.endNode, node))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the text content of this block element\r\n     */\r\n    public getTextContent(): string {\r\n        return createRange(this.getStartNode(), this.getEndNode()).toString();\r\n    }\r\n}\r\n","/**\r\n * Creates an HTML node array from html\r\n * @param html the html string to create HTML elements from\r\n * @param ownerDocument Owner document of the result HTML elements\r\n * @returns An HTML node array to represent the given html string\r\n */\r\nexport default function fromHtml(html: string, ownerDocument: HTMLDocument): Node[] {\r\n    let element = ownerDocument.createElement('DIV');\r\n    element.innerHTML = html;\r\n\r\n    return [].slice.call(element.childNodes);\r\n}\r\n","import getBlockElementAtNode from './getBlockElementAtNode';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first/last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n * @param isFirst True to get first BlockElement, false to get last BlockElement\r\n */\r\nexport default function getFirstLastBlockElement(rootNode: Node, isFirst: boolean): BlockElement {\r\n    let node = rootNode;\r\n    do {\r\n        node = node && (isFirst ? node.firstChild : node.lastChild);\r\n    } while (node && node.firstChild);\r\n    return node && getBlockElementAtNode(rootNode, node);\r\n}\r\n\r\n/**\r\n * Get the first BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getFirstBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last BlockElement of under the root node.\r\n * If no suitable BlockElement found, returns null\r\n * @param rootNode The root node to get BlockElement from\r\n */\r\nexport function getLastBlockElement(rootNode: Node): BlockElement {\r\n    return getFirstLastBlockElement(rootNode, false /*isFirst*/);\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is an inline element representing an Html image\r\n */\r\nexport default class ImageInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import NodeInlineElement from './NodeInlineElement';\r\nimport { BlockElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * This is inline element presenting an html hyperlink\r\n */\r\nexport default class LinkInlineElement extends NodeInlineElement {\r\n    constructor(containerNode: Node, parentBlock: BlockElement) {\r\n        super(containerNode, parentBlock);\r\n    }\r\n}\r\n","import getInlineElementAtNode from './getInlineElementAtNode';\r\nimport { getFirstLeafNode, getLastLeafNode } from '../utils/getLeafNode';\r\nimport { InlineElement } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get the first inline element inside the given node\r\n */\r\nexport function getFirstInlineElement(rootNode: Node): InlineElement {\r\n    // getFirstLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getFirstLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n\r\n/**\r\n * Get the last inline element inside the given node\r\n */\r\nexport function getLastInlineElement(rootNode: Node): InlineElement {\r\n    // getLastLeafNode can return null for empty container\r\n    // do check null before passing on to get inline from the node\r\n    let node = getLastLeafNode(rootNode);\r\n    return node ? getInlineElementAtNode(rootNode, node) : null;\r\n}\r\n","import shouldSkipNode from './shouldSkipNode';\r\nimport { getLeafSibling } from './getLeafSibling';\r\n\r\n/**\r\n * Get first/last leaf node of the given root node.\r\n * @param rootNode Root node to get leaf node from\r\n * @param isFirst True to get first leaf node, false to get last leaf node\r\n */\r\nfunction getLeafNode(rootNode: Node, isFirst: boolean): Node {\r\n    let getChild = (node: Node): Node => (isFirst ? node.firstChild : node.lastChild);\r\n    let result = getChild(rootNode);\r\n    while (result && getChild(result)) {\r\n        result = getChild(result);\r\n    }\r\n\r\n    if (result && shouldSkipNode(result)) {\r\n        result = getLeafSibling(rootNode, result, isFirst);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Get the first meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getFirstLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, true /*isFirst*/);\r\n}\r\n\r\n/**\r\n * Get the last meaningful leaf node\r\n * @param rootNode Root node to get leaf node from\r\n */\r\nexport function getLastLeafNode(rootNode: Node): Node {\r\n    return getLeafNode(rootNode, false /*isFirst*/);\r\n}\r\n","import { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represents an empty InlineElement.\r\n * This is used for ContentTraverser internally only.\r\n * An empty InlineElement means current position is at the end of a tag so nothing is included inside this element\r\n */\r\nexport default class EmptyInlineElement implements InlineElement {\r\n    constructor(private position: NodePosition, private parentBlock: BlockElement) {}\r\n\r\n    /**\r\n     * Get the text content of this inline element\r\n     */\r\n    getTextContent(): string {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Get the container node of this inline element\r\n     */\r\n    getContainerNode(): Node {\r\n        return this.position.node;\r\n    }\r\n\r\n    /**\r\n     * Get the parent block element of this inline element\r\n     */\r\n    getParentBlock(): BlockElement {\r\n        return this.parentBlock;\r\n    }\r\n\r\n    /**\r\n     * Get the start position of this inline element\r\n     */\r\n    getStartPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Get the end position of this inline element\r\n     */\r\n    getEndPosition(): NodePosition {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given inline element is after this inline element\r\n     */\r\n    isAfter(inlineElement: InlineElement): boolean {\r\n        return inlineElement && this.position.isAfter(inlineElement.getEndPosition());\r\n    }\r\n\r\n    /**\r\n     * Checks if this inline element is a textual inline element\r\n     */\r\n    isTextualInlineElement(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the given editor position is contained in this inline element\r\n     */\r\n    contains(position: NodePosition): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Apply inline style to a region of an inline element.\r\n     */\r\n    applyStyle(styler: (element: HTMLElement) => any): void {}\r\n}\r\n","import { BrowserInfo } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get current browser information from user agent string\r\n * @param userAgent The userAgent string of a browser\r\n * @param appVersion The appVersion string of a browser\r\n * @returns The BrowserInfo object calculated from the given userAgent and appVersion\r\n */\r\nexport function getBrowserInfo(userAgent: string, appVersion: string): BrowserInfo {\r\n    // checks whether the browser is running in IE\r\n    // IE11 will use rv in UA instead of MSIE. Unfortunately Firefox also uses this. We should also look for \"Trident\" to confirm this.\r\n    // There have been cases where companies using older version of IE and custom UserAgents have broken this logic (e.g. IE 10 and KellyServices)\r\n    // therefore we should check that the Trident/rv combo is not just from an older IE browser\r\n    let isIE11OrGreater = userAgent.indexOf('rv:') != -1 && userAgent.indexOf('Trident') != -1;\r\n    let isIE = userAgent.indexOf('MSIE') != -1 || isIE11OrGreater;\r\n\r\n    // IE11+ may also have 'Chrome', 'Firefox' and 'Safari' in user agent. But it will have 'trident' as well\r\n    let isChrome = false;\r\n    let isFirefox = false;\r\n    let isSafari = false;\r\n    let isEdge = false;\r\n    let isWebKit = userAgent.indexOf('WebKit') != -1;\r\n\r\n    if (!isIE) {\r\n        isChrome = userAgent.indexOf('Chrome') != -1;\r\n        isFirefox = userAgent.indexOf('Firefox') != -1;\r\n        if (userAgent.indexOf('Safari') != -1) {\r\n            // Android and Chrome have Safari in the user string\r\n            isSafari = userAgent.indexOf('Chrome') == -1 && userAgent.indexOf('Android') == -1;\r\n        }\r\n\r\n        // Sample Edge UA: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10121\r\n        isEdge = userAgent.indexOf('Edge') != -1;\r\n\r\n        // When it is edge, it should not be chrome or firefox. and it is also not webkit\r\n        if (isEdge) {\r\n            isWebKit = isChrome = isFirefox = false;\r\n        }\r\n    }\r\n\r\n    let isMac = appVersion.indexOf('Mac') != -1;\r\n    let isWin = appVersion.indexOf('Win') != -1 || appVersion.indexOf('NT') != -1;\r\n\r\n    return {\r\n        isMac,\r\n        isWin,\r\n        isWebKit,\r\n        isIE,\r\n        isIE11OrGreater,\r\n        isSafari,\r\n        isChrome,\r\n        isFirefox,\r\n        isEdge,\r\n        isIEOrEdge: isIE || isEdge,\r\n    };\r\n}\r\n\r\n/**\r\n * Browser object contains browser and operating system informations of current environment\r\n */\r\nexport const Browser = window\r\n    ? getBrowserInfo(window.navigator.userAgent, window.navigator.appVersion)\r\n    : {};\r\n","import getComputedStyles from './getComputedStyles';\r\nimport getTagOfNode from './getTagOfNode';\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElement,\r\n    newTag: K\r\n): HTMLElementTagNameMap[K];\r\n\r\n/**\r\n * Change tag of an HTML Element to a new one, and replace it from DOM tree\r\n * @param element The element to change tag\r\n * @param newTag New tag to change to\r\n * @returns The new element with new tag\r\n */\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement;\r\n\r\nexport default function changeElementTag(element: HTMLElement, newTag: string): HTMLElement {\r\n    if (!element || !newTag) {\r\n        return null;\r\n    }\r\n\r\n    let newElement = element.ownerDocument.createElement(newTag);\r\n\r\n    for (let i = 0; i < element.attributes.length; i++) {\r\n        let attr = element.attributes[i];\r\n        newElement.setAttribute(attr.name, attr.value);\r\n    }\r\n\r\n    while (element.firstChild) {\r\n        newElement.appendChild(element.firstChild);\r\n    }\r\n\r\n    if (getTagOfNode(element) == 'P' || getTagOfNode(newElement) == 'P') {\r\n        [newElement.style.marginTop, newElement.style.marginBottom] = getComputedStyles(element, [\r\n            'margin-top',\r\n            'margin-bottom',\r\n        ]);\r\n    }\r\n\r\n    if (element.parentNode) {\r\n        element.parentNode.replaceChild(newElement, element);\r\n    }\r\n\r\n    return newElement;\r\n}\r\n","import getTagOfNode from './getTagOfNode';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\nconst VISIBLE_ELEMENT_TAGS = ['IMG'];\r\nconst VISIBLE_CHILD_ELEMENT_SELECTOR = ['TABLE', 'IMG', 'LI'].join(',');\r\nconst ZERO_WIDTH_SPACE = /\\u200b/g;\r\n\r\n/**\r\n * Check if a given node has no visible content\r\n * @param node The node to check\r\n * @param trimContent Whether trim the text content so that spaces will be treated as empty.\r\n * Default value is false\r\n * @returns True if there isn't any visible element inside node, otherwise false\r\n */\r\nexport default function isNodeEmpty(node: Node, trimContent?: boolean) {\r\n    if (!node) {\r\n        return false;\r\n    } else if (node.nodeType == NodeType.Text) {\r\n        return trim(node.nodeValue, trimContent) == '';\r\n    } else if (node.nodeType == NodeType.Element) {\r\n        let element = node as Element;\r\n        let textContent = trim(element.textContent, trimContent);\r\n        if (\r\n            textContent != '' ||\r\n            VISIBLE_ELEMENT_TAGS.indexOf(getTagOfNode(element)) >= 0 ||\r\n            element.querySelectorAll(VISIBLE_CHILD_ELEMENT_SELECTOR)[0]\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction trim(s: string, trim: boolean) {\r\n    s = s.replace(ZERO_WIDTH_SPACE, '');\r\n    return trim ? s.trim() : s;\r\n}\r\n","import contains from '../utils/contains';\r\nimport getTagOfNode from '../utils/getTagOfNode';\r\nimport isNodeEmpty from '../utils/isNodeEmpty';\r\nimport { NodePosition } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Check if this position is at beginning of the given node.\r\n * This will return true if all nodes between the beginning of target node and the position are empty.\r\n * @param position The position to check\r\n * @param targetNode The node to check\r\n * @returns True if position is at beginning of the node, otherwise false\r\n */\r\nexport default function isPositionAtBeginningOf(position: NodePosition, targetNode: Node) {\r\n    if (position) {\r\n        let { node, offset } = position.normalize();\r\n        if (offset == 0) {\r\n            while (contains(targetNode, node) && areAllPrevousNodesEmpty(node)) {\r\n                node = node.parentNode;\r\n            }\r\n\r\n            return node == targetNode;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction areAllPrevousNodesEmpty(node: Node): boolean {\r\n    while (node.previousSibling) {\r\n        node = node.previousSibling;\r\n        if (getTagOfNode(node) == 'BR' || !isNodeEmpty(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","/**\r\n * Removes the node and keep all children in place, return the parentNode where the children are attached\r\n * @param node the node to remove\r\n */\r\nexport default function unwrap(node: Node): Node {\r\n    // Unwrap requires a parentNode\r\n    let parentNode = node ? node.parentNode : null;\r\n    if (!parentNode) {\r\n        return null;\r\n    }\r\n\r\n    while (node.firstChild) {\r\n        parentNode.insertBefore(node.firstChild, node);\r\n    }\r\n\r\n    parentNode.removeChild(node);\r\n    return parentNode;\r\n}\r\n","import { TableFormat, TableOperation } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Represent a virtual cell of a virtual table\r\n */\r\nexport interface VCell {\r\n    /**\r\n     * The table cell object. The value will be null if this is an expanded virtual cell\r\n     */\r\n    td?: HTMLTableCellElement;\r\n\r\n    /**\r\n     * Whether this cell is spanned from left\r\n     */\r\n    spanLeft?: boolean;\r\n\r\n    /**\r\n     * Whether this cell is spanned from above\r\n     */\r\n    spanAbove?: boolean;\r\n}\r\n\r\n/**\r\n * A virtual table class, represent an HTML table, by expand all merged cells to each separated cells\r\n */\r\nexport default class VTable {\r\n    /**\r\n     * The HTML table object\r\n     */\r\n    table: HTMLTableElement;\r\n\r\n    /**\r\n     * Virtual cells\r\n     */\r\n    cells: VCell[][];\r\n\r\n    /**\r\n     * Current row index\r\n     */\r\n    row: number;\r\n\r\n    /**\r\n     * Current column index\r\n     */\r\n    col: number;\r\n\r\n    private trs: HTMLTableRowElement[] = [];\r\n\r\n    /**\r\n     * Create a new instance of VTable object using HTML TABLE or TD node\r\n     * @param node The HTML Table or TD node\r\n     */\r\n    constructor(node: HTMLTableElement | HTMLTableCellElement) {\r\n        this.table = node instanceof HTMLTableElement ? node : getTableFromTd(node);\r\n        if (this.table) {\r\n            let currentTd = node instanceof HTMLTableElement ? null : node;\r\n            let trs = <HTMLTableRowElement[]>[].slice.call(this.table.rows);\r\n            this.cells = trs.map(row => []);\r\n            trs.forEach((tr, rowIndex) => {\r\n                this.trs[rowIndex % 2] = tr;\r\n                for (let sourceCol = 0, targetCol = 0; sourceCol < tr.cells.length; sourceCol++) {\r\n                    // Skip the cells which already initialized\r\n                    for (; this.cells[rowIndex][targetCol]; targetCol++) {}\r\n\r\n                    let td = tr.cells[sourceCol];\r\n                    if (td == currentTd) {\r\n                        this.col = targetCol;\r\n                        this.row = rowIndex;\r\n                    }\r\n\r\n                    for (let colSpan = 0; colSpan < td.colSpan; colSpan++, targetCol++) {\r\n                        for (let rowSpan = 0; rowSpan < td.rowSpan; rowSpan++) {\r\n                            this.cells[rowIndex + rowSpan][targetCol] = {\r\n                                td: colSpan + rowSpan == 0 ? td : null,\r\n                                spanLeft: colSpan > 0,\r\n                                spanAbove: rowSpan > 0,\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Write the virtual table back to DOM tree to represent the change of VTable\r\n     */\r\n    writeBack() {\r\n        if (this.cells) {\r\n            moveChildren(this.table);\r\n            this.cells.forEach((row, r) => {\r\n                let tr = cloneNode(this.trs[r % 2] || this.trs[0]);\r\n                this.table.appendChild(tr);\r\n                row.forEach((cell, c) => {\r\n                    if (cell.td) {\r\n                        this.recalcSpans(r, c);\r\n                        tr.appendChild(cell.td);\r\n                    }\r\n                });\r\n            });\r\n        } else if (this.table) {\r\n            this.table.parentNode.removeChild(this.table);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the given table format to this virtual table\r\n     * @param format Table format to apply\r\n     */\r\n    applyFormat(format: Partial<TableFormat>) {\r\n        if (!format || !this.table) {\r\n            return;\r\n        }\r\n        this.table.style.borderCollapse = 'collapse';\r\n        this.trs[0].style.backgroundColor = format.bgColorOdd || 'transparent';\r\n        if (this.trs[1]) {\r\n            this.trs[1].style.backgroundColor = format.bgColorEven || 'transparent';\r\n        }\r\n        this.cells.forEach(row =>\r\n            row\r\n                .filter(cell => cell.td)\r\n                .forEach(cell => {\r\n                    cell.td.style.borderTop = getBorderStyle(format.topBorderColor);\r\n                    cell.td.style.borderBottom = getBorderStyle(format.bottomBorderColor);\r\n                    cell.td.style.borderLeft = getBorderStyle(format.verticalBorderColor);\r\n                    cell.td.style.borderRight = getBorderStyle(format.verticalBorderColor);\r\n                })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Edit table with given operation.\r\n     * @param operation Table operation\r\n     */\r\n    edit(operation: TableOperation) {\r\n        if (!this.table) {\r\n            return;\r\n        }\r\n\r\n        let currentRow = this.cells[this.row];\r\n        let currentCell = currentRow[this.col];\r\n        switch (operation) {\r\n            case TableOperation.InsertAbove:\r\n                this.cells.splice(this.row, 0, currentRow.map(cloneCell));\r\n                break;\r\n            case TableOperation.InsertBelow:\r\n                let newRow = this.row + this.countSpanAbove(this.row, this.col);\r\n                this.cells.splice(\r\n                    newRow,\r\n                    0,\r\n                    this.cells[newRow - 1].map((cell, colIndex) => {\r\n                        let nextCell = this.getCell(newRow, colIndex);\r\n                        if (nextCell.spanAbove) {\r\n                            return cloneCell(nextCell);\r\n                        } else if (cell.spanLeft) {\r\n                            let newCell = cloneCell(cell);\r\n                            newCell.spanAbove = false;\r\n                            return newCell;\r\n                        } else {\r\n                            return {\r\n                                td: cloneNode(this.getTd(this.row, colIndex)),\r\n                            };\r\n                        }\r\n                    })\r\n                );\r\n                break;\r\n\r\n            case TableOperation.InsertLeft:\r\n                this.forEachCellOfCurrentColumn((cell, row) => {\r\n                    row.splice(this.col, 0, cloneCell(cell));\r\n                });\r\n                break;\r\n            case TableOperation.InsertRight:\r\n                let newCol = this.col + this.countSpanLeft(this.row, this.col);\r\n                this.forEachCellOfColumn(newCol - 1, (cell, row, i) => {\r\n                    let nextCell = this.getCell(i, newCol);\r\n                    let newCell: VCell;\r\n                    if (nextCell.spanLeft) {\r\n                        newCell = cloneCell(nextCell);\r\n                    } else if (cell.spanAbove) {\r\n                        newCell = cloneCell(cell);\r\n                        newCell.spanLeft = false;\r\n                    } else {\r\n                        newCell = {\r\n                            td: cloneNode(this.getTd(i, this.col)),\r\n                        };\r\n                    }\r\n\r\n                    row.splice(newCol, 0, newCell);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.DeleteRow:\r\n                this.forEachCellOfCurrentRow((cell, i) => {\r\n                    let nextCell = this.getCell(this.row + 1, i);\r\n                    if (cell.td && cell.td.rowSpan > 1 && nextCell.spanAbove) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                });\r\n                this.cells.splice(this.row, 1);\r\n                break;\r\n\r\n            case TableOperation.DeleteColumn:\r\n                this.forEachCellOfCurrentColumn((cell, row, i) => {\r\n                    let nextCell = this.getCell(i, this.col + 1);\r\n                    if (cell.td && cell.td.colSpan > 1 && nextCell.spanLeft) {\r\n                        nextCell.td = cell.td;\r\n                    }\r\n                    row.splice(this.col, 1);\r\n                });\r\n                break;\r\n\r\n            case TableOperation.MergeAbove:\r\n            case TableOperation.MergeBelow:\r\n                let rowStep = operation == TableOperation.MergeAbove ? -1 : 1;\r\n                for (\r\n                    let rowIndex = this.row + rowStep;\r\n                    rowIndex >= 0 && rowIndex < this.cells.length;\r\n                    rowIndex += rowStep\r\n                ) {\r\n                    let cell = this.getCell(rowIndex, this.col);\r\n                    if (cell.td && !cell.spanAbove) {\r\n                        let aboveCell = rowIndex < this.row ? cell : currentCell;\r\n                        let belowCell = rowIndex < this.row ? currentCell : cell;\r\n                        if (aboveCell.td.colSpan == belowCell.td.colSpan) {\r\n                            moveChildren(belowCell.td, aboveCell.td);\r\n                            belowCell.td = null;\r\n                            belowCell.spanAbove = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.MergeLeft:\r\n            case TableOperation.MergeRight:\r\n                let colStep = operation == TableOperation.MergeLeft ? -1 : 1;\r\n                for (\r\n                    let colIndex = this.col + colStep;\r\n                    colIndex >= 0 && colIndex < this.cells[this.row].length;\r\n                    colIndex += colStep\r\n                ) {\r\n                    let cell = this.getCell(this.row, colIndex);\r\n                    if (cell.td && !cell.spanLeft) {\r\n                        let leftCell = colIndex < this.col ? cell : currentCell;\r\n                        let rightCell = colIndex < this.col ? currentCell : cell;\r\n                        if (leftCell.td.rowSpan == rightCell.td.rowSpan) {\r\n                            moveChildren(rightCell.td, leftCell.td);\r\n                            rightCell.td = null;\r\n                            rightCell.spanLeft = true;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case TableOperation.DeleteTable:\r\n                this.cells = null;\r\n                break;\r\n\r\n            case TableOperation.SplitVertically:\r\n                if (currentCell.td.rowSpan > 1) {\r\n                    this.getCell(this.row + 1, this.col).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    let splitRow = currentRow.map(cell => {\r\n                        return {\r\n                            td: cell == currentCell ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell != currentCell,\r\n                            spanLeft: cell.spanLeft,\r\n                        };\r\n                    });\r\n                    this.cells.splice(this.row + 1, 0, splitRow);\r\n                }\r\n                break;\r\n\r\n            case TableOperation.SplitHorizontally:\r\n                if (currentCell.td.colSpan > 1) {\r\n                    this.getCell(this.row, this.col + 1).td = cloneNode(currentCell.td);\r\n                } else {\r\n                    this.forEachCellOfCurrentColumn((cell, row) => {\r\n                        row.splice(this.col + 1, 0, {\r\n                            td: row == currentRow ? cloneNode(cell.td) : null,\r\n                            spanAbove: cell.spanAbove,\r\n                            spanLeft: row != currentRow,\r\n                        });\r\n                    });\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current column and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentColumn(callback: (cell: VCell, row: VCell[], i: number) => any) {\r\n        this.forEachCellOfColumn(this.col, callback);\r\n    }\r\n\r\n    /**\r\n     * Loop each cell of current row and invoke a callback function\r\n     * @param callback The callback function to invoke\r\n     */\r\n    forEachCellOfCurrentRow(callback: (cell: VCell, i: number) => any) {\r\n        this.forEachCellOfRow(this.row, callback);\r\n    }\r\n\r\n    /**\r\n     * Get a table cell using its row and column index. This function will always return an object\r\n     * even if the given indexes don't exist in table.\r\n     * @param row The row index\r\n     * @param col The column index\r\n     */\r\n    getCell(row: number, col: number): VCell {\r\n        return (this.cells && this.cells[row] && this.cells[row][col]) || {};\r\n    }\r\n\r\n    /**\r\n     * Get current HTML table cell object. If the current table cell is a virtual expanded cell, return its root cell\r\n     */\r\n    getCurrentTd(): HTMLTableCellElement {\r\n        return this.getTd(this.row, this.col);\r\n    }\r\n\r\n    private getTd(row: number, col: number) {\r\n        if (this.cells) {\r\n            row = Math.min(this.cells.length - 1, row);\r\n            col = Math.min(this.cells[row].length - 1, col);\r\n            while (row >= 0 && col >= 0) {\r\n                let cell = this.getCell(row, col);\r\n                if (cell.td) {\r\n                    return cell.td;\r\n                } else if (cell.spanLeft) {\r\n                    col--;\r\n                } else if (cell.spanAbove) {\r\n                    row--;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private forEachCellOfColumn(\r\n        col: number,\r\n        callback: (cell: VCell, row: VCell[], i: number) => any\r\n    ) {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            callback(this.getCell(i, col), this.cells[i], i);\r\n        }\r\n    }\r\n\r\n    private forEachCellOfRow(row: number, callback: (cell: VCell, i: number) => any) {\r\n        for (let i = 0; i < this.cells[row].length; i++) {\r\n            callback(this.getCell(row, i), i);\r\n        }\r\n    }\r\n\r\n    private recalcSpans(row: number, col: number) {\r\n        let td = this.getCell(row, col).td;\r\n        if (td) {\r\n            td.colSpan = this.countSpanLeft(row, col);\r\n            td.rowSpan = this.countSpanAbove(row, col);\r\n            if (td.colSpan == 1) {\r\n                td.removeAttribute('colSpan');\r\n            }\r\n            if (td.rowSpan == 1) {\r\n                td.removeAttribute('rowSpan');\r\n            }\r\n        }\r\n    }\r\n\r\n    private countSpanLeft(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = col + 1; i < this.cells[row].length; i++) {\r\n            let cell = this.getCell(row, i);\r\n            if (cell.td || !cell.spanLeft) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private countSpanAbove(row: number, col: number) {\r\n        let result = 1;\r\n        for (let i = row + 1; i < this.cells.length; i++) {\r\n            let cell = this.getCell(i, col);\r\n            if (cell.td || !cell.spanAbove) {\r\n                break;\r\n            }\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction getTableFromTd(td: HTMLTableCellElement) {\r\n    let result = <HTMLElement>td;\r\n    for (; result && result.tagName != 'TABLE'; result = result.parentElement) {}\r\n    return <HTMLTableElement>result;\r\n}\r\n\r\nfunction getBorderStyle(style: string): string {\r\n    return 'solid 1px ' + (style || 'transparent');\r\n}\r\n\r\n/**\r\n * Clone a table cell\r\n * @param cell The cell to clone\r\n */\r\nfunction cloneCell(cell: VCell): VCell {\r\n    return {\r\n        td: cloneNode(cell.td),\r\n        spanAbove: cell.spanAbove,\r\n        spanLeft: cell.spanLeft,\r\n    };\r\n}\r\n\r\n/**\r\n * Clone a node without its children.\r\n * @param node The node to clone\r\n */\r\nfunction cloneNode<T extends Node>(node: T): T {\r\n    let newNode = node ? <T>node.cloneNode(false /*deep*/) : null;\r\n    if (newNode && newNode instanceof HTMLTableCellElement) {\r\n        newNode.removeAttribute('id');\r\n        if (!newNode.firstChild) {\r\n            newNode.appendChild(node.ownerDocument.createElement('br'));\r\n        }\r\n    }\r\n    return newNode;\r\n}\r\n\r\n/**\r\n * Move all children from one node to another\r\n * @param fromNode The source node to move children from\r\n * @param toNode Target node. If not passed, children nodes of source node will be removed\r\n */\r\nfunction moveChildren(fromNode: Node, toNode?: Node) {\r\n    while (fromNode.firstChild) {\r\n        if (toNode) {\r\n            toNode.appendChild(fromNode.firstChild);\r\n        } else {\r\n            fromNode.removeChild(fromNode.firstChild);\r\n        }\r\n    }\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Feature set for ContentEdit plugin.\r\n * Call getDefaultContentEditFeatures() to get default feature set.\r\n */\r\nexport default interface ContentEditFeatures {\r\n    /**\r\n     * When press Tab in a list, indent current list item\r\n     * @default true\r\n     */\r\n    indentWhenTab: boolean;\r\n\r\n    /**\r\n     * When press Shift+Tab in a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenShiftTab: boolean;\r\n\r\n    /**\r\n     * When press BaskSpace on empty line which is the first item of a list, outdent current list item\r\n     * @default true\r\n     */\r\n    outdentWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a list, outdent current list item\r\n     * @default true for IE, false for other browsers since they have already had the behavior\r\n     */\r\n    outdentWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press Backspace on first char in a list, make current item a new line of previous list item\r\n     * @default false\r\n     */\r\n    mergeInNewLineWhenBackspaceOnFirstChar: boolean;\r\n\r\n    /**\r\n     * When press BAckspace on empty line which is the first line of a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenBackspaceOnEmptyFirstLine: boolean;\r\n\r\n    /**\r\n     * When press Enter on empty line in a blockquote, unquote current line\r\n     * @default true\r\n     */\r\n    unquoteWhenEnterOnEmptyLine: boolean;\r\n\r\n    /**\r\n     * When press space after an asterik or number in an empty line, toggle bullet/numbering\r\n     * @default true\r\n     */\r\n    autoBullet: boolean;\r\n\r\n    /**\r\n     * When press TAB or SHIFT+TAB key in table cell, jump to next/previous table cell\r\n     * @default true\r\n     */\r\n    tabInTable: boolean;\r\n\r\n    /**\r\n     * When press Up or Down in table cell, jump to the table cell above/below\r\n     * @default true for Chrome and safari, false for other browsers since they arleady have correct behavior\r\n     */\r\n    upDownInTable: boolean;\r\n\r\n    /**\r\n     * When press Enter at the beginning of first structured element (table, list) and there isn't line before the position\r\n     * we create a new line before so that user got a chance to enter content before the table or list\r\n     * @default false\r\n     */\r\n    insertLineBeforeStructuredNodeFeature: boolean;\r\n\r\n    /**\r\n     * When press Space or Enter after a hyperlink-like string, convert the string to a hyperlink\r\n     * @default true\r\n     */\r\n    autoLink: boolean;\r\n\r\n    /**\r\n     * Respond to default common keyboard short, i.e. Ctrl+B, Ctrl+I, Ctrl+U, Ctrl+Z, Ctrl+Y\r\n     * @default true\r\n     */\r\n    defaultShortcut: boolean;\r\n\r\n    /**\r\n     * Unlink when backspace right after a hyperlink\r\n     * @default false\r\n     */\r\n    unlinkWhenBackspaceAfterLink: boolean;\r\n\r\n    /**\r\n     * When generate ordered list, the list bullet will variare according its nesting level, in a loop of '1', 'a', 'i'\r\n     * @default false\r\n     */\r\n    smartOrderedList: boolean;\r\n\r\n    /**\r\n     * A style list for smart ordered list. This value is only effective when smartOrderedList is true\r\n     * @default ['lower-alpha', 'lower-roman', 'decimal']\r\n     */\r\n    smartOrderedListStyles: string[];\r\n}\r\n\r\n/**\r\n * Get default feature set of ContentEdit plugin\r\n */\r\nexport function getDefaultContentEditFeatures(): ContentEditFeatures {\r\n    return {\r\n        autoLink: true,\r\n        indentWhenTab: true,\r\n        outdentWhenShiftTab: true,\r\n        outdentWhenBackspaceOnEmptyFirstLine: true,\r\n        outdentWhenEnterOnEmptyLine: Browser.isIE,\r\n        mergeInNewLineWhenBackspaceOnFirstChar: false,\r\n        unquoteWhenBackspaceOnEmptyFirstLine: true,\r\n        unquoteWhenEnterOnEmptyLine: true,\r\n        autoBullet: true,\r\n        tabInTable: true,\r\n        upDownInTable: Browser.isChrome || Browser.isSafari,\r\n        insertLineBeforeStructuredNodeFeature: false,\r\n        defaultShortcut: true,\r\n        unlinkWhenBackspaceAfterLink: false,\r\n        smartOrderedList: false,\r\n        smartOrderedListStyles: ['lower-alpha', 'lower-roman', 'decimal'],\r\n    };\r\n}\r\n","import { BlockElement, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, StartEndBlockElement } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Collapse all selected blocks, return single HTML elements for each block\r\n * @param editor The editor instance\r\n * @param forEachCallback A callback function to invoke for each of the collapsed element\r\n */\r\nexport default function collapseSelectedBlocked(\r\n    editor: Editor,\r\n    forEachCallback: (element: HTMLElement) => any\r\n) {\r\n    let traverser = editor.getSelectionTraverser();\r\n    let block = traverser && traverser.currentBlockElement;\r\n    let blocks: BlockElement[] = [];\r\n    while (block) {\r\n        if (!isEmptyBlockUnderTR(block)) {\r\n            blocks.push(block);\r\n        }\r\n        block = traverser.getNextBlockElement();\r\n    }\r\n\r\n    blocks.forEach(block => {\r\n        let element = block.collapseToSingleElement();\r\n        forEachCallback(element);\r\n    });\r\n}\r\n\r\nfunction isEmptyBlockUnderTR(block: BlockElement): boolean {\r\n    let startNode = block.getStartNode();\r\n\r\n    return (\r\n        block instanceof StartEndBlockElement &&\r\n        startNode == block.getEndNode() &&\r\n        startNode.nodeType == NodeType.Text &&\r\n        ['TR', 'TABLE'].indexOf(getTagOfNode(startNode.parentNode)) >= 0\r\n    );\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { ModeIndependentColor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Set background color at current selection\r\n * @param editor The editor instance\r\n * @param color One of two options:\r\n * The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n * Alternatively, you can pass a @typedef ModeIndepenentColor. If in light mode, the lightModeColor property will be used.\r\n * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.\r\n **/\r\nexport default function setBackgroundColor(editor: Editor, color: string | ModeIndependentColor) {\r\n    if (typeof color === 'string') {\r\n        const trimmedColor = color.trim();\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.backgroundColor = isInnerNode ? '' : trimmedColor;\r\n        });\r\n    } else {\r\n        const darkMode = editor.isDarkMode();\r\n        const appliedColor = darkMode ? color.darkModeColor : color.lightModeColor;\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.backgroundColor = isInnerNode ? '' : appliedColor;\r\n            if (darkMode) {\r\n                element.dataset.ogsb = color.lightModeColor;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set font name at selection\r\n * @param editor The editor instance\r\n * @param fontName The fontName string, should be a valid CSS font-family style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontName(editor: Editor, fontName: string) {\r\n    fontName = fontName.trim();\r\n    // The browser provided execCommand creates a HTML <font> tag with face attribute. <font> is not HTML5 standard\r\n    // (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-family style\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.fontFamily = isInnerNode ? '' : fontName;\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Set font size at selection\r\n * @param editor The editor instance\r\n * @param fontSize The fontSize string, should be a valid CSS font-size style.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n */\r\nexport default function setFontSize(editor: Editor, fontSize: string) {\r\n    fontSize = fontSize.trim();\r\n    // The browser provided execCommand only accepts 1-7 point value. In addition, it uses HTML <font> tag with size attribute.\r\n    // <font> is not HTML5 standard (http://www.w3schools.com/tags/tag_font.asp). Use applyInlineStyle which gives flexibility on applying inline style\r\n    // for here, we use CSS font-size style\r\n    applyInlineStyle(editor, (element, isInnerNode) => {\r\n        element.style.fontSize = isInnerNode ? '' : fontSize;\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { ModeIndependentColor } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Set text color at selection\r\n * @param editor The editor instance\r\n * @param color One of two options:\r\n * The color string, can be any of the predefined color names (e.g, 'red')\r\n * or hexadecimal color string (e.g, '#FF0000') or rgb value (e.g, 'rgb(255, 0, 0)') supported by browser.\r\n * Currently there's no validation to the string, if the passed string is invalid, it won't take affect\r\n * Alternatively, you can pass a @typedef ModeIndepenentColor. If in light mode, the lightModeColor property will be used.\r\n * If in dark mode, the darkModeColor will be used and the lightModeColor will be used when converting back to light mode.\r\n */\r\nexport default function setTextColor(editor: Editor, color: string | ModeIndependentColor) {\r\n    if (typeof color === 'string') {\r\n        const trimmedColor = color.trim();\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.color = isInnerNode ? '' : trimmedColor;\r\n        });\r\n    } else {\r\n        const darkMode = editor.isDarkMode();\r\n        const appliedColor = darkMode ? color.darkModeColor : color.lightModeColor;\r\n        applyInlineStyle(editor, (element, isInnerNode) => {\r\n            element.style.color = isInnerNode ? '' : appliedColor;\r\n            if (darkMode) {\r\n                element.dataset.ogsc = color.lightModeColor;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bold at selection\r\n * If selection is collapsed, it will only affect the following input after caret\r\n * If selection contains only bold text, the bold style will be removed\r\n * If selection contains only normal text, bold style will be added to the whole selected text\r\n * If selection contains both bold and normal text, bold stle will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBold(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Bold);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle italic at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only italic text, the italic style will be removed\r\n * If selection contains only normal text, italic style will be added to the whole selected text\r\n * If selection contains both italic and normal text, italic stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleItalic(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Italic);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle underline at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only underlined text, the underline style will be removed\r\n * If selection contains only normal text, underline style will be added to the whole selected text\r\n * If selection contains both underlined and normal text, the underline style will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleUnderline(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Underline);\r\n}\r\n","import getColorNormalizedContent from '../darkMode/getColorNormalizedContent';\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\n\n/**\n * Copy plugin, hijacks copy events to normalize the content to the clipboard.\n */\nexport default class CopyPlugin implements EditorPlugin {\n    private editor: Editor;\n    private copyDisposer: () => void;\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'Copy';\n    }\n\n    /**\n     * Initialize this plugin. This should only be called from Editor\n     * @param editor Editor instance\n     */\n    public initialize(editor: Editor) {\n        this.editor = editor;\n        this.copyDisposer = editor.addDomEventHandler('copy', this.onCopy);\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    public dispose() {\n        this.copyDisposer();\n        this.copyDisposer = null;\n        this.editor = null;\n    }\n\n    private onCopy = (event: Event) => {\n        // if it's dark mode...\n        if (this.editor && this.editor.isDarkMode()) {\n            // get whatever the current selection range is\n            const selectionRange = this.editor.getSelectionRange();\n            if (selectionRange && !selectionRange.collapsed) {\n                const clipboardEvent = (event as ClipboardEvent);\n                const copyFragment = this.editor.getSelectionRange().cloneContents();\n\n                // revert just this selected range to light mode colors\n                const normalizedContent = getColorNormalizedContent(copyFragment);\n                const containerDiv = this.editor.getDocument().createElement('div');\n\n                // Leverage script execution policy on CEDs to try and prevent XSS\n                containerDiv.setAttribute('contenteditable', 'true');\n                containerDiv.innerHTML = normalizedContent;\n\n                // put it on the clipboard\n                clipboardEvent.clipboardData.setData('text/html', normalizedContent);\n                clipboardEvent.clipboardData.setData('text/plain', containerDiv.innerText)\n\n                event.preventDefault();\n            }\n        }\n    }\n}\n","export default function getColorNormalizedContent(content: string | DocumentFragment): string {\n    let el = document.createElement('div');\n    // Leverage script execution policy on CEDs to try and prevent XSS\n    el.setAttribute('contenteditable', 'true');\n    if (content instanceof DocumentFragment) {\n        el.appendChild(content);\n    } else {\n        el.innerHTML = content;\n    }\n    const allChildElements = el.getElementsByTagName('*') as HTMLCollectionOf<HTMLElement>;\n    [].forEach.call(allChildElements, (element: HTMLElement) => {\n        if (element.dataset) {\n            // Reset color styles based on the content of the ogsc/ogsb data element.\n            // If those data properties are empty or do not exist, set them anyway to clear the content.\n            element.style.color = isDataAttributeSettable(element.dataset.ogsc)\n                ? element.dataset.ogsc\n                : '';\n            element.style.backgroundColor = isDataAttributeSettable(element.dataset.ogsb)\n                ? element.dataset.ogsb\n                : '';\n\n            // Some elements might have set attribute colors. We need to reset these as well.\n            if (isDataAttributeSettable(element.dataset.ogac)) {\n                element.setAttribute('color', element.dataset.ogac);\n            } else {\n                element.removeAttribute('color');\n            }\n\n            if (isDataAttributeSettable(element.dataset.ogab)) {\n                element.setAttribute('bgcolor', element.dataset.ogab);\n            } else {\n                element.removeAttribute('bgcolor');\n            }\n\n            // Clean up any remaining data attributes.\n            if (element.dataset.ogsc) {\n                delete element.dataset.ogsc;\n            }\n\n            if (element.dataset.ogsb) {\n                delete element.dataset.ogsb;\n            }\n\n            if (element.dataset.ogac) {\n                delete element.dataset.ogac;\n            }\n\n            if (element.dataset.ogab) {\n                delete element.dataset.ogab;\n            }\n        }\n    });\n    const newContent = el.innerHTML;\n    return newContent;\n}\n\nfunction isDataAttributeSettable(newStyle: string) {\n    return newStyle && newStyle != 'undefined' && newStyle != 'null';\n}","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport {\n    Browser,\n    getPendableFormatState,\n    Position,\n    PendableFormatNames,\n    PendableFormatCommandMap,\n} from 'roosterjs-editor-dom';\nimport {\n    ChangeSource,\n    PluginEventType,\n    NodePosition,\n    PendableFormatState,\n    PluginEvent,\n} from 'roosterjs-editor-types';\n\n/**\n * DOMEventPlugin handles customized DOM events, including:\n * 1. IME state management\n * 2. Selection management\n * 3. Cut and Drop management\n * 4. Pending format state management\n */\nexport default class DOMEventPlugin implements EditorPlugin {\n    private editor: Editor;\n    private inIme = false;\n    private disposer: () => void;\n    private cachedPosition: NodePosition;\n    private cachedFormatState: PendableFormatState;\n\n    constructor(private disableRestoreSelectionOnFocus: boolean) {}\n\n    getName() {\n        return 'DOMEvent';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n\n        this.disposer = editor.addDomEventHandler({\n            // 1. IME state management\n            compositionstart: () => (this.inIme = true),\n            compositionend: (rawEvent: CompositionEvent) => {\n                this.inIme = false;\n                editor.triggerPluginEvent(PluginEventType.CompositionEnd, {\n                    rawEvent,\n                });\n            },\n\n            // 2. Cut and drop management\n            drop: this.onNativeEvent,\n            cut: this.onNativeEvent,\n\n            // 3. Selection mangement\n            focus: this.onFocus,\n            [Browser.isIEOrEdge ? 'beforedeactivate' : 'blur']: this.onBlur,\n        });\n    }\n\n    dispose() {\n        this.disposer();\n        this.disposer = null;\n        this.editor = null;\n        this.clear();\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        switch (event.eventType) {\n            case PluginEventType.PendingFormatStateChanged:\n                // Got PendingFormatStateChagned event, cache current position and pending format\n                this.cachedPosition = this.getCurrentPosition();\n                this.cachedFormatState = event.formatState;\n                break;\n            case PluginEventType.KeyDown:\n            case PluginEventType.MouseDown:\n            case PluginEventType.ContentChanged:\n                // If content or position is changed (by keyboard, mouse, or code),\n                // check if current position is still the same with the cached one (if exist),\n                // and clear cached format if position is changed since it is out-of-date now\n                if (\n                    this.cachedPosition &&\n                    !this.cachedPosition.equalTo(this.getCurrentPosition())\n                ) {\n                    this.clear();\n                }\n                break;\n        }\n    }\n\n    /**\n     * Restore cached pending format state (if exist) to current selection\n     */\n    public restorePendingFormatState() {\n        if (this.cachedFormatState) {\n            let formatState = getPendableFormatState(this.editor.getDocument());\n            (<PendableFormatNames[]>Object.keys(PendableFormatCommandMap)).forEach(key => {\n                if (this.cachedFormatState[key] != formatState[key]) {\n                    this.editor\n                        .getDocument()\n                        .execCommand(PendableFormatCommandMap[key], false, null);\n                }\n            });\n            this.cachedPosition = this.getCurrentPosition();\n        }\n    }\n\n    /**\n     * Check if editor is in IME input sequence\n     * @returns True if editor is in IME input sequence, otherwise false\n     */\n    public isInIME() {\n        return this.inIme;\n    }\n\n    private onNativeEvent = (e: UIEvent) => {\n        this.editor.runAsync(() => {\n            this.editor.addUndoSnapshot(\n                () => {},\n                e.type == 'cut' ? ChangeSource.Cut : ChangeSource.Drop\n            );\n        });\n    };\n\n    private onFocus = () => {\n        if (this.disableRestoreSelectionOnFocus) {\n            if (this.cachedPosition && this.cachedFormatState) {\n                let range = this.editor.getSelectionRange();\n                if (\n                    range.collapsed &&\n                    Position.getStart(range)\n                        .normalize()\n                        .equalTo(this.cachedPosition)\n                ) {\n                    this.restorePendingFormatState();\n                } else {\n                    this.clear();\n                }\n            }\n        } else {\n            this.editor.restoreSavedRange();\n        }\n    };\n\n    private onBlur = () => {\n        this.editor.saveSelectionRange();\n    };\n\n    private clear() {\n        this.cachedPosition = null;\n        this.cachedFormatState = null;\n    }\n\n    private getCurrentPosition() {\n        let range = this.editor.getSelectionRange();\n        return range && Position.getStart(range).normalize();\n    }\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { GenericContentEditFeature, Keys } from '../interfaces/ContentEditFeature';\nimport {\n    ChangeSource,\n    PluginEvent,\n    PluginEventType,\n    PluginKeyboardEvent,\n} from 'roosterjs-editor-types';\n\n/**\n * Edit Component helps handle Content edit features\n */\nexport default class EditPlugin implements EditorPlugin {\n    private editor: Editor;\n    private featureMap: { [key: number]: GenericContentEditFeature<PluginEvent>[] } = {};\n\n    private autoCompleteSnapshot: string = null;\n    private autoCompleteChangeSource: string = null;\n\n    getName() {\n        return 'Edit';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n        this.addFeature({\n            keys: [Keys.BACKSPACE],\n            shouldHandleEvent: () => this.autoCompleteSnapshot !== null,\n            handleEvent: (event: PluginKeyboardEvent, editor: Editor) => {\n                event.rawEvent.preventDefault();\n                editor.setContent(this.autoCompleteSnapshot, false /*triggerContentChangedEvent*/);\n            },\n        });\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        let contentChanged = false;\n        let currentFeature = this.findFeature(event);\n\n        switch (event.eventType) {\n            case PluginEventType.ContentChanged:\n                contentChanged = this.autoCompleteChangeSource != event.source;\n                break;\n            case PluginEventType.MouseDown:\n            case PluginEventType.KeyDown:\n                contentChanged = true;\n                break;\n        }\n\n        if (currentFeature) {\n            currentFeature.handleEvent(event, this.editor);\n        }\n\n        if (contentChanged) {\n            this.autoCompleteSnapshot = null;\n            this.autoCompleteChangeSource = null;\n        }\n    }\n\n    /**\n     * Add a Content Edit feature\n     * @param feature The feature to add\n     */\n    addFeature(feature: GenericContentEditFeature<PluginEvent>) {\n        feature.keys.forEach(key => {\n            let array = this.featureMap[key] || [];\n            array.push(feature);\n            this.featureMap[key] = array;\n        });\n    }\n\n    /**\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\n     * and trigger ContentChangedEvent with the change source if specified\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\n     */\n    performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\n        this.editor.addUndoSnapshot((start, end, snapshot) => {\n            let data = callback();\n            this.autoCompleteSnapshot = snapshot;\n            this.autoCompleteChangeSource = changeSource;\n            return data;\n        }, changeSource);\n    }\n\n    private findFeature(event: PluginEvent) {\n        let hasFunctionKey = false;\n        let features: GenericContentEditFeature<PluginEvent>[];\n\n        if (event.eventType == PluginEventType.KeyDown) {\n            let rawEvent = event.rawEvent;\n            hasFunctionKey = rawEvent.ctrlKey || rawEvent.altKey || rawEvent.metaKey;\n            features = this.featureMap[rawEvent.which];\n        } else if (event.eventType == PluginEventType.ContentChanged) {\n            features = this.featureMap[Keys.CONTENTCHANGED];\n        }\n        return (\n            features &&\n            features.filter(\n                feature =>\n                    (feature.allowFunctionKeys || !hasFunctionKey) &&\n                    feature.shouldHandleEvent(event, this.editor)\n            )[0]\n        );\n    }\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { cacheGetContentSearcher } from '../eventApi/cacheGetContentSearcher';\nimport { LinkInlineElement, Position } from 'roosterjs-editor-dom';\nimport { PluginEvent, PluginEventType, PositionType } from 'roosterjs-editor-types';\n\n/**\n * FirefoxTypeAfterLink Component helps handle typing event when cursor is right after a link.\n * When typing after a link, Firefox will always put the new charactor inside link.\n * This plugin overrides this behavior to make it consistent with other browsers.\n */\nexport default class FirefoxTypeAfterLink implements EditorPlugin {\n    private editor: Editor;\n\n    getName() {\n        return 'FirefoxTypeAfterLink';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyPress) {\n            let range = this.editor.getSelectionRange();\n            if (range && range.collapsed && this.editor.getElementAtCursor('A[href]')) {\n                let searcher = cacheGetContentSearcher(event, this.editor);\n                let inlineElement = searcher.getInlineElementBefore();\n                if (inlineElement instanceof LinkInlineElement) {\n                    this.editor.select(\n                        new Position(inlineElement.getContainerNode(), PositionType.After)\n                    );\n                }\n            }\n        }\n    }\n}\n","import cacheGetEventData from './cacheGetEventData';\r\nimport clearEventDataCache from './clearEventDataCache';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\r\n\r\nconst CONTENTSEARCHER_KEY = 'CONTENTSEARCHER';\r\n\r\n/**\r\n * Try get existing PositionContentSearcher from an event. If there isn't one, create a new one from editor.\r\n * @param event The plugin event, it stores the event cached data for looking up.\r\n * If passed as null, we will create a new PositionContentSearcher\r\n * @param editor The editor instance\r\n * @returns The PositionContentSearcher object\r\n */\r\nexport function cacheGetContentSearcher(\r\n    event: PluginEvent,\r\n    editor: Editor\r\n): PositionContentSearcher {\r\n    return cacheGetEventData(event, CONTENTSEARCHER_KEY, () => editor.getContentSearcherOfCursor());\r\n}\r\n\r\n/**\r\n * Clear the PositionContentSearcher in a plugin event.\r\n * This is called when the content is changed\r\n * @param event The plugin event\r\n */\r\nexport function clearContentSearcherCache(event: PluginEvent) {\r\n    clearEventDataCache(event, CONTENTSEARCHER_KEY);\r\n}\r\n","import { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Clear a cached object by its key from an event object\r\n * @param event The event object\r\n * @param key The cache key\r\n */\r\nexport default function clearEventDataCache(event: PluginEvent, key: string): void {\r\n    if (event && event.eventDataCache && event.eventDataCache.hasOwnProperty(key)) {\r\n        delete event.eventDataCache[key];\r\n    }\r\n}\r\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\n\n/**\n * MouseUp Component helps handle mouse up event\n * this can trigger mouse up event after mousedown happens in editor\n * even mouse up is happening outside editor\n */\nexport default class MouseUpPlugin implements EditorPlugin {\n    private mouseUpEventListerAdded: boolean;\n    private editor: Editor;\n\n    getName() {\n        return 'MouseUp';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.removeMouseUpEventListener();\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.MouseDown && !this.mouseUpEventListerAdded) {\n            this.editor\n                .getDocument()\n                .addEventListener('mouseup', this.onMouseUp, true /*setCapture*/);\n            this.mouseUpEventListerAdded = true;\n        }\n    }\n\n    private removeMouseUpEventListener() {\n        if (this.mouseUpEventListerAdded) {\n            this.mouseUpEventListerAdded = false;\n            this.editor.getDocument().removeEventListener('mouseup', this.onMouseUp, true);\n        }\n    }\n\n    private onMouseUp = (rawEvent: MouseEvent) => {\n        if (this.editor) {\n            this.removeMouseUpEventListener();\n            this.editor.triggerPluginEvent(PluginEventType.MouseUp, {\n                rawEvent,\n            });\n        }\n    };\n}\n","import Editor from '../editor/Editor';\nimport EditorPlugin from '../interfaces/EditorPlugin';\nimport {\n    applyFormat,\n    Browser,\n    findClosestElementAncestor,\n    fromHtml,\n    isNodeEmpty,\n    Position,\n} from 'roosterjs-editor-dom';\nimport {\n    ContentPosition,\n    NodePosition,\n    PluginKeyboardEvent,\n    PositionType,\n    PluginEvent,\n    PluginEventType,\n} from 'roosterjs-editor-types';\n\n/**\n * Typing Component helps to ensure typing is always happening under a DOM container\n */\nexport default class TypeInContainerPlugin implements EditorPlugin {\n    private editor: Editor;\n\n    getName() {\n        return 'TypeInContainer';\n    }\n\n    initialize(editor: Editor) {\n        this.editor = editor;\n    }\n\n    dispose() {\n        this.editor = null;\n    }\n\n    /**\n     * Handle events triggered from editor\n     * @param event PluginEvent object\n     */\n    onPluginEvent(event: PluginEvent) {\n        if (event.eventType == PluginEventType.KeyPress) {\n            this.onKeyPress(event);\n        }\n    }\n\n    /**\n     * Ensure we are typing in an HTML Element inside editor, and apply default format if current block is empty\n     * @param node Current node\n     * @param event (optional) The keyboard event that we are ensuring is typing in an element.\n     * @returns A new position to select\n     */\n    ensureTypeInElement(position: NodePosition, event?: PluginKeyboardEvent): NodePosition {\n        let result = position.normalize();\n        let block = this.editor.getBlockElementAtNode(result.node);\n        let formatNode: HTMLElement;\n\n        if (block) {\n            formatNode = block.collapseToSingleElement();\n\n            // if the block is empty, apply default format\n            // Otherwise, leave it as it is as we don't want to change the style for existing data\n            // unless the block was just created by the keyboard event (e.g. ctrl+a & start typing)\n            const shouldSetNodeStyles =\n                isNodeEmpty(formatNode) ||\n                (event && this.wasNodeJustCreatedByKeyboardEvent(event, formatNode));\n            formatNode = formatNode && shouldSetNodeStyles ? formatNode : null;\n        } else {\n            // Only reason we don't get the selection block is that we have an empty content div\n            // which can happen when users removes everything (i.e. select all and DEL, or backspace from very end to begin)\n            // The fix is to add a DIV wrapping, apply default format and move cursor over\n            formatNode = fromHtml(\n                Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>',\n                this.editor.getDocument()\n            )[0] as HTMLElement;\n            this.editor.insertNode(formatNode, {\n                position: ContentPosition.End,\n                updateCursor: false,\n                replaceSelection: false,\n                insertOnNewLine: false,\n            });\n\n            // element points to a wrapping node we added \"<div><br></div>\". We should move the selection left to <br>\n            result = new Position(formatNode.firstChild, PositionType.Begin);\n        }\n\n        if (formatNode) {\n            applyFormat(formatNode, this.editor.getDefaultFormat(), this.editor.isDarkMode());\n        }\n\n        return result;\n    }\n\n    private onKeyPress(event: PluginKeyboardEvent) {\n        // If normalization was not possible before the keypress,\n        // check again after the keyboard event has been processed by browser native behaviour.\n        //\n        // This handles the case where the keyboard event that first inserts content happens when\n        // there is already content under the selection (e.g. Ctrl+a -> type new content).\n        //\n        // Only scheudle when the range is not collapsed to catch this edge case.\n        let range = this.editor.getSelectionRange();\n\n        if (!range || this.editor.contains(findClosestElementAncestor(range.startContainer))) {\n            return;\n        }\n\n        if (range.collapsed) {\n            this.tryNormalizeTyping(event, range);\n        } else if (!range.collapsed) {\n            this.editor.runAsync(() => {\n                this.tryNormalizeTyping(event);\n            });\n        }\n    }\n\n    /**\n     * When typing goes directly under content div, many things can go wrong\n     * We fix it by wrapping it with a div and reposition cursor within the div\n     */\n    private tryNormalizeTyping(event: PluginKeyboardEvent, range?: Range) {\n        let position = this.ensureTypeInElement(\n            Position.getStart(range || this.editor.getSelectionRange()),\n            event\n        );\n        this.editor.select(position);\n    }\n\n    private wasNodeJustCreatedByKeyboardEvent(event: PluginKeyboardEvent, formatNode: HTMLElement) {\n        return (\n            event.rawEvent.target instanceof Node &&\n            event.rawEvent.target.contains(formatNode) &&\n            event.rawEvent.key === formatNode.innerText\n        );\n    }\n}\n","import Editor from '../editor/Editor';\r\nimport UndoService from '../interfaces/UndoService';\r\nimport UndoSnapshots from './UndoSnapshots';\r\nimport UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst KEY_BACKSPACE = 8;\r\nconst KEY_DELETE = 46;\r\nconst KEY_SPACE = 32;\r\nconst KEY_ENTER = 13;\r\nconst KEY_PAGEUP = 33;\r\nconst KEY_DOWN = 40;\r\n\r\n/**\r\n * Provides snapshot based undo service for Editor\r\n */\r\nexport default class Undo implements UndoService {\r\n    private editor: Editor;\r\n    private isRestoring: boolean;\r\n    private hasNewContent: boolean;\r\n    private lastKeyPress: number;\r\n\r\n    protected undoSnapshots: UndoSnapshotsService;\r\n\r\n    /**\r\n     * Create an instance of Undo\r\n     * @param preserveSnapshots True to preserve the snapshots after dispose, this allows\r\n     * this object to be reused when editor is disposed and created again\r\n     * @param maxBufferSize The max buffer size for snapshots. Default value is 10MB\r\n     */\r\n    constructor(private preserveSnapshots?: boolean, private maxBufferSize: number = 1e7) { }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Undo';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n\r\n        if (!this.preserveSnapshots) {\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        // if editor is in IME, don't do anything\r\n        if (this.editor.isInIME()) {\r\n            return;\r\n        }\r\n\r\n        switch (event.eventType) {\r\n            case PluginEventType.EditorReady:\r\n                if (!this.preserveSnapshots || (!this.canUndo() && !this.canRedo())) {\r\n                    // Only add initial snapshot when we don't need to preserve snapshots or there is no existing snapshot\r\n                    // Otherwise preserved undo/redo state may be ruined\r\n                    this.addUndoSnapshot();\r\n                }\r\n                break;\r\n            case PluginEventType.KeyDown:\r\n                this.onKeyDown(event.rawEvent);\r\n                break;\r\n            case PluginEventType.KeyPress:\r\n                this.onKeyPress(event.rawEvent);\r\n                break;\r\n            case PluginEventType.CompositionEnd:\r\n                this.clearRedoForInput();\r\n                this.addUndoSnapshot();\r\n                break;\r\n            case PluginEventType.ContentChanged:\r\n                if (!this.isRestoring) {\r\n                    this.clearRedoForInput();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all existing undo snapshots\r\n     */\r\n    public clear() {\r\n        this.undoSnapshots = null;\r\n        this.hasNewContent = false;\r\n    }\r\n\r\n    /**\r\n     * Restore an undo snapshot to editor\r\n     */\r\n    public undo(): void {\r\n        if (this.hasNewContent) {\r\n            this.addUndoSnapshot();\r\n        }\r\n\r\n        this.restoreSnapshot(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Restore a redo snapshot to editor\r\n     */\r\n    public redo(): void {\r\n        this.restoreSnapshot(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for undo\r\n     */\r\n    public canUndo(): boolean {\r\n        return this.hasNewContent || this.getSnapshotsManager().canMove(-1 /*previousSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a snapshot for redo\r\n     */\r\n    public canRedo(): boolean {\r\n        return this.getSnapshotsManager().canMove(1 /*nextSnapshot*/);\r\n    }\r\n\r\n    /**\r\n     * Add an undo snapshot\r\n     */\r\n    public addUndoSnapshot(): string {\r\n        let snapshot = this.editor.getContent(\r\n            false /*triggerExtractContentEvent*/,\r\n            true /* includeSelectionMarker */\r\n        );\r\n        this.getSnapshotsManager().addSnapshot(snapshot);\r\n        this.hasNewContent = false;\r\n        return snapshot;\r\n    }\r\n\r\n    protected getSnapshotsManager(): UndoSnapshotsService {\r\n        if (!this.undoSnapshots) {\r\n            this.undoSnapshots = new UndoSnapshots(this.maxBufferSize);\r\n        }\r\n        return this.undoSnapshots;\r\n    }\r\n\r\n    private restoreSnapshot(delta: number) {\r\n        let snapshot = this.getSnapshotsManager().move(delta);\r\n\r\n        if (snapshot != null) {\r\n            try {\r\n                this.isRestoring = true;\r\n                this.editor.setContent(snapshot);\r\n            } finally {\r\n                this.isRestoring = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDown(evt: KeyboardEvent): void {\r\n        // Handle backspace/delete when there is a selection to take a snapshot\r\n        // since we want the state prior to deletion restorable\r\n        if (evt.which == KEY_BACKSPACE || evt.which == KEY_DELETE) {\r\n            let selectionRange = this.editor.getSelectionRange();\r\n\r\n            // Add snapshot when\r\n            // 1. Something has been selected (not collapsed), or\r\n            // 2. It has a different key code from the last keyDown event (to prevent adding too many snapshot when keeping press the same key), or\r\n            // 3. Ctrl/Meta key is pressed so that a whole word will be deleted\r\n            if (\r\n                selectionRange &&\r\n                (!selectionRange.collapsed ||\r\n                    this.lastKeyPress != evt.which ||\r\n                    evt.ctrlKey ||\r\n                    evt.metaKey)\r\n            ) {\r\n                this.addUndoSnapshot();\r\n            }\r\n\r\n            // Since some content is deleted, always set hasNewContent to true so that we will take undo snapshot next time\r\n            this.hasNewContent = true;\r\n            this.lastKeyPress = evt.which;\r\n        } else if (evt.which >= KEY_PAGEUP && evt.which <= KEY_DOWN) {\r\n            // PageUp, PageDown, Home, End, Left, Right, Up, Down\r\n            if (this.hasNewContent) {\r\n                this.addUndoSnapshot();\r\n            }\r\n            this.lastKeyPress = 0;\r\n        }\r\n    }\r\n\r\n    private onKeyPress(evt: KeyboardEvent): void {\r\n        if (evt.metaKey) {\r\n            // if metaKey is pressed, simply return since no actual effect will be taken on the editor.\r\n            // this is to prevent changing hasNewContent to true when meta + v to paste on Safari.\r\n            return;\r\n        }\r\n\r\n        let range = this.editor.getSelectionRange();\r\n        if (\r\n            (range && !range.collapsed) ||\r\n            (evt.which == KEY_SPACE && this.lastKeyPress != KEY_SPACE) ||\r\n            evt.which == KEY_ENTER\r\n        ) {\r\n            this.addUndoSnapshot();\r\n            if (evt.which == KEY_ENTER) {\r\n                // Treat ENTER as new content so if there is no input after ENTER and undo,\r\n                // we restore the snapshot before ENTER\r\n                this.hasNewContent = true;\r\n            }\r\n        } else {\r\n            this.clearRedoForInput();\r\n        }\r\n\r\n        this.lastKeyPress = evt.which;\r\n    }\r\n\r\n    private clearRedoForInput() {\r\n        this.getSnapshotsManager().clearRedo();\r\n        this.lastKeyPress = 0;\r\n        this.hasNewContent = true;\r\n    }\r\n}\r\n","import isModifierKey from './isModifierKey';\n\n/**\n * Returns true when the event was fired from a key that produces a character value, otherwise false\n * This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\n * event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\n * So if we missed some case here it is still acceptable.\n * @param event The keyboard event object\n */\nexport default function isCharacterValue(event: KeyboardEvent): boolean {\n    return !isModifierKey(event) && event.key && event.key.length == 1;\n}\n","const CTRL_CHARCODE = 'Control';\r\nconst ALT_CHARCODE = 'Alt';\r\nconst META_CHARCODE = 'Meta';\r\n\r\n/**\r\n * Returns true when the event was fired from a modifier key, otherwise false\r\n * @param event The keyboard event object\r\n */\r\nexport default function isModifierKey(event: KeyboardEvent): boolean {\r\n    const isCtrlKey = event.ctrlKey || event.key === CTRL_CHARCODE;\r\n    const isAltKey = event.altKey || event.key === ALT_CHARCODE;\r\n    const isMetaKey = event.metaKey || event.key === META_CHARCODE;\r\n\r\n    return isCtrlKey || isAltKey || isMetaKey;\r\n}\r\n","import { DefaultFormat } from 'roosterjs-editor-types';\nimport { getComputedStyles } from 'roosterjs-editor-dom';\n\nconst DARK_MODE_DEFAULT_FORMAT = {\n    backgroundColors: {\n        darkModeColor: 'rgb(51,51,51)',\n        lightModeColor: 'rgb(255,255,255)',\n    },\n    textColors: {\n        darkModeColor: 'rgb(255,255,255)',\n        lightModeColor: 'rgb(0,0,0)',\n    }\n}\n\nexport function calculateDefaultFormat(\n    node: Node,\n    baseFormat: DefaultFormat,\n    inDarkMode: boolean\n): DefaultFormat {\n    if (inDarkMode) {\n        if (!baseFormat.backgroundColors) {\n            baseFormat.backgroundColors = DARK_MODE_DEFAULT_FORMAT.backgroundColors;\n        }\n        if (!baseFormat.textColors) {\n            baseFormat.textColors = DARK_MODE_DEFAULT_FORMAT.textColors;\n        }\n    }\n\n    if (baseFormat && Object.keys(baseFormat).length === 0) {\n        return {};\n    }\n\n    baseFormat = baseFormat || <DefaultFormat>{};\n    let {\n        fontFamily,\n        fontSize,\n        textColor,\n        textColors,\n        backgroundColor,\n        backgroundColors,\n        bold,\n        italic,\n        underline,\n    } = baseFormat;\n    let currentStyles =\n        fontFamily && fontSize && (textColor || textColors) ? null : getComputedStyles(node);\n    return {\n        fontFamily: fontFamily || currentStyles[0],\n        fontSize: fontSize || currentStyles[1],\n        get textColor() {\n            return textColors\n                ? inDarkMode\n                    ? textColors.darkModeColor\n                    : textColors.lightModeColor\n                : textColor || currentStyles[2];\n        },\n        textColors: textColors,\n        get backgroundColor() {\n            return backgroundColors\n                ? inDarkMode\n                    ? backgroundColors.darkModeColor\n                    : backgroundColors.lightModeColor\n                : backgroundColor || '';\n        },\n        backgroundColors: backgroundColors,\n        bold: bold,\n        italic: italic,\n        underline: underline,\n    };\n}","import EditorCore, { HasFocus } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Check if the editor has focus now\r\n * @param core The EditorCore object\r\n * @returns True if the editor has focus, otherwise false\r\n */\r\nexport const hasFocus: HasFocus = (core: EditorCore) => {\r\n    let activeElement = core.document.activeElement;\r\n    return (\r\n        activeElement && contains(core.contentDiv, activeElement, true /*treatSameNodeAsContain*/)\r\n    );\r\n};\r\n","import { ChangeSource, PositionType, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    Browser,\r\n    Position,\r\n    wrap,\r\n    unwrap,\r\n    fromHtml,\r\n    getTagOfNode,\r\n    splitBalancedNodeRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst ZERO_WIDTH_SPACE = '&#8203;';\r\nconst UNWRAPPABLE_NODES = 'LI,THEAD,TBODY,TR,TD,TH'.split(',');\r\nconst DEFAULT_STYLER = (_: HTMLElement) => {};\r\n\r\n/**\r\n * Toggle a tag at selection, if selection already contains elements of such tag,\r\n * the elements will be untagge and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param tag The tag name\r\n * @param styler (Optional) The styler for setting the style for the blockquote element\r\n * @param wrapFunction (Optional) The wrap function\r\n * @param unwrapFunction (Optional) The unwrap function\r\n */\r\nexport default function toggleTagCore<T extends keyof HTMLElementTagNameMap>(\r\n    editor: Editor,\r\n    tag: T,\r\n    styler?: (element: HTMLElement) => void,\r\n    wrapFunction: (nodes: Node[]) => HTMLElement = nodes => wrap(nodes, tag),\r\n    unwrapFunction: (node: Node) => Node = unwrap\r\n): void {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let result: HTMLElement;\r\n        let range = editor.getSelectionRange();\r\n        if (\r\n            range &&\r\n            editor.queryElements(tag, QueryScope.OnSelection, unwrapFunction).length == 0\r\n        ) {\r\n            let startNode = Position.getStart(range).normalize().node;\r\n            let startBlock = editor.getBlockElementAtNode(startNode);\r\n            let endNode = Position.getEnd(range).normalize().node;\r\n            let endBlock = editor.getBlockElementAtNode(endNode);\r\n            let nodes =\r\n                startBlock && endBlock\r\n                    ? editor.collapseNodes(\r\n                          startBlock.getStartNode(),\r\n                          endBlock.getEndNode(),\r\n                          true /*canSplitParent*/\r\n                      )\r\n                    : [];\r\n\r\n            if (nodes.length == 0) {\r\n                // Selection is collapsed and blockElement is null, we need to create an empty div.\r\n                // In case of IE and Edge, we insert ZWS to put cursor in the div, otherwise insert BR node.\r\n                nodes = fromHtml(\r\n                    `<DIV>${Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<BR>'}</DIV>`,\r\n                    editor.getDocument()\r\n                );\r\n                editor.insertNode(nodes[0]);\r\n                editor.select(nodes[0], PositionType.Begin);\r\n            } else if (nodes.length == 1) {\r\n                let tag = getTagOfNode(nodes[0]);\r\n                if (tag == 'BR') {\r\n                    nodes = [wrap(nodes[0])];\r\n                } else if (tag == 'LI' || tag == 'TD') {\r\n                    nodes = [].slice.call(nodes[0].childNodes) as Node[];\r\n                }\r\n            } else {\r\n                while (\r\n                    nodes[0] &&\r\n                    editor.contains(nodes[0].parentNode) &&\r\n                    nodes.some(node => UNWRAPPABLE_NODES.indexOf(getTagOfNode(node)) >= 0)\r\n                ) {\r\n                    nodes = [splitBalancedNodeRange(nodes)];\r\n                }\r\n            }\r\n\r\n            result = wrapFunction(nodes);\r\n            (styler || DEFAULT_STYLER)(result);\r\n        }\r\n\r\n        if (!editor.select(start, end) && result) {\r\n            editor.select(result);\r\n        }\r\n\r\n        return result;\r\n    }, ChangeSource.Format);\r\n}\r\n","import { StringMap } from '../types/maps';\r\n\r\n// Inheritable CSS properties\r\n// Ref: https://www.w3.org/TR/CSS21/propidx.html\r\nconst INHERITABLE_PROPERTIES = (\r\n    'border-spacing,caption-side,color,' +\r\n    'cursor,direction,empty-cells,font-family,font-size,font-style,font-variant,font-weight,' +\r\n    'font,letter-spacing,line-height,list-style-image,list-style-position,list-style-type,' +\r\n    'list-style,orphans,quotes,text-align,text-indent,text-transform,visibility,white-space,' +\r\n    'widows,word-spacing'\r\n).split(',');\r\n\r\n/**\r\n * Get inheritable CSS style values from the given element\r\n * @param element The element to get style from\r\n */\r\nexport default function getInheritableStyles(element: HTMLElement): StringMap {\r\n    let win = element && element.ownerDocument && element.ownerDocument.defaultView;\r\n    let styles = win && win.getComputedStyle(element);\r\n    let result: StringMap = {};\r\n    INHERITABLE_PROPERTIES.forEach(\r\n        name => (result[name] = (styles && styles.getPropertyValue(name)) || '')\r\n    );\r\n    return result;\r\n}\r\n","const START_FRAGMENT = '<!--StartFragment-->';\r\nconst END_FRAGMENT = '<!--EndFragment-->';\r\n\r\n/**\r\n * Build DOM tree from the given HTML string\r\n * @param html Source HTML string\r\n * @param preserveFragmentOnly If there is fragment markup (&lt;!--StartFragment--&gt; and &lt;!--EndFragment--&gt;),\r\n * only preserve content between these markups\r\n * @param fragmentHandler An optional callback to do customized fragment handling\r\n */\r\nexport default function htmlToDom(\r\n    html: string,\r\n    preserveFragmentOnly: boolean,\r\n    fragmentHandler?: (doc: HTMLDocument, sourceHtml: string) => void\r\n): HTMLDocument {\r\n    let parser = new DOMParser();\r\n    let doc = parser.parseFromString(html || '', 'text/html');\r\n\r\n    if (doc && doc.body && doc.body.firstChild) {\r\n        // 1. Filter out html code outside of Fragment tags if need\r\n        if (preserveFragmentOnly) {\r\n            (fragmentHandler || defaultFragmentTrimmer)(doc, html);\r\n        }\r\n\r\n        return doc;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction defaultFragmentTrimmer(doc: HTMLDocument, sourceHtml: string) {\r\n    let [html] = splitWithFragment(sourceHtml);\r\n    doc.body.innerHTML = html;\r\n}\r\n\r\n/**\r\n * Split the HTML string using its fragment info\r\n * @param html Source html string\r\n * @returns [String within fragment, String before fragment, String after fragment]\r\n */\r\nexport function splitWithFragment(html: string): [string, string, string] {\r\n    let startIndex = html.indexOf(START_FRAGMENT);\r\n    let endIndex = html.lastIndexOf(END_FRAGMENT);\r\n    if (startIndex >= 0 && endIndex >= 0 && endIndex >= startIndex + START_FRAGMENT.length) {\r\n        let before = html.substr(0, startIndex);\r\n        let after = html.substr(endIndex + END_FRAGMENT.length);\r\n        html = html.substring(startIndex + START_FRAGMENT.length, endIndex);\r\n        return [html, before, after];\r\n    } else {\r\n        return [html, null, null];\r\n    }\r\n}\r\n","import { Map } from '../types/maps';\r\n\r\nfunction nativeClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    return Object.assign(existingObj || {}, source);\r\n}\r\n\r\nfunction customClone<T>(source: Map<T>, existingObj?: Map<T>): Map<T> {\r\n    let result: Map<T> = existingObj || {};\r\n    if (source) {\r\n        for (let key of Object.keys(source)) {\r\n            result[key] = source[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const cloneObject = Object.assign ? nativeClone : customClone;\r\n","import { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** NodeId attribute */\r\nconst NODE_ID_ATTRIBUTE_NAME = 'NodeId';\r\n\r\n/** Custom data for dom elements */\r\nexport default interface CustomData {\r\n    /** The dict storing custom data, key is element Id, value is dictionary */\r\n    dict: { [key: string]: { [key: string]: number } };\r\n\r\n    /** Next node Id to use */\r\n    nextNodeId: number;\r\n}\r\n\r\n/** create an empty CustomData */\r\nexport function createCustomData(): CustomData {\r\n    return {\r\n        dict: {},\r\n        nextNodeId: 1,\r\n    };\r\n}\r\n\r\n/**\r\n * Sets the specified object data\r\n */\r\nexport function setObject(customData: CustomData, element: Node, key: string, value: any) {\r\n    // Get the id for the element\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            // Get the values for the element\r\n            if (!customData.dict[id]) {\r\n                // First time dictionary creation\r\n                customData.dict[id] = {};\r\n            }\r\n            customData.dict[id][key] = value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reads the specified object data\r\n */\r\nexport function getObject(customData: CustomData, element: Node, key: string): any {\r\n    if (element.nodeType == NodeType.Element) {\r\n        let id = getAndSetNodeId(customData, element as HTMLElement);\r\n        if (id != '') {\r\n            return customData.dict[id] && customData.dict[id][key];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/** Get the unique id for the specified node... */\r\nfunction getAndSetNodeId(customData: CustomData, element: HTMLElement): string {\r\n    let id = element.getAttribute(NODE_ID_ATTRIBUTE_NAME);\r\n    if (!id) {\r\n        id = customData.nextNodeId.toString();\r\n        customData.nextNodeId++;\r\n        element.setAttribute(NODE_ID_ATTRIBUTE_NAME, id);\r\n    }\r\n    return id;\r\n}\r\n","import ListMetadata from './ListMetadata';\r\n\r\n/** Holds the ids for the lists already seen for a specified level */\r\nexport default interface LevelLists {\r\n    /**\r\n     * The metadata for the lists seen at  this level\r\n     * key: word list id, value: list metadata\r\n     */\r\n    listsMetadata: { [key: string]: ListMetadata };\r\n\r\n    /** Unique id of the list currently at this level */\r\n    currentUniqueListId: number;\r\n}\r\n\r\n/** create an empty LevelLists */\r\nexport function createLevelLists(): LevelLists {\r\n    return {\r\n        listsMetadata: {},\r\n        currentUniqueListId: -1,\r\n    };\r\n}\r\n","export { default as createEditor } from './createEditor';\r\nexport * from 'roosterjs-editor-types';\r\nexport * from 'roosterjs-editor-dom';\r\nexport * from 'roosterjs-editor-core';\r\nexport * from 'roosterjs-editor-api';\r\nexport * from 'roosterjs-editor-plugins';\r\nexport * from 'roosterjs-plugin-image-resize';\r\nexport * from 'roosterjs-html-sanitizer';\r\nexport * from 'roosterjs-plugin-picker';\r\n","import { ContentEdit, HyperLink, Paste } from 'roosterjs-editor-plugins';\r\nimport { Editor, EditorOptions, EditorPlugin } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Create an editor instance with most common options\r\n * @param contentDiv The html div element needed for creating the editor\r\n * @param additionalPlugins The additional user defined plugins. Currently the default plugins that are already included are\r\n * DefalutShortcut, HyperLink, Paste, and ContentEdit, user don't need to add those.\r\n * @param initialContent The initial content to show in editor. It can't be removed by undo, user need to manually remove it if needed.\r\n * @returns The editor instance\r\n */\r\nexport default function createEditor(\r\n    contentDiv: HTMLDivElement,\r\n    additionalPlugins?: EditorPlugin[],\r\n    initialContent?: string\r\n): Editor {\r\n    let plugins: EditorPlugin[] = [new HyperLink(), new Paste(), new ContentEdit()];\r\n\r\n    if (additionalPlugins) {\r\n        plugins = plugins.concat(additionalPlugins);\r\n    }\r\n\r\n    let options: EditorOptions = {\r\n        plugins: plugins,\r\n        initialContent: initialContent,\r\n        defaultFormat: {\r\n            fontFamily: 'Calibri,Arial,Helvetica,sans-serif',\r\n            fontSize: '11pt',\r\n            textColor: '#000000',\r\n        },\r\n    };\r\n    return new Editor(contentDiv, options);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { PluginEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * An editor plugin that show a tooltip for existing link\r\n */\r\nexport default class HyperLink implements EditorPlugin {\r\n    private editor: Editor;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of HyperLink class\r\n     * @param getTooltipCallback A callback function to get tooltip text for an existing hyperlink.\r\n     * Default value is to return the href itself. If null, there will be no tooltip text.\r\n     * @param target (Optional) Target window name for hyperlink. If null, will use \"_blank\"\r\n     * @param onLinkClick (Optional) Open link callback (return false to use default behavior)\r\n     */\r\n    constructor(\r\n        private getTooltipCallback: (href: string, a: HTMLAnchorElement) => string = href => href,\r\n        private target?: string,\r\n        private onLinkClick?: (anchor: HTMLAnchorElement, mouseEvent: MouseEvent) => boolean | void\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Hyperlink';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.disposer =\r\n            this.getTooltipCallback &&\r\n            editor.addDomEventHandler({ mouseover: this.onMouse, mouseout: this.onMouse });\r\n    }\r\n\r\n    protected onMouse = (e: MouseEvent) => {\r\n        const a = this.editor.getElementAtCursor('a[href]', <Node>e.target) as HTMLAnchorElement;\r\n        const href = this.tryGetHref(a);\r\n\r\n        if (href) {\r\n            this.editor.setEditorDomAttribute(\r\n                'title',\r\n                e.type == 'mouseover' ? this.getTooltipCallback(href, a) : null\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent): void {\r\n        if (event.eventType == PluginEventType.MouseUp) {\r\n            const anchor = this.editor.getElementAtCursor('A', <Node>(\r\n                event.rawEvent.srcElement\r\n            )) as HTMLAnchorElement;\r\n\r\n            if (anchor) {\r\n                if (this.onLinkClick && this.onLinkClick(anchor, event.rawEvent) !== false) {\r\n                    return;\r\n                }\r\n\r\n                let href: string;\r\n                if (\r\n                    !Browser.isFirefox &&\r\n                    (href = this.tryGetHref(anchor)) &&\r\n                    (Browser.isMac ? event.rawEvent.metaKey : event.rawEvent.ctrlKey) &&\r\n                    event.rawEvent.button === 0\r\n                ) {\r\n                    try {\r\n                        const target = this.target || '_blank';\r\n                        const window = this.editor.getDocument().defaultView;\r\n                        window.open(href, target);\r\n                    } catch {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Try get href from an anchor element\r\n     * The reason this is put in a try-catch is that\r\n     * it has been seen that accessing href may throw an exception, in particular on IE/Edge\r\n     */\r\n    private tryGetHref(anchor: HTMLAnchorElement): string {\r\n        try {\r\n            return anchor ? anchor.href : null;\r\n        } catch {}\r\n    }\r\n}\r\n","import contains from '../utils/contains';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement } from 'roosterjs-editor-types';\r\nimport { getFirstBlockElement } from '../blockElements/getFirstLastBlockElement';\r\nimport { getFirstInlineElement } from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * provides scoper for traversing the entire editor body starting from the beginning\r\n */\r\nexport default class BodyScoper implements TraversingScoper {\r\n    private startNode: Node;\r\n\r\n    /**\r\n     * Construct a new instance of BodyScoper class\r\n     * @param rootNode Root node of the body\r\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\r\n     */\r\n    constructor(public rootNode: Node, startNode?: Node) {\r\n        this.startNode = contains(rootNode, startNode) ? startNode : null;\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.startNode\r\n            ? getBlockElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstBlockElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        return this.startNode\r\n            ? getInlineElementAtNode(this.rootNode, this.startNode)\r\n            : getFirstInlineElement(this.rootNode);\r\n    }\r\n\r\n    /**\r\n     * Since the scope is global, all blocks under the root node are in scope\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return contains(this.rootNode, blockElement.getStartNode());\r\n    }\r\n\r\n    /**\r\n     * Since we're at body scope, inline elements never need to be trimmed\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return inlineElement;\r\n    }\r\n}\r\n","import EmptyInlineElement from '../inlineElements/EmptyInlineElement';\r\nimport getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport getInlineElementAtNode from '../inlineElements/getInlineElementAtNode';\r\nimport NodeBlockElement from '../blockElements/NodeBlockElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, ContentPosition, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\nimport {\r\n    getFirstInlineElement,\r\n    getLastInlineElement,\r\n} from '../inlineElements/getFirstLastInlineElement';\r\n\r\n/**\r\n * This provides traversing content in a selection start block\r\n * This is commonly used for those cursor context sensitive plugin,\r\n * they want to know text being typed at cursor\r\n * This provides a scope for parsing from cursor position up to begin of the selection block\r\n */\r\nexport default class SelectionBlockScoper implements TraversingScoper {\r\n    private block: BlockElement;\r\n    private position: NodePosition;\r\n\r\n    /**\r\n     * Create a new instance of SelectionBlockScoper class\r\n     * @param rootNode The root node of the whole scope\r\n     * @param position Position of the selection start\r\n     * @param startFrom Where to start, can be Begin, End, SelectionStart\r\n     */\r\n    constructor(\r\n        public rootNode: Node,\r\n        position: NodePosition | Range,\r\n        private startFrom: ContentPosition\r\n    ) {\r\n        position = position instanceof Range ? Position.getStart(position) : position;\r\n        this.position = position.normalize();\r\n        this.block = getBlockElementAtNode(this.rootNode, this.position.node);\r\n    }\r\n\r\n    /**\r\n     * Get the start block element\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        return this.block;\r\n    }\r\n\r\n    /**\r\n     * Get the start inline element\r\n     * The start inline refers to inline before the selection start\r\n     *  The reason why we choose the one before rather after is, when cursor is at the end of a paragragh,\r\n     * the one after likely will point to inline in next paragragh which may be null if the cursor is at bottom of editor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (this.block) {\r\n            switch (this.startFrom) {\r\n                case ContentPosition.Begin:\r\n                case ContentPosition.End:\r\n                    return getFirstLastInlineElementFromBlockElement(\r\n                        this.block,\r\n                        this.startFrom == ContentPosition.Begin\r\n                    );\r\n                case ContentPosition.SelectionStart:\r\n                    // Get the inline before selection start point, and ensure it falls in the selection block\r\n                    let startInline = getInlineElementAfter(this.rootNode, this.position);\r\n                    return startInline && this.block.contains(startInline.getContainerNode())\r\n                        ? startInline\r\n                        : new EmptyInlineElement(this.position, this.block);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Check if the given block element is in current scope\r\n     * @param blockElement The block element to check\r\n     */\r\n    public isBlockInScope(blockElement: BlockElement): boolean {\r\n        return this.block && blockElement ? this.block.equals(blockElement) : false;\r\n    }\r\n\r\n    /**\r\n     * Trim the incoming inline element, and return an inline element\r\n     * This just tests and return the inline element if it is in block\r\n     * This is a block scoper, which is not like selection scoper where it may cut an inline element in half\r\n     * A block scoper does not cut an inline in half\r\n     */\r\n    public trimInlineElement(inlineElement: InlineElement): InlineElement {\r\n        return this.block && inlineElement && this.block.contains(inlineElement.getContainerNode())\r\n            ? inlineElement\r\n            : null;\r\n    }\r\n}\r\n\r\n/**\r\n * Get first/last InlineElement of the given BlockElement\r\n * @param block The BlockElement to get InlineElement from\r\n * @param isFirst True to get first InlineElement, false to get last InlineElement\r\n */\r\nfunction getFirstLastInlineElementFromBlockElement(\r\n    block: BlockElement,\r\n    isFirst: boolean\r\n): InlineElement {\r\n    if (block instanceof NodeBlockElement) {\r\n        let blockNode = block.getStartNode();\r\n        return isFirst ? getFirstInlineElement(blockNode) : getLastInlineElement(blockNode);\r\n    } else {\r\n        return getInlineElementAtNode(block, isFirst ? block.getStartNode() : block.getEndNode());\r\n    }\r\n}\r\n","import getBlockElementAtNode from '../blockElements/getBlockElementAtNode';\r\nimport PartialInlineElement from '../inlineElements/PartialInlineElement';\r\nimport Position from '../selection/Position';\r\nimport TraversingScoper from './TraversingScoper';\r\nimport { BlockElement, InlineElement, NodePosition } from 'roosterjs-editor-types';\r\nimport { getInlineElementAfter } from '../inlineElements/getInlineElementBeforeAfter';\r\n\r\n/**\r\n * This is selection scoper that provide a start inline as the start of the selection\r\n * and checks if a block falls in the selection (isBlockInScope)\r\n * last trimInlineElement to trim any inline element to return a partial that falls in the selection\r\n */\r\nexport default class SelectionScoper implements TraversingScoper {\r\n    private start: NodePosition;\r\n    private end: NodePosition;\r\n    private startBlock: BlockElement;\r\n    private startInline: InlineElement;\r\n\r\n    /**\r\n     * Create a new instance of SelectionScoper class\r\n     * @param rootNode The root node of the content\r\n     * @param range The selection range to scope to\r\n     */\r\n    constructor(public rootNode: Node, range: Range) {\r\n        this.start = Position.getStart(range).normalize();\r\n        this.end = Position.getEnd(range).normalize();\r\n    }\r\n\r\n    /**\r\n     * Provide a start block as the first block after the cursor\r\n     */\r\n    public getStartBlockElement(): BlockElement {\r\n        if (!this.startBlock) {\r\n            this.startBlock = getBlockElementAtNode(this.rootNode, this.start.node);\r\n        }\r\n\r\n        return this.startBlock;\r\n    }\r\n\r\n    /**\r\n     * Provide a start inline as the first inline after the cursor\r\n     */\r\n    public getStartInlineElement(): InlineElement {\r\n        if (!this.startInline) {\r\n            this.startInline = this.trimInlineElement(\r\n                getInlineElementAfter(this.rootNode, this.start)\r\n            );\r\n        }\r\n\r\n        return this.startInline;\r\n    }\r\n\r\n    /**\r\n     * Checks if a block completely falls in the selection\r\n     * @param block The BlockElement to check\r\n     */\r\n    public isBlockInScope(block: BlockElement): boolean {\r\n        if (!block) {\r\n            return false;\r\n        }\r\n        let inScope = false;\r\n        let selStartBlock = this.getStartBlockElement();\r\n        if (this.start.equalTo(this.end)) {\r\n            inScope = selStartBlock && selStartBlock.equals(block);\r\n        } else {\r\n            let selEndBlock = getBlockElementAtNode(this.rootNode, this.end.node);\r\n\r\n            // There are three cases that are considered as \"block in scope\"\r\n            // 1) The start of selection falls on the block\r\n            // 2) The end of selection falls on the block\r\n            // 3) the block falls in-between selection start and end\r\n            inScope =\r\n                selStartBlock &&\r\n                selEndBlock &&\r\n                (block.equals(selStartBlock) ||\r\n                    block.equals(selEndBlock) ||\r\n                    (block.isAfter(selStartBlock) && selEndBlock.isAfter(block)));\r\n        }\r\n\r\n        return inScope;\r\n    }\r\n\r\n    /**\r\n     * Trim an incoming inline. If it falls completely outside selection, return null\r\n     * otherwise return a partial that represents the portion that falls in the selection\r\n     * @param inline The InlineElement to check\r\n     */\r\n    public trimInlineElement(inline: InlineElement): InlineElement {\r\n        if (!inline || this.start.equalTo(this.end)) {\r\n            return null;\r\n        }\r\n\r\n        // Temp code. Will be changed to using InlineElement.getStart/EndPosition() soon\r\n        let start = inline.getStartPosition();\r\n        let end = inline.getEndPosition();\r\n\r\n        if (start.isAfter(this.end) || this.start.isAfter(end)) {\r\n            return null;\r\n        }\r\n\r\n        let startPartial = false;\r\n        let endPartial = false;\r\n\r\n        if (this.start.isAfter(start)) {\r\n            start = this.start;\r\n            startPartial = true;\r\n        }\r\n\r\n        if (end.isAfter(this.end)) {\r\n            end = this.end;\r\n            endPartial = true;\r\n        }\r\n\r\n        return start.isAfter(end) || start.equalTo(end)\r\n            ? null\r\n            : startPartial || endPartial\r\n            ? new PartialInlineElement(inline, startPartial && start, endPartial && end)\r\n            : inline;\r\n    }\r\n}\r\n","import ContentTraverser from './ContentTraverser';\r\nimport createRange from '../selection/createRange';\r\nimport { InlineElement, NodePosition } from 'roosterjs-editor-types';\r\n\r\n// White space matching regex. It matches following chars:\r\n// \\s: white space\r\n// \\u00A0: no-breaking white space\r\n// \\u200B: zero width space\r\n// \\u3000: full width space (which can come from JPN IME)\r\nconst WHITESPACE_REGEX = /[\\s\\u00A0\\u200B\\u3000]+([^\\s\\u00A0\\u200B\\u3000]*)$/i;\r\n\r\n/**\r\n * The class that helps search content around a position\r\n */\r\nexport default class PositionContentSearcher {\r\n    // The cached text before position that has been read so far\r\n    private text = '';\r\n\r\n    // The cached word before position\r\n    private word: string;\r\n\r\n    // The inline element before position\r\n    private inlineBefore: InlineElement;\r\n\r\n    // The inline element after position\r\n    private inlineAfter: InlineElement;\r\n\r\n    // The content traverser used to traverse backwards\r\n    private traverser: ContentTraverser;\r\n\r\n    // Backward parsing has completed\r\n    private traversingComplete: boolean;\r\n\r\n    // All inline elements before position that have been read so far\r\n    private inlineElements: InlineElement[] = [];\r\n\r\n    // First non-text inline before position\r\n    private nearestNonTextInlineElement: InlineElement;\r\n\r\n    /**\r\n     * Create a new CursorData instance\r\n     * @param rootNode Root node of the whole scope\r\n     * @param position Start position\r\n     */\r\n    constructor(private rootNode: Node, private position: NodePosition) {}\r\n\r\n    /**\r\n     * Get the word before position. The word is determined by scanning backwards till the first white space, the portion\r\n     * between position and the white space is the word before position\r\n     * @returns The word before position\r\n     */\r\n    public getWordBefore(): string {\r\n        if (!this.word) {\r\n            this.traverse(() => this.word);\r\n        }\r\n\r\n        return this.word;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element before position\r\n     * @returns The inlineElement before position\r\n     */\r\n    public getInlineElementBefore(): InlineElement {\r\n        if (!this.inlineBefore) {\r\n            this.traverse(null);\r\n        }\r\n\r\n        return this.inlineBefore;\r\n    }\r\n\r\n    /**\r\n     * Get the inline element after position\r\n     * @returns The inline element after position\r\n     */\r\n    public getInlineElementAfter(): InlineElement {\r\n        if (!this.inlineAfter) {\r\n            this.inlineAfter = ContentTraverser.createBlockTraverser(\r\n                this.rootNode,\r\n                this.position\r\n            ).currentInlineElement;\r\n        }\r\n\r\n        return this.inlineAfter;\r\n    }\r\n\r\n    /**\r\n     * Get X number of chars before position\r\n     * The actual returned chars may be less than what is requested.\r\n     * @param length The length of string user want to get, the string always ends at the position,\r\n     * so this length determins the start position of the string\r\n     * @returns The actual string we get as a sub string, or the whole string before position when\r\n     * there is not enough chars in the string\r\n     */\r\n    public getSubStringBefore(length: number): string {\r\n        if (this.text.length < length) {\r\n            this.traverse(() => this.text.length >= length);\r\n        }\r\n\r\n        return this.text.substr(Math.max(0, this.text.length - length));\r\n    }\r\n\r\n    /**\r\n     * Try to get a range matches the given text before the position\r\n     * @param text The text to match against\r\n     * @param exactMatch Whether it is an exact match\r\n     * @returns The range for the matched text, null if unable to find a match\r\n     */\r\n    public getRangeFromText(text: string, exactMatch: boolean): Range {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        let startPosition: NodePosition;\r\n        let endPosition: NodePosition;\r\n        let textIndex = text.length - 1;\r\n\r\n        this.forEachTextInlineElement(textInline => {\r\n            let nodeContent = textInline.getTextContent() || '';\r\n            let nodeIndex = nodeContent.length - 1;\r\n            for (; nodeIndex >= 0 && textIndex >= 0; nodeIndex--) {\r\n                if (text.charCodeAt(textIndex) == nodeContent.charCodeAt(nodeIndex)) {\r\n                    textIndex--;\r\n\r\n                    // on first time when end is matched, set the end of range\r\n                    if (!endPosition) {\r\n                        endPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                    }\r\n                } else if (exactMatch || endPosition) {\r\n                    // Mismatch found when exact match or end already match, so return since matching failed\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // when textIndex == -1, we have a successful complete match\r\n            if (textIndex == -1) {\r\n                startPosition = textInline.getStartPosition().move(nodeIndex + 1);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return startPosition && endPosition && createRange(startPosition, endPosition);\r\n    }\r\n\r\n    /**\r\n     * Get text section before position till stop condition is met.\r\n     * This offers consumers to retrieve text section by section\r\n     * The section essentially is just an inline element which has Container element\r\n     * so that the consumer can remember it for anchoring popup or verification purpose\r\n     * when position moves out of context etc.\r\n     * @param stopFunc The callback stop function\r\n     */\r\n    public forEachTextInlineElement(callback: (textInlineElement: InlineElement) => any) {\r\n        // We cache all text sections read so far\r\n        // Every time when you ask for textSection, we start with the cached first\r\n        // and resort to further reading once we exhausted with the cache\r\n        if (!this.inlineElements.some(callback)) {\r\n            this.traverse(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get first non textual inline element before position\r\n     * @returns First non textutal inline element before position or null if no such element exists\r\n     */\r\n    public getNearestNonTextInlineElement(): InlineElement {\r\n        if (!this.nearestNonTextInlineElement) {\r\n            this.traverse(() => this.nearestNonTextInlineElement);\r\n        }\r\n\r\n        return this.nearestNonTextInlineElement;\r\n    }\r\n\r\n    /**\r\n     * Continue traversing backward till stop condition is met or begin of block is reached\r\n     */\r\n    private traverse(callback: (inlineElement: InlineElement) => any) {\r\n        this.traverser =\r\n            this.traverser || ContentTraverser.createBlockTraverser(this.rootNode, this.position);\r\n\r\n        if (!this.traverser || this.traversingComplete) {\r\n            return;\r\n        }\r\n\r\n        let previousInline = this.traverser.getPreviousInlineElement();\r\n        while (!this.traversingComplete) {\r\n            this.inlineBefore = this.inlineBefore || previousInline;\r\n\r\n            if (previousInline && previousInline.isTextualInlineElement()) {\r\n                let textContent = previousInline.getTextContent();\r\n\r\n                // build the word before position if it is not built yet\r\n                if (!this.word) {\r\n                    // Match on the white space, the portion after space is on the index of 1 of the matched result\r\n                    // (index at 0 is whole match result, index at 1 is the word)\r\n                    let matches = WHITESPACE_REGEX.exec(textContent);\r\n                    if (matches && matches.length == 2) {\r\n                        this.word = matches[1] + this.text;\r\n                    }\r\n                }\r\n\r\n                this.text = textContent + this.text;\r\n                this.inlineElements.push(previousInline);\r\n\r\n                // Check if stop condition is met\r\n                if (callback && callback(previousInline)) {\r\n                    break;\r\n                }\r\n            } else {\r\n                this.nearestNonTextInlineElement = previousInline;\r\n                this.traversingComplete = true;\r\n                if (!this.word) {\r\n                    // if parsing is done, whatever we get so far in this.cachedText should also be in this.cachedWordBeforeCursor\r\n                    this.word = this.text;\r\n                }\r\n\r\n                // When a non-textual inline element, or null is seen, we consider parsing complete\r\n                // TODO: we may need to change this if there is a future need to parse beyond text, i.e.\r\n                // we have aaa @someone bbb<position>, and we want to read the text before @someone\r\n                break;\r\n            }\r\n\r\n            previousInline = this.traverser.getPreviousInlineElement();\r\n        }\r\n    }\r\n}\r\n","import { DefaultFormat } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Apply format to an HTML element\r\n * @param element The HTML element to apply format to\r\n * @param format The format to apply\r\n */\r\nexport default function applyFormat(element: HTMLElement, format: DefaultFormat, isDarkMode?: boolean) {\r\n    if (format) {\r\n        let elementStyle = element.style;\r\n        let { fontFamily, fontSize, textColor, textColors, backgroundColor, backgroundColors, bold, italic, underline } = format;\r\n\r\n        if (fontFamily) {\r\n            elementStyle.fontFamily = fontFamily;\r\n        }\r\n        if (fontSize) {\r\n            elementStyle.fontSize = fontSize;\r\n        }\r\n        if (textColor || textColors) {\r\n            if (textColors && isDarkMode) {\r\n                element.dataset.ogsc = textColors.lightModeColor;\r\n            }\r\n            elementStyle.color = textColor;\r\n        }\r\n        if (backgroundColor || backgroundColors) {\r\n            if (backgroundColors && isDarkMode) {\r\n                element.dataset.ogsb = backgroundColors.lightModeColor;\r\n            }\r\n            elementStyle.backgroundColor = backgroundColor;\r\n        }\r\n        if (bold) {\r\n            elementStyle.fontWeight = 'bold';\r\n        }\r\n        if (italic) {\r\n            elementStyle.fontStyle = 'italic';\r\n        }\r\n        if (underline) {\r\n            elementStyle.textDecoration = 'underline';\r\n        }\r\n    }\r\n}\r\n","import { Browser } from './Browser';\r\nimport { ClipboardItems } from 'roosterjs-editor-types';\r\n\r\n// HTML header to indicate where is the HTML content started from.\r\n// Sample header:\r\n// Version:0.9\r\n// StartHTML:71\r\n// EndHTML:170\r\n// StartFragment:140\r\n// EndFragment:160\r\n// StartSelection:140\r\n// EndSelection:160\r\nconst CLIPBOARD_HTML_HEADER_REGEX = /^Version:[0-9\\.]+\\s+StartHTML:\\s*([0-9]+)\\s+EndHTML:\\s*([0-9]+)\\s+/i;\r\n\r\ninterface WindowForIE extends Window {\r\n    clipboardData: DataTransfer;\r\n}\r\n\r\n/**\r\n * Extract a Clipboard event\r\n * @param event The paste event\r\n * @param callback Callback function when data is ready\r\n * @param fallbackHtmlRetriever If direct HTML retriving is not support (e.g. Internet Explorer), as a fallback,\r\n * using this helper function to retrieve HTML content\r\n * @returns An object with the following properties:\r\n *  types: Available types from the clipboard event\r\n *  text: Plain text from the clipboard event\r\n *  image: Image file from the clipboard event\r\n *  html: Html string from the clipboard event. When set to null, it means there's no HTML found from the event.\r\n *   When set to undefined, it means can't retrieve HTML string, there may be HTML string but direct retrieving is\r\n *   not supported by browser.\r\n */\r\nexport default function extractClipboardEvent(\r\n    event: ClipboardEvent,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    let dataTransfer =\r\n        event.clipboardData ||\r\n        (<WindowForIE>(<Node>event.target).ownerDocument.defaultView).clipboardData;\r\n    let result: ClipboardItems = {\r\n        types: dataTransfer.types ? [].slice.call(dataTransfer.types) : [],\r\n        text: dataTransfer.getData('text'),\r\n        image: getImage(dataTransfer),\r\n        html: undefined,\r\n    };\r\n\r\n    if (event.clipboardData && event.clipboardData.items) {\r\n        event.preventDefault();\r\n        let items = event.clipboardData.items;\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n            if (item.type && item.type.indexOf('text/html') == 0) {\r\n                item.getAsString(html => {\r\n                    result.html = Browser.isEdge ? workaroundForEdge(html) : html;\r\n                    callback(result);\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        // No HTML content found, set html to null\r\n        result.html = null;\r\n    }\r\n\r\n    callback(result);\r\n}\r\n\r\nfunction getImage(dataTransfer: DataTransfer): File {\r\n    // Chrome, Firefox, Edge support dataTransfer.items\r\n    let fileCount = dataTransfer.items ? dataTransfer.items.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let item = dataTransfer.items[i];\r\n        if (item.type && item.type.indexOf('image/') == 0) {\r\n            return item.getAsFile();\r\n        }\r\n    }\r\n    // IE, Safari support dataTransfer.files\r\n    fileCount = dataTransfer.files ? dataTransfer.files.length : 0;\r\n    for (let i = 0; i < fileCount; i++) {\r\n        let file = dataTransfer.files.item(i);\r\n        if (file.type && file.type.indexOf('image/') == 0) {\r\n            return file;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Edge sometimes doesn't remove the headers, which cause we paste more things then expected.\r\n * So we need to remove it in our code\r\n * @param html The HTML string got from clipboard\r\n */\r\nfunction workaroundForEdge(html: string) {\r\n    let headerValues = CLIPBOARD_HTML_HEADER_REGEX.exec(html);\r\n\r\n    if (headerValues && headerValues.length == 3) {\r\n        let start = parseInt(headerValues[1]);\r\n        let end = parseInt(headerValues[2]);\r\n        if (start > 0 && end > start) {\r\n            html = html.substring(start, end);\r\n        }\r\n    }\r\n\r\n    return html;\r\n}\r\n","import { DocumentCommand, PendableFormatState } from 'roosterjs-editor-types';\n\n/**\n * Names of Pendable formats\n */\nexport type PendableFormatNames = keyof PendableFormatState;\n\n/**\n * A map from pendable format name to document command\n */\nexport const PendableFormatCommandMap: { [key in PendableFormatNames]: DocumentCommand } = {\n    /**\n     * Bold\n     */\n    isBold: DocumentCommand.Bold,\n\n    /**\n     * Italic\n     */\n    isItalic: DocumentCommand.Italic,\n\n    /**\n     * Underline\n     */\n    isUnderline: DocumentCommand.Underline,\n\n    /**\n     * StrikeThrough\n     */\n    isStrikeThrough: DocumentCommand.StrikeThrough,\n\n    /**\n     * Subscript\n     */\n    isSubscript: DocumentCommand.Subscript,\n\n    /**\n     * Superscript\n     */\n    isSuperscript: DocumentCommand.Superscript,\n};\n\n/**\n * Get Pendable Format State at cursor.\n * @param document The HTML Document to get format state from\n * @returns A PendableFormatState object which contains the values of pendable format states\n */\nexport default function getPendableFormatState(document: Document): PendableFormatState {\n    let keys = Object.keys(PendableFormatCommandMap) as PendableFormatNames[];\n\n    return keys.reduce(\n        (state, key) => {\n            state[key] = document.queryCommandState(PendableFormatCommandMap[key]);\n            return state;\n        },\n        <PendableFormatState>{}\n    );\n}\n","import { LinkData } from 'roosterjs-editor-types';\r\n\r\ninterface LinkMatchRule {\r\n    match: RegExp;\r\n    except?: RegExp;\r\n    normalizeUrl?: (url: string) => string;\r\n}\r\n\r\n// http exclude matching regex\r\n// invalid URL example (in paricular on IE and Edge):\r\n// - http://www.bing.com%00, %00 before ? (question mark) is considered invalid. IE/Edge throws invalid argument exception\r\n// - http://www.bing.com%1, %1 is invalid\r\n// - http://www.bing.com%g, %g is invalid (IE and Edge expects a two hex value after a %)\r\n// - http://www.bing.com%, % as ending is invalid (IE and Edge expects a two hex value after a %)\r\n// All above % cases if they're after ? (question mark) is then considered valid again\r\n// Similar for @, it needs to be after / (forward slash), or ? (question mark). Otherwise IE/Edge will throw security exception\r\n// - http://www.bing.com@name, @name before ? (question mark) is considered invalid\r\n// - http://www.bing.com/@name, is valid sine it is after / (forward slash)\r\n// - http://www.bing.com?@name, is also valid sinve it is after ? (question mark)\r\n// The regex below is essentially a break down of:\r\n// ^[^?]+%[^0-9a-f]+ => to exclude URL like www.bing.com%%\r\n// ^[^?]+%[0-9a-f][^0-9a-f]+ => to exclude URL like www.bing.com%1\r\n// ^[^?]+%00 => to exclude URL like www.bing.com%00\r\n// ^[^?]+%$ => to exclude URL like www.bing.com%\r\n// ^https?:\\/\\/[^?\\/]+@ => to exclude URL like http://www.bing.com@name\r\n// ^www\\.[^?\\/]+@ => to exclude URL like www.bing.com@name\r\n// , => to exclude url like www.bing,,com\r\nconst httpExcludeRegEx = /^[^?]+%[^0-9a-f]+|^[^?]+%[0-9a-f][^0-9a-f]+|^[^?]+%00|^[^?]+%$|^https?:\\/\\/[^?\\/]+@|^www\\.[^?\\/]+@/i;\r\n\r\n// via https://tools.ietf.org/html/rfc1035 Page 7\r\nconst labelRegEx = '[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'; // We're using case insensitive regexes below so don't bother including A-Z\r\nconst domainNameRegEx = `(?:${labelRegEx}\\\\.)*${labelRegEx}`;\r\nconst domainPortRegEx = `${domainNameRegEx}(?:\\\\:[0-9]+)?`;\r\nconst domainPortWithUrlRegEx = `${domainPortRegEx}(?:[\\\\/\\\\?]\\\\S*)?`;\r\n\r\nconst linkMatchRules: { [schema: string]: LinkMatchRule } = {\r\n    http: {\r\n        match: new RegExp(\r\n            `^(?:microsoft-edge:)?http:\\\\/\\\\/${domainPortWithUrlRegEx}|www\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        except: httpExcludeRegEx,\r\n        normalizeUrl: url =>\r\n            new RegExp('^(?:microsoft-edge:)?http:\\\\/\\\\/', 'i').test(url) ? url : 'http://' + url,\r\n    },\r\n    https: {\r\n        match: new RegExp(`^(?:microsoft-edge:)?https:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i'),\r\n        except: httpExcludeRegEx,\r\n    },\r\n    mailto: { match: new RegExp('^mailto:\\\\S+@\\\\S+\\\\.\\\\S+', 'i') },\r\n    notes: { match: new RegExp('^notes:\\\\/\\\\/\\\\S+', 'i') },\r\n    file: { match: new RegExp('^file:\\\\/\\\\/\\\\/?\\\\S+', 'i') },\r\n    unc: { match: new RegExp('^\\\\\\\\\\\\\\\\\\\\S+', 'i') },\r\n    ftp: {\r\n        match: new RegExp(\r\n            `^ftp:\\\\/\\\\/${domainPortWithUrlRegEx}|ftp\\\\.${domainPortWithUrlRegEx}`,\r\n            'i'\r\n        ),\r\n        normalizeUrl: url => (new RegExp('^ftp:\\\\/\\\\/', 'i').test(url) ? url : 'ftp://' + url),\r\n    },\r\n    news: { match: new RegExp(`^news:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    telnet: { match: new RegExp(`^telnet:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n    gopher: { match: new RegExp(`^gopher:\\\\/\\\\/${domainPortWithUrlRegEx}`, 'i') },\r\n    wais: { match: new RegExp(`^wais:(\\\\/\\\\/)?${domainPortWithUrlRegEx}`, 'i') },\r\n};\r\n\r\n/**\r\n * Try to match a given string with link match rules, return matched link\r\n * @param url Input url to match\r\n * @param option Link match option, exact or partial. If it is exact match, we need\r\n * to check the length of matched link and url\r\n * @param rules Optional link match rules, if not passed, only the default link match\r\n * rules will be applied\r\n * @returns The matched link data, or null if no match found.\r\n * The link data includes an original url and a normalized url\r\n */\r\nexport default function matchLink(url: string): LinkData {\r\n    if (url) {\r\n        for (let schema of Object.keys(linkMatchRules)) {\r\n            let rule = linkMatchRules[schema];\r\n            let matches = url.match(rule.match);\r\n            if (matches && matches[0] == url && (!rule.except || !rule.except.test(url))) {\r\n                return {\r\n                    scheme: schema,\r\n                    originalUrl: url,\r\n                    normalizedUrl: rule.normalizeUrl ? rule.normalizeUrl(url) : url,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n","import changeElementTag from './changeElementTag';\nimport findClosestElementAncestor from './findClosestElementAncestor';\nimport getTagOfNode from './getTagOfNode';\nimport isPositionAtBeginningOf from '../selection/isPositionAtBeginningOf';\nimport isVoidHtmlElement from './isVoidHtmlElement';\nimport Position from '../selection/Position';\nimport unwrap from './unwrap';\nimport VTable from '../table/VTable';\nimport wrap from './wrap';\nimport { NodePosition, NodeType, PositionType } from 'roosterjs-editor-types';\n\n/**\n * Adjust the given position and return a better position (if any) or the given position\n * which will be the best one for inserting the given node.\n * @param root Root node of the scope\n * @param nodeToInsert The node about to be inserted\n * @param position The original position to insert the node\n */\nexport default function adjustNodeInsertPosition(\n    root: Node,\n    nodeToInsert: Node,\n    position: NodePosition\n): NodePosition {\n    let rootNodeToInsert = nodeToInsert;\n\n    if (rootNodeToInsert.nodeType == NodeType.DocumentFragment) {\n        let rootNodes = (<Node[]>[].slice.call(rootNodeToInsert.childNodes)).filter(\n            n => getTagOfNode(n) != 'BR'\n        );\n        rootNodeToInsert = rootNodes.length == 1 ? rootNodes[0] : null;\n    }\n\n    let tag = getTagOfNode(rootNodeToInsert);\n    let hasBrNextToRoot = tag && getTagOfNode(rootNodeToInsert.nextSibling) == 'BR';\n    let listItem = findClosestElementAncestor(position.node, root, 'LI');\n    let listNode = listItem && findClosestElementAncestor(listItem, root, 'OL,UL');\n    let tdNode = findClosestElementAncestor(position.node, root, 'TD,TH');\n    let trNode = tdNode && findClosestElementAncestor(tdNode, root, 'TR');\n\n    if (tag == 'LI') {\n        tag = listNode ? getTagOfNode(listNode) : 'UL';\n        rootNodeToInsert = wrap(rootNodeToInsert, tag);\n    }\n\n    if ((tag == 'OL' || tag == 'UL') && getTagOfNode(rootNodeToInsert.firstChild) == 'LI') {\n        let shouldInsertListAsText = !rootNodeToInsert.firstChild.nextSibling && !hasBrNextToRoot;\n\n        if (hasBrNextToRoot && rootNodeToInsert.parentNode) {\n            rootNodeToInsert.parentNode.removeChild(rootNodeToInsert.nextSibling);\n        }\n\n        if (shouldInsertListAsText) {\n            unwrap(rootNodeToInsert.firstChild);\n            unwrap(rootNodeToInsert);\n        } else if (getTagOfNode(listNode) == tag) {\n            unwrap(rootNodeToInsert);\n            position = new Position(\n                listItem,\n                isPositionAtBeginningOf(position, listItem)\n                    ? PositionType.Before\n                    : PositionType.After\n            );\n        }\n    } else if (tag == 'TABLE' && trNode) {\n        // When inserting a table into a table, if these tables have the same column count, and\n        // current position is at beginning of a row, then merge these two tables\n        let newTable = new VTable(<HTMLTableElement>rootNodeToInsert);\n        let currentTable = new VTable(<HTMLTableCellElement>tdNode);\n        if (\n            currentTable.col == 0 &&\n            tdNode == currentTable.getCell(currentTable.row, 0).td &&\n            newTable.cells[0] &&\n            newTable.cells[0].length == currentTable.cells[0].length &&\n            isPositionAtBeginningOf(position, tdNode)\n        ) {\n            if (\n                getTagOfNode(rootNodeToInsert.firstChild) == 'TBODY' &&\n                !rootNodeToInsert.firstChild.nextSibling\n            ) {\n                unwrap(rootNodeToInsert.firstChild);\n            }\n            unwrap(rootNodeToInsert);\n            position = new Position(trNode, PositionType.After);\n        }\n    }\n\n    if (getTagOfNode(position.node) == 'P') {\n        // Insert into a P tag may cause issues when the inserted content contains any block element.\n        // Change P tag to DIV to make sure it works well\n        let pos = position.normalize();\n        let div = changeElementTag(<HTMLElement>position.node, 'div');\n        if (pos.node != div) {\n            position = pos;\n        }\n    }\n\n    if (isVoidHtmlElement(position.node)) {\n        position = new Position(\n            position.node,\n            position.isAtEnd ? PositionType.After : PositionType.Before\n        );\n    }\n\n    return position;\n}\n","import { DocumentPosition } from 'roosterjs-editor-types';\r\nimport { QueryScope } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Query HTML elements in the container by a selector string\r\n * @param container Container element to query from\r\n * @param selector Selector string to query\r\n * @param forEachCallback An optional callback to be invoked on each node in query result\r\n * @param scope The scope of the query, default value is QueryScope.Body\r\n * @param range The selection range to query with. This is required when scope is not Body\r\n * @returns HTML Element array of the query result\r\n */\r\nexport default function queryElements(\r\n    container: HTMLElement,\r\n    selector: string,\r\n    forEachCallback?: (node: HTMLElement) => any,\r\n    scope: QueryScope = QueryScope.Body,\r\n    range?: Range\r\n): HTMLElement[] {\r\n    if (!container || !selector) {\r\n        return [];\r\n    }\r\n\r\n    let elements = [].slice.call(container.querySelectorAll(selector)) as HTMLElement[];\r\n\r\n    if (scope != QueryScope.Body && range) {\r\n        elements = elements.filter(element =>\r\n            isIntersectWithNodeRange(element, range, scope == QueryScope.InSelection)\r\n        );\r\n    }\r\n\r\n    if (forEachCallback) {\r\n        elements.forEach(forEachCallback);\r\n    }\r\n    return elements;\r\n}\r\n\r\nfunction isIntersectWithNodeRange(\r\n    node: Node,\r\n    range: Range,\r\n    nodeContainedByRangeOnly: boolean\r\n): boolean {\r\n    let startPosition = node.compareDocumentPosition(range.startContainer);\r\n    let endPosition = node.compareDocumentPosition(range.endContainer);\r\n    let targetPositions = [DocumentPosition.Same, DocumentPosition.Contains];\r\n\r\n    if (!nodeContainedByRangeOnly) {\r\n        targetPositions.push(DocumentPosition.ContainedBy);\r\n    }\r\n\r\n    return (\r\n        checkPosition(startPosition, targetPositions) || // intersectStart\r\n        checkPosition(endPosition, targetPositions) || // intersectEnd\r\n        (checkPosition(startPosition, [DocumentPosition.Preceding]) && // Contains\r\n            checkPosition(endPosition, [DocumentPosition.Following]) &&\r\n            !checkPosition(endPosition, [DocumentPosition.ContainedBy]))\r\n    );\r\n}\r\n\r\nfunction checkPosition(position: DocumentPosition, targets: DocumentPosition[]): boolean {\r\n    return targets.some(target =>\r\n        target == DocumentPosition.Same\r\n            ? position == DocumentPosition.Same\r\n            : (position & target) == target\r\n    );\r\n}\r\n","import ContentTraverser from '../contentTraverser/ContentTraverser';\n\n/**\n * get block element's text content.\n * @param rootNode Root node that the get the textContent of.\n * @returns text content of given text content.\n */\nexport default function getTextContent(rootNode: Node): string {\n    const traverser = ContentTraverser.createBodyTraverser(rootNode);\n    let block = traverser && traverser.currentBlockElement;\n    let textContent: string[] = [];\n\n    while (block) {\n        textContent.push(block.getTextContent());\n        block = traverser.getNextBlockElement();\n    }\n\n    return textContent.join('\\n');\n}\n","import createRange from './createRange';\r\nimport { NodePosition, NodeType, Rect } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get bounding rect of this position\r\n * @param position The positioin to get rect from\r\n */\r\nexport default function getPositionRect(position: NodePosition): Rect {\r\n    if (!position) {\r\n        return null;\r\n    }\r\n\r\n    let range = createRange(position);\r\n\r\n    // 1) try to get rect using range.getBoundingClientRect()\r\n    let rect = range.getBoundingClientRect && normalizeRect(range.getBoundingClientRect());\r\n\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 2) try to get rect using range.getClientRects\r\n    position = position.normalize();\r\n    const rects = range.getClientRects && range.getClientRects();\r\n    rect = rects && rects.length == 1 && normalizeRect(rects[0]);\r\n    if (rect) {\r\n        return rect;\r\n    }\r\n\r\n    // 3) if node is text node, try inserting a SPAN and get the rect of SPAN for others\r\n    if (position.node.nodeType == NodeType.Text) {\r\n        let span = document.createElement('SPAN');\r\n        span.innerHTML = '\\u200b';\r\n        range = createRange(position);\r\n        range.insertNode(span);\r\n        rect = span.getBoundingClientRect && normalizeRect(span.getBoundingClientRect());\r\n        span.parentNode.removeChild(span);\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    // 4) try getBoundingClientRect on element\r\n    let element = position.element;\r\n    if (element && element.getBoundingClientRect) {\r\n        rect = normalizeRect(element.getBoundingClientRect());\r\n        if (rect) {\r\n            return rect;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction normalizeRect(clientRect: ClientRect): Rect {\r\n    // A ClientRect of all 0 is possible. i.e. chrome returns a ClientRect of 0 when the cursor is on an empty p\r\n    // We validate that and only return a rect when the passed in ClientRect is valid\r\n    let { left, right, top, bottom } = clientRect || <ClientRect>{};\r\n    return left + right + top + bottom > 0\r\n        ? {\r\n              left: Math.round(left),\r\n              right: Math.round(right),\r\n              top: Math.round(top),\r\n              bottom: Math.round(bottom),\r\n          }\r\n        : null;\r\n}\r\n","import contains from '../utils/contains';\r\nimport Position from './Position';\r\nimport { NodePosition, NodeType, SelectionPath } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get path of the given selection range related to the given rootNode\r\n * @param rootNode The root node where the path start from\r\n * @param range The range of selection\r\n */\r\nexport default function getSelectionPath(rootNode: HTMLElement, range: Range): SelectionPath {\r\n    if (!range) {\r\n        return null;\r\n    }\r\n\r\n    let selectionPath: SelectionPath = {\r\n        start: getPositionPath(Position.getStart(range), rootNode),\r\n        end: getPositionPath(Position.getEnd(range), rootNode),\r\n    };\r\n\r\n    return selectionPath;\r\n}\r\n\r\n/**\r\n * Get the path of the node relative to rootNode.\r\n * The path of the node is an array of integer indecies into the childNodes of the given node.\r\n *\r\n * The node path will be what the node path will be on a _normalized_ dom\r\n * (e.g. empty text nodes will be ignored and adjacent text nodes will be concatenated)\r\n *\r\n * @param rootNode the node the path will be relative to\r\n * @param position the position to get indexes from. Follows the same semantics\r\n * as selectionRange (if node is of type Text, it is an offset into the text of that node.\r\n * If node is of type Element, it is the index of a child in that Element node.)\r\n */\r\nfunction getPositionPath(position: NodePosition, rootNode: HTMLElement): number[] {\r\n    if (!position || !rootNode) {\r\n        return [];\r\n    }\r\n\r\n    let { node, offset } = position;\r\n    let result: number[] = [];\r\n    let parent: Node;\r\n\r\n    if (!contains(rootNode, node, true)) {\r\n        return [];\r\n    }\r\n\r\n    if (node.nodeType == NodeType.Text) {\r\n        parent = node.parentNode;\r\n        while (node.previousSibling && node.previousSibling.nodeType == NodeType.Text) {\r\n            offset += node.previousSibling.nodeValue.length;\r\n            node = node.previousSibling;\r\n        }\r\n        result.unshift(offset);\r\n    } else {\r\n        parent = node;\r\n        node = node.childNodes[offset];\r\n    }\r\n\r\n    do {\r\n        offset = 0;\r\n        let isPreviousText = false;\r\n\r\n        for (let c: Node = parent.firstChild; c && c != node; c = c.nextSibling) {\r\n            if (c.nodeType == NodeType.Text) {\r\n                if (c.nodeValue.length == 0 || isPreviousText) {\r\n                    continue;\r\n                }\r\n\r\n                isPreviousText = true;\r\n            } else {\r\n                isPreviousText = false;\r\n            }\r\n\r\n            offset++;\r\n        }\r\n\r\n        result.unshift(offset);\r\n        node = parent;\r\n        parent = parent.parentNode;\r\n    } while (node && node != rootNode);\r\n\r\n    return result;\r\n}\r\n","import ContentEditFeatures, { getDefaultContentEditFeatures } from './ContentEditFeatures';\r\nimport { AutoLink, UnlinkWhenBackspaceAfterLink } from './features/autoLinkFeatures';\r\nimport { DefaultShortcut } from './features/shortcutFeatures';\r\nimport { Editor, EditorPlugin, GenericContentEditFeature } from 'roosterjs-editor-core';\r\nimport { InsertLineBeforeStructuredNodeFeature } from './features/insertLineBeforeStructuredNodeFeature';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\nimport { TabInTable, UpDownInTable } from './features/tableFeatures';\r\n\r\nimport {\r\n    AutoBullet,\r\n    IndentWhenTab,\r\n    OutdentWhenShiftTab,\r\n    MergeInNewLine,\r\n    OutdentWhenBackOn1stEmptyLine,\r\n    OutdentWhenEnterOnEmptyLine,\r\n    getSmartOrderedList,\r\n} from './features/listFeatures';\r\nimport {\r\n    UnquoteWhenBackOnEmpty1stLine,\r\n    UnquoteWhenEnterOnEmptyLine,\r\n} from './features/quoteFeatures';\r\n\r\n/**\r\n * An editor plugin to handle content edit event.\r\n * The following cases are included:\r\n * 1. Auto increase/decrease indentation on Tab, Shift+tab\r\n * 2. Enter, Backspace on empty list item\r\n * 3. Enter, Backspace on empty blockquote line\r\n * 4. Auto bullet/numbering\r\n * 5. Auto link\r\n * 6. Tab in table\r\n * 7. Up/Down in table\r\n * 8. Manage list style\r\n */\r\nexport default class ContentEdit implements EditorPlugin {\r\n    private editor: Editor;\r\n\r\n    /**\r\n     * Create instance of ContentEdit plugin\r\n     * @param features An optional feature set to determine which features the plugin should provide\r\n     */\r\n    constructor(private featureSet?: ContentEditFeatures) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ContentEdit';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin\r\n     * @param editor The editor instance\r\n     */\r\n    public initialize(editor: Editor): void {\r\n        this.editor = editor;\r\n        this.getFilteredFeatures().forEach(feature => this.editor.addContentEditFeature(feature));\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose(): void {\r\n        this.editor = null;\r\n    }\r\n\r\n    private getFilteredFeatures(): GenericContentEditFeature<PluginEvent>[] {\r\n        let featureSet = this.featureSet || getDefaultContentEditFeatures();\r\n        let allFeatures: {\r\n            [key in keyof Partial<ContentEditFeatures>]: GenericContentEditFeature<PluginEvent>\r\n        } = {\r\n            indentWhenTab: IndentWhenTab,\r\n            outdentWhenShiftTab: OutdentWhenShiftTab,\r\n            outdentWhenBackspaceOnEmptyFirstLine: OutdentWhenBackOn1stEmptyLine,\r\n            outdentWhenEnterOnEmptyLine: OutdentWhenEnterOnEmptyLine,\r\n            mergeInNewLineWhenBackspaceOnFirstChar: MergeInNewLine,\r\n            unquoteWhenBackspaceOnEmptyFirstLine: UnquoteWhenBackOnEmpty1stLine,\r\n            unquoteWhenEnterOnEmptyLine: UnquoteWhenEnterOnEmptyLine,\r\n            tabInTable: TabInTable,\r\n            upDownInTable: UpDownInTable,\r\n            insertLineBeforeStructuredNodeFeature: InsertLineBeforeStructuredNodeFeature,\r\n            autoBullet: AutoBullet,\r\n            autoLink: AutoLink,\r\n            unlinkWhenBackspaceAfterLink: UnlinkWhenBackspaceAfterLink,\r\n            defaultShortcut: DefaultShortcut,\r\n            smartOrderedList: getSmartOrderedList(featureSet.smartOrderedListStyles),\r\n        };\r\n        let keys = Object.keys(allFeatures) as (keyof ContentEditFeatures)[];\r\n        return keys.filter(key => featureSet[key]).map(key => allFeatures[key]);\r\n    }\r\n}\r\n","import { LinkInlineElement, matchLink } from 'roosterjs-editor-dom';\r\nimport { removeLink, replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    ChangeSource,\r\n    LinkData,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginKeyboardEvent,\r\n    ClipboardData,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Editor,\r\n    cacheGetEventData,\r\n    cacheGetContentSearcher,\r\n    clearContentSearcherCache,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\n\r\n/**\r\n * When user type, they may end a link with a puncatuation, i.e. www.bing.com;\r\n * we need to trim off the trailing puncatuation before turning it to link match\r\n */\r\nconst TRAILING_PUNCTUATION_REGEX = /[.+=\\s:;\"',>]+$/i;\r\nconst MINIMUM_LENGTH = 5;\r\n\r\n/**\r\n * AutoLink edit feature, provides the ability to automatically convert text user typed or pasted\r\n * in hyperlink format into a real hyperlink\r\n */\r\nexport const AutoLink: GenericContentEditFeature<PluginEvent> = {\r\n    keys: [Keys.ENTER, Keys.SPACE, Keys.CONTENTCHANGED],\r\n    shouldHandleEvent: cacheGetLinkData,\r\n    handleEvent: autoLink,\r\n};\r\n\r\n/**\r\n * UnlinkWhenBackspaceAfterLink edit feature, provides the ability to convert a hyperlink back into text\r\n * if user presses BACKSPACE right after a hyperlink\r\n */\r\nexport const UnlinkWhenBackspaceAfterLink: GenericContentEditFeature<PluginKeyboardEvent> = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: hasLinkBeforeCursor,\r\n    handleEvent: (event, editor) => {\r\n        event.rawEvent.preventDefault();\r\n        removeLink(editor);\r\n    },\r\n};\r\n\r\nfunction cacheGetLinkData(event: PluginEvent, editor: Editor): LinkData {\r\n    return event.eventType == PluginEventType.KeyDown ||\r\n        (event.eventType == PluginEventType.ContentChanged && event.source == ChangeSource.Paste)\r\n        ? cacheGetEventData(event, 'LINK_DATA', () => {\r\n              // First try to match link from the whole paste string from the plain text in clipboard.\r\n              // This helps when we paste a link next to some existing character, and the text we got\r\n              // from clipboard will only contain what we pasted, any existing characters will not\r\n              // be included.\r\n              let clipboardData =\r\n                  event.eventType == PluginEventType.ContentChanged &&\r\n                  event.source == ChangeSource.Paste &&\r\n                  (event.data as ClipboardData);\r\n              let link = matchLink((clipboardData.text || '').trim());\r\n              let searcher = cacheGetContentSearcher(event, editor);\r\n\r\n              // In case the matched link is already inside a <A> tag, we do a range search.\r\n              // getRangeFromText will return null if the given text is already in a LinkInlineElement\r\n              if (link && searcher.getRangeFromText(link.originalUrl, false /*exactMatch*/)) {\r\n                  return link;\r\n              }\r\n\r\n              let word = searcher && searcher.getWordBefore();\r\n              if (word && word.length > MINIMUM_LENGTH) {\r\n                  // Check for trailing punctuation\r\n                  let trailingPunctuations = word.match(TRAILING_PUNCTUATION_REGEX);\r\n                  let trailingPunctuation = (trailingPunctuations || [])[0] || '';\r\n                  let candidate = word.substring(0, word.length - trailingPunctuation.length);\r\n\r\n                  // Do special handling for ')', '}', ']'\r\n                  ['()', '{}', '[]'].forEach(str => {\r\n                      if (\r\n                          candidate[candidate.length - 1] == str[1] &&\r\n                          candidate.indexOf(str[0]) < 0\r\n                      ) {\r\n                          candidate = candidate.substr(0, candidate.length - 1);\r\n                      }\r\n                  });\r\n\r\n                  // Match and replace in editor\r\n                  return matchLink(candidate);\r\n              }\r\n              return null;\r\n          })\r\n        : null;\r\n}\r\n\r\nfunction hasLinkBeforeCursor(event: PluginKeyboardEvent, editor: Editor): boolean {\r\n    let contentSearcher = cacheGetContentSearcher(event, editor);\r\n    let inline = contentSearcher.getInlineElementBefore();\r\n    return inline instanceof LinkInlineElement;\r\n}\r\n\r\nfunction autoLink(event: PluginEvent, editor: Editor) {\r\n    let anchor = editor.getDocument().createElement('a');\r\n    let linkData = cacheGetLinkData(event, editor);\r\n\r\n    // Need to get searcher before we enter the async callback since the callback can happen when cursor is moved to next line\r\n    // and at that time a new searcher won't be able to find the link text to replace\r\n    let searcher = editor.getContentSearcherOfCursor();\r\n    anchor.textContent = linkData.originalUrl;\r\n    anchor.href = linkData.normalizedUrl;\r\n\r\n    editor.runAsync(() => {\r\n        editor.performAutoComplete(() => {\r\n            replaceWithNode(editor, linkData.originalUrl, anchor, false /* exactMatch */, searcher);\r\n\r\n            // The content at cursor has changed. Should also clear the cursor data cache\r\n            clearContentSearcherCache(event);\r\n            return anchor;\r\n        }, ChangeSource.AutoLink);\r\n    });\r\n}\r\n","import applyInlineStyle from '../utils/applyInlineStyle';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { FontSizeChange } from 'roosterjs-editor-types';\r\nimport { getComputedStyle } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Default font size sequence, in pt. Suggest editor UI use this sequence as your font size list,\r\n * So that when increase/decrease font size, the font size can match the sequence of your font size picker\r\n */\r\nexport const FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\r\nconst MIN_FONT_SIZE = 1;\r\nconst MAX_FONT_SIZE = 1000;\r\n\r\n/**\r\n * Increase or decrease font size in selection\r\n * @param editor The editor instance\r\n * @param change Whether increase or decrease font size\r\n * @param fontSizes A sorted font size array, in pt. Default value is FONT_SIZES\r\n */\r\nexport default function changeFontSize(\r\n    editor: Editor,\r\n    change: FontSizeChange,\r\n    fontSizes: number[] = FONT_SIZES\r\n) {\r\n    let changeBase: 1 | -1 = change == FontSizeChange.Increase ? 1 : -1;\r\n    applyInlineStyle(editor, element => {\r\n        let pt = parseFloat(getComputedStyle(element, 'font-size'));\r\n        element.style.fontSize = getNewFontSize(pt, changeBase, fontSizes) + 'pt';\r\n        let lineHeight = getComputedStyle(element, 'line-height');\r\n        if (lineHeight != 'normal') {\r\n            element.style.lineHeight = 'normal';\r\n        }\r\n    });\r\n}\r\n\r\nexport function getNewFontSize(pt: number, changeBase: 1 | -1, fontSizes: number[]): number {\r\n    pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n    let last = fontSizes[fontSizes.length - 1];\r\n    if (pt <= fontSizes[0]) {\r\n        pt = Math.max(pt + changeBase, MIN_FONT_SIZE);\r\n    } else if (pt > last || (pt == last && changeBase == 1)) {\r\n        pt = pt / 10;\r\n        pt = changeBase == 1 ? Math.floor(pt) : Math.ceil(pt);\r\n        pt = Math.min(Math.max((pt + changeBase) * 10, last), MAX_FONT_SIZE);\r\n    } else if (changeBase == 1) {\r\n        for (let i = 0; i < fontSizes.length; i++) {\r\n            if (pt < fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = fontSizes.length - 1; i >= 0; i--) {\r\n            if (pt > fontSizes[i]) {\r\n                pt = fontSizes[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return pt;\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, NodeType } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport {\r\n    getTagOfNode,\r\n    isBlockElement,\r\n    unwrap,\r\n    wrap,\r\n    splitBalancedNodeRange,\r\n} from 'roosterjs-editor-dom';\r\n\r\nexport const TAGS_TO_UNWRAP = 'B,I,U,STRONG,EM,SUB,SUP,STRIKE,FONT,CENTER,H1,H2,H3,H4,H5,H6,UL,OL,LI,SPAN,P,BLOCKQUOTE,CODE,S,PRE'.split(\r\n    ','\r\n);\r\nexport const TAGS_TO_STOP_UNWRAP = ['TD', 'TH', 'TR', 'TABLE', 'TBODY', 'THEAD'];\r\nexport const ATTRIBUTES_TO_PRESERVE = ['href'];\r\n\r\n/**\r\n * Clear all formats of selected blocks.\r\n * When selection is collapsed, only clear format of current block.\r\n * @param editor The editor instance\r\n * @param tagsToUnwrap Optional. A string array contains HTML tags in upper case which we will unwrap when clear format\r\n * @param tagsToStopUnwrap Optional. A string array contains HTML tags in upper case which we will stop unwrap if these tags are hit\r\n */\r\nexport default function clearBlockFormat(\r\n    editor: Editor,\r\n    tagsToUnwrap: string[] = TAGS_TO_UNWRAP,\r\n    tagsToStopUnwrap: string[] = TAGS_TO_STOP_UNWRAP,\r\n    attributesToPreserve: string[] = ATTRIBUTES_TO_PRESERVE\r\n) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        let groups: {\r\n            first?: HTMLElement;\r\n            last?: HTMLElement;\r\n            td?: HTMLElement;\r\n        }[] = [{}];\r\n        let stopUnwrapSelector = tagsToStopUnwrap.join(',');\r\n\r\n        // 1. Collapse the selected blocks and get first and last element\r\n        collapseSelectedBlocks(editor, element => {\r\n            let group = groups[groups.length - 1];\r\n            let td = editor.getElementAtCursor(stopUnwrapSelector, element);\r\n            if (td != group.td && group.first) {\r\n                groups.push((group = {}));\r\n            }\r\n\r\n            group.td = td;\r\n            group.first = group.first || element;\r\n            group.last = element;\r\n        });\r\n\r\n        groups\r\n            .filter(group => group.first)\r\n            .forEach(group => {\r\n                // 2. Collapse with first and last element to make them under same parent\r\n                let nodes = editor.collapseNodes(group.first, group.last, true /*canSplitParent*/);\r\n\r\n                // 3. Continue collapse until we can't collapse any more (hit root node, or a table)\r\n                if (canCollapse(tagsToStopUnwrap, nodes[0])) {\r\n                    while (\r\n                        editor.contains(nodes[0].parentNode) &&\r\n                        canCollapse(tagsToStopUnwrap, nodes[0].parentNode as HTMLElement)\r\n                    ) {\r\n                        nodes = [splitBalancedNodeRange(nodes)];\r\n                    }\r\n                }\r\n\r\n                // 4. Clear formats of the nodes\r\n                nodes.forEach(node =>\r\n                    clearNodeFormat(\r\n                        node as HTMLElement,\r\n                        tagsToUnwrap,\r\n                        tagsToStopUnwrap,\r\n                        attributesToPreserve\r\n                    )\r\n                );\r\n\r\n                // 5. Clear CSS of container TD if exist\r\n                if (group.td) {\r\n                    let styles = group.td.getAttribute('style') || '';\r\n                    let styleArray = styles.split(';');\r\n                    styleArray = styleArray.filter(\r\n                        style =>\r\n                            style\r\n                                .trim()\r\n                                .toLowerCase()\r\n                                .indexOf('border') == 0\r\n                    );\r\n                    styles = styleArray.join(';');\r\n                    if (styles) {\r\n                        group.td.setAttribute('style', styles);\r\n                    } else {\r\n                        group.td.removeAttribute('style');\r\n                    }\r\n                }\r\n            });\r\n\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction clearNodeFormat(\r\n    node: Node,\r\n    tagsToUnwrap: string[],\r\n    tagsToStopUnwrap: string[],\r\n    attributesToPreserve: string[]\r\n): boolean {\r\n    if (node.nodeType != NodeType.Element || getTagOfNode(node) == 'BR') {\r\n        return false;\r\n    }\r\n\r\n    // 1. Recursively clear format of all its child nodes\r\n    let allChildrenAreBlock = ([].slice.call(node.childNodes) as Node[])\r\n        .map(n => clearNodeFormat(n, tagsToUnwrap, tagsToStopUnwrap, attributesToPreserve))\r\n        .reduce((previousValue, value) => previousValue && value, true);\r\n\r\n    if (!canCollapse(tagsToStopUnwrap, node)) {\r\n        return false;\r\n    }\r\n\r\n    let returnBlockElement = isBlockElement(node);\r\n\r\n    // 2. If we should unwrap this tag, put it into an array and unwrap it later\r\n    if (tagsToUnwrap.indexOf(getTagOfNode(node)) >= 0 || allChildrenAreBlock) {\r\n        if (returnBlockElement && !allChildrenAreBlock) {\r\n            wrap(node);\r\n        }\r\n        unwrap(node);\r\n    } else {\r\n        // 3. Otherwise, remove all attributes\r\n        clearAttribute(node as HTMLElement, attributesToPreserve);\r\n    }\r\n\r\n    return returnBlockElement;\r\n}\r\n\r\nfunction clearAttribute(element: HTMLElement, attributesToPreserve: string[]) {\r\n    for (let attr of [].slice.call(element.attributes) as Attr[]) {\r\n        if (\r\n            attributesToPreserve.indexOf(attr.name.toLowerCase()) < 0 &&\r\n            attr.name.indexOf('data-') != 0\r\n        ) {\r\n            element.removeAttribute(attr.name);\r\n        }\r\n    }\r\n}\r\n\r\nfunction canCollapse(tagsToStopUnwrap: string[], node: Node) {\r\n    return tagsToStopUnwrap.indexOf(getTagOfNode(node)) < 0;\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport setBackgroundColor from './setBackgroundColor';\r\nimport setFontName from './setFontName';\r\nimport setFontSize from './setFontSize';\r\nimport setTextColor from './setTextColor';\r\nimport toggleBold from './toggleBold';\r\nimport toggleItalic from './toggleItalic';\r\nimport toggleUnderline from './toggleUnderline';\r\nimport { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst STYLES_TO_REMOVE = ['font', 'text-decoration', 'color', 'background'];\r\n\r\n/**\r\n * Clear the format in current selection, after cleaning, the format will be\r\n * changed to default format. The format that get cleaned include B/I/U/font name/\r\n * font size/text color/background color/align left/align right/align center/superscript/subscript\r\n * @param editor The editor instance\r\n */\r\nexport default function clearFormat(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, DocumentCommand.RemoveFormat);\r\n\r\n        editor.queryElements('[class]', QueryScope.OnSelection, node =>\r\n            node.removeAttribute('class')\r\n        );\r\n\r\n        const defaultFormat = editor.getDefaultFormat();\r\n        const isDefaultFormatEmpty = Object.keys(defaultFormat).length === 0;\r\n        editor.queryElements('[style]', QueryScope.InSelection, node => {\r\n            STYLES_TO_REMOVE.forEach(style => node.style.removeProperty(style));\r\n\r\n            // when default format is empty, keep the HTML minimum by removing style attribute if there's no style\r\n            // (note: because default format is empty, we're not adding style back in)\r\n            if (isDefaultFormatEmpty && node.getAttribute('style') === '') {\r\n                node.removeAttribute('style');\r\n            }\r\n        });\r\n\r\n        if (!isDefaultFormatEmpty) {\r\n            if (defaultFormat.fontFamily) {\r\n                setFontName(editor, defaultFormat.fontFamily);\r\n            }\r\n            if (defaultFormat.fontSize) {\r\n                setFontSize(editor, defaultFormat.fontSize);\r\n            }\r\n            if (defaultFormat.textColor) {\r\n                if (defaultFormat.textColors) {\r\n                    setTextColor(editor, defaultFormat.textColors);\r\n                } else {\r\n                    setTextColor(editor, defaultFormat.textColor);\r\n                }\r\n            }\r\n            if (defaultFormat.backgroundColor) {\r\n                if (defaultFormat.backgroundColors) {\r\n                    setBackgroundColor(editor, defaultFormat.backgroundColors);\r\n                } else {\r\n                    setBackgroundColor(editor, defaultFormat.backgroundColor);\r\n                }\r\n            }\r\n            if (defaultFormat.bold) {\r\n                toggleBold(editor);\r\n            }\r\n            if (defaultFormat.italic) {\r\n                toggleItalic(editor);\r\n            }\r\n            if (defaultFormat.underline) {\r\n                toggleUnderline(editor);\r\n            }\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { matchLink } from 'roosterjs-editor-dom';\r\n\r\n// Regex matching Uri scheme\r\nconst URI_REGEX = /^[a-zA-Z]+:/i;\r\n// Regex matching begin of email address\r\nconst MAILTO_REGEX = /^[\\w.%+-]+@/i;\r\n// Regex matching begin of ftp, i.e. ftp.microsoft.com\r\nconst FTP_REGEX = /^ftp\\./i;\r\nconst TEMP_TITLE = 'istemptitle';\r\n\r\nfunction applyLinkPrefix(url: string): string {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n\r\n    // Add link prefix per rule:\r\n    // (a) if the url always starts with a URI scheme, leave it as it is\r\n    // (b) if the url is an email address, xxx@... add mailto: prefix\r\n    // (c) if the url starts with ftp., add ftp:// prefix\r\n    // (d) rest, add http:// prefix\r\n    let prefix = '';\r\n    if (url.search(URI_REGEX) < 0) {\r\n        if (url.search(MAILTO_REGEX) == 0) {\r\n            prefix = 'mailto:';\r\n        } else if (url.search(FTP_REGEX) == 0) {\r\n            prefix = 'ftp://';\r\n        } else {\r\n            // fallback to http://\r\n            prefix = 'http://';\r\n        }\r\n    }\r\n\r\n    return prefix + url;\r\n}\r\n\r\n/**\r\n * Insert a hyperlink at cursor.\r\n * When there is a selection, hyperlink will be applied to the selection,\r\n * otherwise a hyperlink will be inserted to the cursor position.\r\n * @param editor Editor object\r\n * @param link Link address, can be http(s), mailto, notes, file, unc, ftp, news, telnet, gopher, wais.\r\n * When protocol is not specified, a best matched protocol will be predicted.\r\n * @param altText Optional alt text of the link, will be shown when hover on the link\r\n * @param displayText Optional display text for the link.\r\n * If specified, the display text of link will be replaced with this text.\r\n * If not specified and there wasn't a link, the link url will be used as display text.\r\n */\r\nexport default function createLink(\r\n    editor: Editor,\r\n    link: string,\r\n    altText?: string,\r\n    displayText?: string\r\n) {\r\n    editor.focus();\r\n    let url = link ? link.trim() : '';\r\n    if (url) {\r\n        let linkData = matchLink(url);\r\n        // matchLink can match most links, but not all, i.e. if you pass link a link as \"abc\", it won't match\r\n        // we know in that case, users will want to insert a link like http://abc\r\n        // so we have separate logic in applyLinkPrefix to add link prefix depending on the format of the link\r\n        // i.e. if the link starts with something like abc@xxx, we will add mailto: prefix\r\n        // if the link starts with ftp.xxx, we will add ftp:// link. For more, see applyLinkPrefix\r\n        let normalizedUrl = linkData ? linkData.normalizedUrl : applyLinkPrefix(url);\r\n        let originalUrl = linkData ? linkData.originalUrl : url;\r\n\r\n        editor.addUndoSnapshot(() => {\r\n            let range = editor.getSelectionRange();\r\n            let anchor: HTMLAnchorElement = null;\r\n            if (range && range.collapsed) {\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n\r\n                // If there is already a link, just change its href\r\n                if (anchor) {\r\n                    anchor.href = normalizedUrl;\r\n                    // Change text content if it is specified\r\n                    updateAnchorDisplayText(anchor, displayText);\r\n                } else {\r\n                    anchor = editor.getDocument().createElement('A') as HTMLAnchorElement;\r\n                    anchor.textContent = displayText || originalUrl;\r\n                    anchor.href = normalizedUrl;\r\n                    editor.insertNode(anchor);\r\n                }\r\n            } else {\r\n                // the selection is not collapsed, use browser execCommand\r\n                editor.getDocument().execCommand(DocumentCommand.CreateLink, false, normalizedUrl);\r\n                anchor = getAnchorNodeAtCursor(editor);\r\n                updateAnchorDisplayText(anchor, displayText);\r\n            }\r\n            if (altText && anchor) {\r\n                // Hack: Ideally this should be done by HyperLink plugin.\r\n                // We make a hack here since we don't have an event to notify HyperLink plugin\r\n                // before we apply the link.\r\n                anchor.removeAttribute(TEMP_TITLE);\r\n                anchor.title = altText;\r\n            }\r\n            return anchor;\r\n        }, ChangeSource.CreateLink);\r\n    }\r\n}\r\n\r\nfunction getAnchorNodeAtCursor(editor: Editor): HTMLAnchorElement {\r\n    return editor.queryElements('a[href]', QueryScope.OnSelection)[0] as HTMLAnchorElement;\r\n}\r\n\r\nfunction updateAnchorDisplayText(anchor: HTMLAnchorElement, displayText: string) {\r\n    if (displayText && anchor.textContent != displayText) {\r\n        anchor.textContent = displayText;\r\n    }\r\n}\r\n","import { cacheGetElementAtCursor, Editor } from 'roosterjs-editor-core';\r\nimport { getComputedStyles, getTagOfNode, Position } from 'roosterjs-editor-dom';\r\nimport { getPendableFormatState } from 'roosterjs-editor-dom';\r\nimport {\r\n    ElementBasedFormatState,\r\n    FormatState,\r\n    PluginEvent,\r\n    QueryScope,\r\n    StyleBasedFormatState,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Get element based Format State at cursor\r\n * @param editor The editor instance\r\n * @param event (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns An ElementBasedFormatState object\r\n */\r\nexport function getElementBasedFormatState(\r\n    editor: Editor,\r\n    event?: PluginEvent\r\n): ElementBasedFormatState {\r\n    let listTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'OL,UL'));\r\n    let headerTag = getTagOfNode(cacheGetElementAtCursor(editor, event, 'H1,H2,H3,H4,H5,H6'));\r\n\r\n    return {\r\n        isBullet: listTag == 'UL',\r\n        isNumbering: listTag == 'OL',\r\n        headerLevel: (headerTag && parseInt(headerTag[1])) || 0,\r\n\r\n        canUnlink: !!editor.queryElements('a[href]', QueryScope.OnSelection)[0],\r\n        canAddImageAltText: !!editor.queryElements('img', QueryScope.OnSelection)[0],\r\n        isBlockQuote: !!editor.queryElements('blockquote', QueryScope.OnSelection)[0],\r\n    };\r\n}\r\n\r\n/**\r\n * Get style based Format State at cursor\r\n * @param editor The editor instance\r\n * @returns A StyleBasedFormatState object\r\n */\r\nexport function getStyleBasedFormatState(editor: Editor): StyleBasedFormatState {\r\n    let range = editor.getSelectionRange();\r\n    let node = range && Position.getStart(range).normalize().node;\r\n    let styles = node ? getComputedStyles(node) : [];\r\n    return {\r\n        fontName: styles[0],\r\n        fontSize: styles[1],\r\n        textColor: styles[2],\r\n        backgroundColor: styles[3],\r\n    };\r\n}\r\n\r\n/**\r\n * Get format state at cursor\r\n * A format state is a collection of all format related states, e.g.,\r\n * bold, italic, underline, font name, font size, etc.\r\n * @param editor The editor instance\r\n * @param event (Optional) The plugin event, it stores the event cached data for looking up.\r\n * In this function the event cache is used to get list state and header level. If not passed,\r\n * it will query the node within selection to get the info\r\n * @returns The format state at cursor\r\n */\r\nexport default function getFormatState(editor: Editor, event?: PluginEvent): FormatState {\r\n    return {\r\n        ...getPendableFormatState(editor.getDocument()),\r\n        ...getElementBasedFormatState(editor, event),\r\n        ...getStyleBasedFormatState(editor),\r\n        canUndo: editor.canUndo(),\r\n        canRedo: editor.canRedo(),\r\n    };\r\n}\r\n","import adjustBrowserBehavior from './adjustBrowserBehavior';\nimport createEditorCore from './createEditorCore';\nimport EditorCore from '../interfaces/EditorCore';\nimport EditorOptions from '../interfaces/EditorOptions';\nimport getColorNormalizedContent from '../darkMode/getColorNormalizedContent';\nimport mapPluginEvents from './mapPluginEvents';\nimport { calculateDefaultFormat } from '../coreAPI/calculateDefaultFormat';\nimport { convertContentToDarkMode } from '../darkMode/convertContentToDarkMode';\nimport { GenericContentEditFeature } from '../interfaces/ContentEditFeature';\nimport {\n    BlockElement,\n    ChangeSource,\n    ContentPosition,\n    DarkModeOptions,\n    DefaultFormat,\n    InlineElement,\n    InsertOption,\n    NodePosition,\n    NodeType,\n    PluginEvent,\n    PluginEventData,\n    PluginEventFromType,\n    PluginEventType,\n    PositionType,\n    QueryScope,\n    SelectionPath,\n    Rect,\n} from 'roosterjs-editor-types';\nimport {\n    collapseNodes,\n    contains,\n    ContentTraverser,\n    createRange,\n    findClosestElementAncestor,\n    fromHtml,\n    getBlockElementAtNode,\n    getTextContent,\n    getInlineElementAtNode,\n    getPositionRect,\n    getRangeFromSelectionPath,\n    getSelectionPath,\n    getTagOfNode,\n    isNodeEmpty,\n    Position,\n    PositionContentSearcher,\n    queryElements,\n    wrap,\n} from 'roosterjs-editor-dom';\n\n/**\n * RoosterJs core editor class\n */\nexport default class Editor {\n    private core: EditorCore;\n    private eventDisposers: (() => void)[];\n    private contenteditableChanged: boolean;\n\n    //#region Lifecycle\n\n    /**\n     * Creates an instance of Editor\n     * @param contentDiv The DIV HTML element which will be the container element of editor\n     * @param options An optional options object to customize the editor\n     */\n    constructor(contentDiv: HTMLDivElement, options: EditorOptions = {}) {\n        // 1. Make sure all parameters are valid\n        if (getTagOfNode(contentDiv) != 'DIV') {\n            throw new Error('contentDiv must be an HTML DIV element');\n        }\n\n        // 2. Store options values to local variables\n        this.core = createEditorCore(contentDiv, options);\n\n        // 3. Initialize plugins\n        this.core.plugins.forEach(plugin => plugin.initialize(this));\n\n        // 4. Ensure initial content and its format\n        this.setContent(options.initialContent || contentDiv.innerHTML || '');\n\n        // 5. Create event handler to bind DOM events\n        this.eventDisposers = mapPluginEvents(this.core);\n\n        // 6. Add additional content edit features to the editor if specified\n        if (options.additionalEditFeatures) {\n            options.additionalEditFeatures.forEach(feature => this.addContentEditFeature(feature));\n        }\n\n        // 7. Make the container editable and set its selection styles\n        if (!options.omitContentEditableAttributeChanges && !contentDiv.isContentEditable) {\n            contentDiv.setAttribute('contenteditable', 'true');\n            let styles = contentDiv.style;\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = 'text';\n            this.contenteditableChanged = true;\n        }\n\n        // 8. Do proper change for browsers to disable some browser-specified behaviors.\n        adjustBrowserBehavior();\n\n        // 9. Let plugins know that we are ready\n        this.triggerPluginEvent(PluginEventType.EditorReady, {}, true /*broadcast*/);\n\n        // 10. Before give editor to user, make sure there is at least one DIV element to accept typing\n        this.core.corePlugins.typeInContainer.ensureTypeInElement(\n            new Position(contentDiv, PositionType.Begin)\n        );\n    }\n\n    /**\n     * Dispose this editor, dispose all plugins and custom data\n     */\n    public dispose(): void {\n        this.triggerPluginEvent(PluginEventType.BeforeDispose, {}, true /*broadcast*/);\n\n        this.core.plugins.forEach(plugin => plugin.dispose());\n        this.eventDisposers.forEach(disposer => disposer());\n        this.eventDisposers = null;\n\n        for (let key of Object.keys(this.core.customData)) {\n            let data = this.core.customData[key];\n            if (data && data.disposer) {\n                data.disposer(data.value);\n            }\n            delete this.core.customData[key];\n        }\n\n        if (this.contenteditableChanged) {\n            let styles = this.core.contentDiv.style;\n            styles.userSelect = styles.msUserSelect = styles.webkitUserSelect = '';\n            this.core.contentDiv.removeAttribute('contenteditable');\n        }\n\n        this.core = null;\n    }\n\n    /**\n     * Get whether this editor is disposed\n     * @returns True if editor is disposed, otherwise false\n     */\n    public isDisposed(): boolean {\n        return !this.core;\n    }\n\n    //#endregion\n\n    //#region Node API\n\n    /**\n     * Insert node into editor\n     * @param node The node to insert\n     * @param option Insert options. Default value is:\n     *  position: ContentPosition.SelectionStart\n     *  updateCursor: true\n     *  replaceSelection: true\n     *  insertOnNewLine: false\n     * @returns true if node is inserted. Otherwise false\n     */\n    public insertNode(node: Node, option?: InsertOption): boolean {\n        // DocumentFragment type nodes become empty after they're inserted.\n        // Therefore, we get the list of nodes to transform prior to their insertion.\n        const darkModeOptions = this.getDarkModeOptions();\n        const darkModeTransform = this.isDarkMode()\n            ? convertContentToDarkMode(\n                  node,\n                  darkModeOptions && darkModeOptions.onExternalContentTransform\n                      ? darkModeOptions.onExternalContentTransform\n                      : undefined\n              )\n            : null;\n\n        const result = node ? this.core.api.insertNode(this.core, node, option) : false;\n\n        if (result && darkModeTransform) {\n            darkModeTransform();\n        }\n        return result;\n    }\n\n    /**\n     * Delete a node from editor content\n     * @param node The node to delete\n     * @returns true if node is deleted. Otherwise false\n     */\n    public deleteNode(node: Node): boolean {\n        // Only remove the node when it falls within editor\n        if (node && this.contains(node)) {\n            node.parentNode.removeChild(node);\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replace a node in editor content with another node\n     * @param existingNode The existing node to be replaced\n     * @param new node to replace to\n     * @returns true if node is replaced. Otherwise false\n     */\n    public replaceNode(existingNode: Node, toNode: Node): boolean {\n        // Only replace the node when it falls within editor\n        if (existingNode && toNode && this.contains(existingNode)) {\n            existingNode.parentNode.replaceChild(toNode, existingNode);\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get InlineElement at given node\n     * @param node The node to create InlineElement\n     * @returns The InlineElement result\n     */\n    public getInlineElementAtNode(node: Node): InlineElement {\n        return getInlineElementAtNode(this.core.contentDiv, node);\n    }\n\n    /**\n     * Get BlockElement at given node\n     * @param node The node to create InlineElement\n     * @returns The BlockElement result\n     */\n    public getBlockElementAtNode(node: Node): BlockElement {\n        return getBlockElementAtNode(this.core.contentDiv, node);\n    }\n\n    /**\n     * Check if the node falls in the editor content\n     * @param node The node to check\n     * @returns True if the given node is in editor content, otherwise false\n     */\n    public contains(node: Node): boolean;\n\n    /**\n     * Check if the range falls in the editor content\n     * @param range The range to check\n     * @returns True if the given range is in editor content, otherwise false\n     */\n    public contains(range: Range): boolean;\n\n    public contains(arg: Node | Range): boolean {\n        return contains(this.core.contentDiv, <Node>arg);\n    }\n\n    /**\n     * Query HTML elements in editor by tag name\n     * @param tag Tag name of the element to query\n     * @param forEachCallback An optional callback to be invoked on each element in query result\n     * @returns HTML Element array of the query result\n     */\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\n        tag: T,\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\n    ): HTMLElementTagNameMap[T][];\n\n    /**\n     * Query HTML elements in editor by a selector string\n     * @param selector Selector string to query\n     * @param forEachCallback An optional callback to be invoked on each node in query result\n     * @returns HTML Element array of the query result\n     */\n    public queryElements<T extends HTMLElement = HTMLElement>(\n        selector: string,\n        forEachCallback?: (node: T) => any\n    ): T[];\n\n    /**\n     * Query HTML elements with the given scope by tag name\n     * @param tag Tag name of the element to query\n     * @param scope The scope of the query, default value is QueryScope.Body\n     * @param forEachCallback An optional callback to be invoked on each element in query result\n     * @returns HTML Element list of the query result\n     */\n    public queryElements<T extends keyof HTMLElementTagNameMap>(\n        tag: T,\n        scope: QueryScope,\n        forEachCallback?: (node: HTMLElementTagNameMap[T]) => any\n    ): HTMLElementTagNameMap[T][];\n\n    /**\n     * Query HTML elements with the given scope by a selector string\n     * @param selector Selector string to query\n     * @param scope The scope of the query, default value is QueryScope.Body\n     * @param forEachCallback An optional callback to be invoked on each element in query result\n     * @returns HTML Element array of the query result\n     */\n    public queryElements<T extends HTMLElement = HTMLElement>(\n        selector: string,\n        scope: QueryScope,\n        forEachCallback?: (node: T) => any\n    ): T[];\n\n    public queryElements(\n        selector: string,\n        scopeOrCallback: QueryScope | ((node: Node) => any) = QueryScope.Body,\n        callback?: (node: Node) => any\n    ) {\n        let scope = scopeOrCallback instanceof Function ? QueryScope.Body : scopeOrCallback;\n        callback = scopeOrCallback instanceof Function ? scopeOrCallback : callback;\n\n        let range = scope == QueryScope.Body ? null : this.getSelectionRange();\n        return queryElements(this.core.contentDiv, selector, callback, scope, range);\n    }\n\n    /**\n     * Collapse nodes within the given start and end nodes to their common ascenstor node,\n     * split parent nodes if necessary\n     * @param start The start node\n     * @param end The end node\n     * @param canSplitParent True to allow split parent node there are nodes before start or after end under the same parent\n     * and the returned nodes will be all nodes from start trhough end after splitting\n     * False to disallow split parent\n     * @returns When cansplitParent is true, returns all node from start through end after splitting,\n     * otherwise just return start and end\n     */\n    public collapseNodes(start: Node, end: Node, canSplitParent: boolean): Node[] {\n        return collapseNodes(this.core.contentDiv, start, end, canSplitParent);\n    }\n\n    //#endregion\n\n    //#region Content API\n\n    /**\n     * Check whether the editor contains any visible content\n     * @param trim Whether trime the content string before check. Default is false\n     * @returns True if there's no visible content, otherwise false\n     */\n    public isEmpty(trim?: boolean): boolean {\n        return isNodeEmpty(this.core.contentDiv, trim);\n    }\n\n    /**\n     * Get current editor content as HTML string\n     * @param triggerExtractContentEvent Whether trigger ExtractContent event to all plugins\n     * before return. Use this parameter to remove any temporary content added by plugins.\n     * @param includeSelectionMarker Set to true if need include selection marker inside the content.\n     * When restore this content, editor will set the selection to the position marked by these markers\n     * @returns HTML string representing current editor content\n     */\n    public getContent(\n        triggerExtractContentEvent: boolean = true,\n        includeSelectionMarker: boolean = false\n    ): string {\n        let contentDiv = this.core.contentDiv;\n        let content = contentDiv.innerHTML;\n        let selectionPath: SelectionPath;\n\n        if (\n            includeSelectionMarker &&\n            (selectionPath = getSelectionPath(contentDiv, this.getSelectionRange()))\n        ) {\n            content += `<!--${JSON.stringify(selectionPath)}-->`;\n        }\n\n        if (triggerExtractContentEvent) {\n            content = this.triggerPluginEvent(\n                PluginEventType.ExtractContent,\n                { content },\n                true /*broadcast*/\n            ).content;\n        }\n\n        if (this.core.inDarkMode) {\n            content = getColorNormalizedContent(content);\n        }\n\n        return content;\n    }\n\n    /**\n     * Get plain text content inside editor\n     * @returns The text content inside editor\n     */\n    public getTextContent(): string {\n        return getTextContent(this.core.contentDiv);\n    }\n\n    /**\n     * Set HTML content to this editor. All existing content will be replaced. A ContentChanged event will be triggered\n     * @param content HTML content to set in\n     * @param triggerContentChangedEvent True to trigger a ContentChanged event. Default value is true\n     */\n    public setContent(content: string, triggerContentChangedEvent: boolean = true) {\n        let contentDiv = this.core.contentDiv;\n        let contentChanged = false;\n        if (contentDiv.innerHTML != content) {\n            contentDiv.innerHTML = content || '';\n            contentChanged = true;\n\n            let pathComment = contentDiv.lastChild;\n\n            if (pathComment && pathComment.nodeType == NodeType.Comment) {\n                try {\n                    let path = JSON.parse(pathComment.nodeValue) as SelectionPath;\n                    this.deleteNode(pathComment);\n                    let range = getRangeFromSelectionPath(contentDiv, path);\n                    this.select(range);\n                } catch {}\n            }\n        }\n\n        // Convert content even if it hasn't changed.\n        if (this.core.inDarkMode) {\n            const darkModeOptions = this.getDarkModeOptions();\n            const convertFunction = convertContentToDarkMode(\n                contentDiv,\n                darkModeOptions && darkModeOptions.onExternalContentTransform\n                    ? darkModeOptions.onExternalContentTransform\n                    : undefined,\n                true /* skipRootElement */\n            );\n            if (convertFunction) {\n                convertFunction();\n                contentChanged = true;\n            }\n        }\n\n        if (triggerContentChangedEvent && contentChanged) {\n            this.triggerContentChangedEvent();\n        }\n    }\n\n    /**\n     * Insert HTML content into editor\n     * @param HTML content to insert\n     * @param option Insert options. Default value is:\n     *  position: ContentPosition.SelectionStart\n     *  updateCursor: true\n     *  replaceSelection: true\n     *  insertOnNewLine: false\n     */\n    public insertContent(content: string, option?: InsertOption) {\n        if (content) {\n            let allNodes = fromHtml(content, this.core.document);\n            // If it is to insert on new line, and there are more than one node in the collection, wrap all nodes with\n            // a parent DIV before calling insertNode on each top level sub node. Otherwise, every sub node may get wrapped\n            // separately to show up on its own line\n            if (option && option.insertOnNewLine && allNodes.length > 0) {\n                allNodes = [wrap(allNodes)];\n            }\n            for (let i = 0; i < allNodes.length; i++) {\n                this.insertNode(allNodes[i], option);\n            }\n        }\n    }\n\n    //#endregion\n\n    //#region Focus and Selection\n\n    /**\n     * Get current selection range from Editor.\n     * It does a live pull on the selection, if nothing retrieved, return whatever we have in cache.\n     * @returns current selection range, or null if editor never got focus before\n     */\n    public getSelectionRange(): Range {\n        return this.core.api.getSelectionRange(this.core, true /*tryGetFromCache*/);\n    }\n\n    /**\n     * Check if focus is in editor now\n     * @returns true if focus is in editor, otherwise false\n     */\n    public hasFocus(): boolean {\n        return this.core.api.hasFocus(this.core);\n    }\n\n    /**\n     * Focus to this editor, the selection was restored to where it was before, no unexpected scroll.\n     */\n    public focus() {\n        this.core.api.focus(this.core);\n    }\n\n    /**\n     * Select content by range\n     * @param range The range to select\n     * @returns True if content is selected, otherwise false\n     */\n    public select(range: Range): boolean;\n\n    /**\n     * Select content by Position and collapse to this position\n     * @param position The position to select\n     * @returns True if content is selected, otherwise false\n     */\n    public select(position: NodePosition): boolean;\n\n    /**\n     * Select content by a start and end position\n     * @param start The start position to select\n     * @param end The end position to select, if this is the same with start, the selection will be collapsed\n     * @returns True if content is selected, otherwise false\n     */\n    public select(start: NodePosition, end: NodePosition): boolean;\n\n    /**\n     * Select content by node\n     * @param node The node to select\n     * @returns True if content is selected, otherwise false\n     */\n    public select(node: Node): boolean;\n\n    /**\n     * Select content by node and offset, and collapse to this position\n     * @param node The node to select\n     * @param offset The offset of node to select, can be a number or value of PositionType\n     * @returns True if content is selected, otherwise false\n     */\n    public select(node: Node, offset: number | PositionType): boolean;\n\n    /**\n     * Select content by start and end nodes and offsets\n     * @param startNode The node to select start from\n     * @param startOffset The offset to select start from\n     * @param endNode The node to select end to\n     * @param endOffset The offset to select end to\n     * @returns True if content is selected, otherwise false\n     */\n    public select(\n        startNode: Node,\n        startOffset: number | PositionType,\n        endNode: Node,\n        endOffset: number | PositionType\n    ): boolean;\n\n    public select(arg1: any, arg2?: any, arg3?: any, arg4?: any): boolean {\n        let range = arg1 instanceof Range ? arg1 : createRange(arg1, arg2, arg3, arg4);\n        return this.contains(range) && this.core.api.selectRange(this.core, range);\n    }\n\n    /**\n     * Get current selection\n     * @return current selection object\n     */\n    public getSelection(): Selection {\n        return this.core.document.defaultView.getSelection();\n    }\n\n    /**\n     * Save the current selection in editor so that when focus again, the selection can be restored\n     */\n    public saveSelectionRange() {\n        this.core.cachedSelectionRange = this.core.api.getSelectionRange(\n            this.core,\n            false /*tryGetFromCache*/\n        );\n    }\n\n    /**\n     * Restore the saved selection range and clear it\n     */\n    public restoreSavedRange() {\n        this.select(this.core.cachedSelectionRange);\n        this.core.cachedSelectionRange = null;\n    }\n\n    /**\n     * Get current focused position. Return null if editor doesn't have focus at this time.\n     */\n    public getFocusedPosition(): NodePosition {\n        let sel = this.getSelection();\n        if (this.contains(sel && sel.focusNode)) {\n            return new Position(sel.focusNode, sel.focusOffset);\n        }\n\n        let range = this.getSelectionRange();\n        if (range) {\n            return Position.getStart(range);\n        }\n\n        return null;\n    }\n\n    /**\n     * Get a rect representing the location of the cursor.\n     * @returns a Rect object representing cursor location\n     */\n    public getCursorRect(): Rect {\n        let position = this.getFocusedPosition();\n        return position && getPositionRect(position);\n    }\n\n    /**\n     * Get an HTML element from current cursor position.\n     * When expectedTags is not specified, return value is the current node (if it is HTML element)\n     * or its parent node (if current node is a Text node).\n     * When expectedTags is specified, return value is the first anscestor of current node which has\n     * one of the expected tags.\n     * If no element found within editor by the given tag, return null.\n     * @param selector Optional, an HTML selector to find HTML element with.\n     * @param startFrom Start search from this node. If not specified, start from current focused position\n     */\n    public getElementAtCursor(selector?: string, startFrom?: Node): HTMLElement {\n        if (!startFrom) {\n            let position = this.getFocusedPosition();\n            startFrom = position && position.node;\n        }\n        return startFrom && findClosestElementAncestor(startFrom, this.core.contentDiv, selector);\n    }\n\n    //#endregion\n\n    //#region EVENT API\n\n    /**\n     * Add a custom DOM event handler to handle events not handled by roosterjs.\n     * Caller need to take the responsibility to dispose the handler properly\n     * @param eventName DOM event name to handle\n     * @param handler Handler callback\n     * @returns A dispose function. Call the function to dispose this event handler\n     */\n    public addDomEventHandler(eventName: string, handler: (event: UIEvent) => void): () => void;\n\n    /**\n     * Add a bunch of custom DOM event handler to handle events not handled by roosterjs.\n     * Caller need to take the responsibility to dispose the handler properly\n     * @param handlerMap A event name => event handler map\n     * @returns A dispose function. Call the function to dispose all event handlers added by this function\n     */\n    public addDomEventHandler(handlerMap: {\n        [eventName: string]: (event: UIEvent) => void;\n    }): () => void;\n\n    public addDomEventHandler(\n        nameOrMap:\n            | string\n            | {\n                  [eventName: string]: (event: UIEvent) => void;\n              },\n        handler?: (event: UIEvent) => void\n    ): () => void {\n        if (nameOrMap instanceof Object) {\n            let handlers = Object.keys(nameOrMap)\n                .map(\n                    eventName =>\n                        nameOrMap[eventName] &&\n                        this.core.api.attachDomEvent(\n                            this.core,\n                            eventName,\n                            null /*pluginEventType*/,\n                            nameOrMap[eventName]\n                        )\n                )\n                .filter(x => x);\n            return () => handlers.forEach(handler => handler());\n        } else {\n            return this.core.api.attachDomEvent(\n                this.core,\n                nameOrMap,\n                null /*pluginEventType*/,\n                handler\n            );\n        }\n    }\n\n    /**\n     * Trigger an event to be dispatched to all plugins\n     * @param eventType Type of the event\n     * @param data data of the event with given type, this is the rest part of PluginEvent with the given type\n     * @param broadcast indicates if the event needs to be dispatched to all plugins\n     * True means to all, false means to allow exclusive handling from one plugin unless no one wants that\n     * @returns the event object which is really passed into plugins. Some plugin may modify the event object so\n     * the result of this function provides a chance to read the modified result\n     */\n    public triggerPluginEvent<T extends PluginEventType>(\n        eventType: T,\n        data: PluginEventData<T>,\n        broadcast?: boolean\n    ): PluginEventFromType<T> {\n        let event = ({\n            eventType,\n            ...data,\n        } as any) as PluginEventFromType<T>;\n        this.core.api.triggerEvent(this.core, event, broadcast);\n\n        return event;\n    }\n\n    /**\n     * @deprecated Use triggerPluginEvent instead\n     */\n    public triggerEvent(pluginEvent: PluginEvent, broadcast: boolean = true) {\n        this.core.api.triggerEvent(this.core, pluginEvent, broadcast);\n    }\n\n    /**\n     * Trigger a ContentChangedEvent\n     * @param source Source of this event, by default is 'SetContent'\n     * @param data additional data for this event\n     */\n    public triggerContentChangedEvent(\n        source: ChangeSource | string = ChangeSource.SetContent,\n        data?: any\n    ) {\n        this.triggerPluginEvent(PluginEventType.ContentChanged, {\n            source,\n            data,\n        });\n    }\n\n    //#endregion\n\n    //#region Undo API\n\n    /**\n     * Undo last edit operation\n     */\n    public undo() {\n        this.focus();\n        this.core.corePlugins.undo.undo();\n    }\n\n    /**\n     * Redo next edit operation\n     */\n    public redo() {\n        this.focus();\n        this.core.corePlugins.undo.redo();\n    }\n\n    /**\n     * Add undo snapshot, and execute a format callback function, then add another undo snapshot, then trigger\n     * ContentChangedEvent with given change source.\n     * If this function is called nested, undo snapshot will only be added in the outside one\n     * @param callback The callback function to perform formatting, returns a data object which will be used as\n     * the data field in ContentChangedEvent if changeSource is not null.\n     * @param changeSource The change source to use when fire ContentChangedEvent. When the value is not null,\n     * a ContentChangedEvent will be fired with change source equal to this value\n     */\n    public addUndoSnapshot(\n        callback?: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\n        changeSource?: ChangeSource | string\n    ) {\n        this.core.api.editWithUndo(this.core, callback, changeSource);\n    }\n\n    /**\n     * Perform an auto complete action in the callback, save a snapsnot of content before the action,\n     * and trigger ContentChangedEvent with the change source if specified\n     * @param callback The auto complete callback, return value will be used as data field of ContentChangedEvent\n     * @param changeSource Chagne source of ContentChangedEvent. If not passed, no ContentChangedEvent will be  triggered\n     */\n    public performAutoComplete(callback: () => any, changeSource?: ChangeSource | string) {\n        this.core.corePlugins.edit.performAutoComplete(callback, changeSource);\n    }\n\n    /**\n     * Whether there is an available undo snapshot\n     */\n    public canUndo(): boolean {\n        return this.core.corePlugins.undo.canUndo();\n    }\n\n    /**\n     * Whether there is an available redo snapshot\n     */\n    public canRedo(): boolean {\n        return this.core.corePlugins.undo.canRedo();\n    }\n\n    //#endregion\n\n    //#region Misc\n\n    /**\n     * Get document which contains this editor\n     * @returns The HTML document which contains this editor\n     */\n    public getDocument(): Document {\n        return this.core.document;\n    }\n\n    /**\n     * Get custom data related to this editor\n     * @param key Key of the custom data\n     * @param getter Getter function. If custom data for the given key doesn't exist,\n     * call this function to get one and store it if it is specified. Otherwise return undefined\n     * @param disposer An optional disposer function to dispose this custom data when\n     * dispose editor.\n     */\n    public getCustomData<T>(key: string, getter?: () => T, disposer?: (value: T) => void): T {\n        return this.core.api.getCustomData(this.core, key, getter, disposer);\n    }\n\n    /**\n     * Check if editor is in IME input sequence\n     * @returns True if editor is in IME input sequence, otherwise false\n     */\n    public isInIME(): boolean {\n        return this.core.corePlugins.domEvent.isInIME();\n    }\n\n    /**\n     * Get default format of this editor\n     * @returns Default format object of this editor\n     */\n    public getDefaultFormat(): DefaultFormat {\n        return this.core.defaultFormat;\n    }\n\n    /**\n     * Get a content traverser for the whole editor\n     * @param startNode The node to start from. If not passed, it will start from the beginning of the body\n     */\n    public getBodyTraverser(startNode?: Node): ContentTraverser {\n        return ContentTraverser.createBodyTraverser(this.core.contentDiv, startNode);\n    }\n\n    /**\n     * Get a content traverser for current selection\n     */\n    public getSelectionTraverser(): ContentTraverser {\n        let range = this.getSelectionRange();\n        return (\n            range &&\n            ContentTraverser.createSelectionTraverser(\n                this.core.contentDiv,\n                this.getSelectionRange()\n            )\n        );\n    }\n\n    /**\n     * Get a content traverser for current block element start from specified position\n     * @param startFrom Start position of the traverser. Default value is ContentPosition.SelectionStart\n     */\n    public getBlockTraverser(\n        startFrom: ContentPosition = ContentPosition.SelectionStart\n    ): ContentTraverser {\n        let range = this.getSelectionRange();\n        return (\n            range && ContentTraverser.createBlockTraverser(this.core.contentDiv, range, startFrom)\n        );\n    }\n\n    /**\n     * Get a text traverser of current selection\n     */\n    public getContentSearcherOfCursor(): PositionContentSearcher {\n        let range = this.getSelectionRange();\n        return range && new PositionContentSearcher(this.core.contentDiv, Position.getStart(range));\n    }\n\n    /**\n     * Run a callback function asynchronously\n     * @param callback The callback function to run\n     */\n    public runAsync(callback: () => void) {\n        let win = this.core.contentDiv.ownerDocument.defaultView || window;\n        win.requestAnimationFrame(() => {\n            if (!this.isDisposed() && callback) {\n                callback();\n            }\n        });\n    }\n\n    /**\n     * Set DOM attribute of editor content DIV\n     * @param name Name of the attribute\n     * @param value Value of the attribute\n     */\n    public setEditorDomAttribute(name: string, value: string) {\n        if (value === null) {\n            this.core.contentDiv.removeAttribute(name);\n        } else {\n            this.core.contentDiv.setAttribute(name, value);\n        }\n    }\n\n    /**\n     * Add a Content Edit feature. This is mostly called from ContentEdit plugin\n     * @param feature The feature to add\n     */\n    public addContentEditFeature(feature: GenericContentEditFeature<PluginEvent>) {\n        this.core.corePlugins.edit.addFeature(feature);\n    }\n\n    //#endregion\n\n    //#region Dark mode APIs\n\n    /**\n     * Set the dark mode state and transforms the content to match the new state.\n     * @param nextDarkMode The next status of dark mode. True if the editor should be in dark mode, false if not.\n     */\n    public setDarkModeState(nextDarkMode?: boolean) {\n        if (this.isDarkMode() == nextDarkMode) {\n            return;\n        }\n\n        const currentContent = this.getContent(\n            undefined /* triggerContentChangedEvent */,\n            true /* getSelectionMarker */\n        );\n\n        this.core.inDarkMode = nextDarkMode;\n        this.core.defaultFormat = calculateDefaultFormat(\n            this.core.contentDiv,\n            this.core.defaultFormat,\n            this.core.inDarkMode\n        );\n\n        this.setContent(currentContent);\n    }\n\n    /**\n     * Check if the editor is in dark mode\n     * @returns True if the editor is in dark mode, otherwise false\n     */\n    public isDarkMode(): boolean {\n        return this.core.inDarkMode;\n    }\n\n    /**\n     * Returns the dark mode options set on the editor\n     * @returns A DarkModeOptions object\n     */\n    public getDarkModeOptions(): DarkModeOptions {\n        return this.core.darkModeOptions;\n    }\n\n    //#endregion\n}\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\n\r\nconst COMMANDS: {\r\n    [command: string]: any;\r\n} = Browser.isFirefox\r\n    ? {\r\n          /**\r\n           * Disable these object resizing for firefox since other browsers don't have these behaviors\r\n           */\r\n          [DocumentCommand.EnableObjectResizing]: false,\r\n          [DocumentCommand.EnableInlineTableEditing]: false,\r\n      }\r\n    : Browser.isIE\r\n    ? {\r\n          /**\r\n           * Change the default paragraph separater to DIV. This is mainly for IE since its default setting is P\r\n           */\r\n          [DocumentCommand.DefaultParagraphSeparator]: 'div',\r\n\r\n          /**\r\n           * Disable auto link feature in IE since we have our own implementation\r\n           */\r\n          [DocumentCommand.AutoUrlDetect]: false,\r\n      }\r\n    : {};\r\n\r\n/**\r\n * Execute document command to adjust browser default behavior\r\n */\r\nexport default function adjustBrowserBehavior() {\r\n    Object.keys(COMMANDS).forEach(command => {\r\n        // Catch any possible exception since this should not block the initialization of editor\r\n        try {\r\n            document.execCommand(command, false, COMMANDS[command]);\r\n        } catch {}\r\n    });\r\n}\r\n","import CopyPlugin from '../corePlugins/CopyPlugin';\r\nimport DOMEventPlugin from '../corePlugins/DOMEventPlugin';\r\nimport EditorCore, { CoreApiMap, CorePlugins } from '../interfaces/EditorCore';\r\nimport EditorOptions from '../interfaces/EditorOptions';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport EditPlugin from '../corePlugins/EditPlugin';\r\nimport FirefoxTypeAfterLink from '../corePlugins/FirefoxTypeAfterLink';\r\nimport MouseUpPlugin from '../corePlugins/MouseUpPlugin';\r\nimport TypeInContainerPlugin from '../corePlugins/TypeInContainerPlugin';\r\nimport Undo from '../undo/Undo';\r\nimport { attachDomEvent } from '../coreAPI/attachDomEvent';\r\nimport { Browser } from 'roosterjs-editor-dom';\r\nimport { calculateDefaultFormat } from '../coreAPI/calculateDefaultFormat';\r\nimport { CustomDataMap } from '../interfaces/CustomData';\r\nimport { editWithUndo } from '../coreAPI/editWithUndo';\r\nimport { focus } from '../coreAPI/focus';\r\nimport { getCustomData } from '../coreAPI/getCustomData';\r\nimport { getSelectionRange } from '../coreAPI/getSelectionRange';\r\nimport { hasFocus } from '../coreAPI/hasFocus';\r\nimport { insertNode } from '../coreAPI/insertNode';\r\nimport { select, selectRange } from '../coreAPI/selectRange';\r\nimport { triggerEvent } from '../coreAPI/triggerEvent';\r\n\r\n/**\r\n * Create core object for editor\r\n * @param contentDiv The DIV element used for editor\r\n * @param options Options to create an editor\r\n */\r\nexport default function createEditorCore(\r\n    contentDiv: HTMLDivElement,\r\n    options: EditorOptions\r\n): EditorCore {\r\n    let corePlugins: CorePlugins = {\r\n        undo: options.undo || new Undo(),\r\n        edit: new EditPlugin(),\r\n        typeInContainer: new TypeInContainerPlugin(),\r\n        mouseUp: new MouseUpPlugin(),\r\n        domEvent: new DOMEventPlugin(options.disableRestoreSelectionOnFocus),\r\n        firefoxTypeAfterLink: Browser.isFirefox && new FirefoxTypeAfterLink(),\r\n        copyPlugin: !Browser.isIE && new CopyPlugin(),\r\n    };\r\n    let allPlugins = buildPluginList(corePlugins, options.plugins);\r\n    let eventHandlerPlugins = allPlugins.filter(\r\n        plugin => plugin.onPluginEvent || plugin.willHandleEventExclusively\r\n    );\r\n    return {\r\n        contentDiv,\r\n        document: contentDiv.ownerDocument,\r\n        defaultFormat: calculateDefaultFormat(\r\n            contentDiv,\r\n            options.defaultFormat,\r\n            options.inDarkMode\r\n        ),\r\n        corePlugins,\r\n        currentUndoSnapshot: null,\r\n        customData: createCustomData(options.customData || {}),\r\n        cachedSelectionRange: null,\r\n        plugins: allPlugins,\r\n        eventHandlerPlugins: eventHandlerPlugins,\r\n        api: createCoreApiMap(options.coreApiOverride),\r\n        defaultApi: createCoreApiMap(),\r\n        inDarkMode: options.inDarkMode,\r\n        darkModeOptions: options.darkModeOptions,\r\n    };\r\n}\r\n\r\nfunction buildPluginList(corePlugins: CorePlugins, plugins: EditorPlugin[]): EditorPlugin[] {\r\n    return [\r\n        corePlugins.typeInContainer,\r\n        corePlugins.edit,\r\n        corePlugins.mouseUp,\r\n        ...(plugins || []),\r\n        corePlugins.firefoxTypeAfterLink,\r\n        corePlugins.undo,\r\n        corePlugins.domEvent,\r\n        corePlugins.copyPlugin,\r\n    ].filter(plugin => !!plugin);\r\n}\r\n\r\nfunction createCoreApiMap(map?: Partial<CoreApiMap>): CoreApiMap {\r\n    map = map || {};\r\n    return {\r\n        attachDomEvent: map.attachDomEvent || attachDomEvent,\r\n        editWithUndo: map.editWithUndo || editWithUndo,\r\n        focus: map.focus || focus,\r\n        getCustomData: map.getCustomData || getCustomData,\r\n        getSelectionRange: map.getSelectionRange || getSelectionRange,\r\n        hasFocus: map.hasFocus || hasFocus,\r\n        insertNode: map.insertNode || insertNode,\r\n        select: map.select || select,\r\n        selectRange: map.selectRange || selectRange,\r\n        triggerEvent: map.triggerEvent || triggerEvent,\r\n    };\r\n}\r\n\r\nfunction createCustomData(initValue: { [key: string]: any }): CustomDataMap {\r\n    return Object.keys(initValue).reduce(\r\n        (result, key) => {\r\n            result[key] = {\r\n                value: initValue[key],\r\n            };\r\n            return result;\r\n        },\r\n        <CustomDataMap>{}\r\n    );\r\n}\r\n","import UndoSnapshotsService from '../interfaces/UndoSnapshotsService';\r\n\r\n// Max stack size that cannot be exceeded. When exceeded, old undo history will be dropped\r\n// to keep size under limit. This is kept at 10MB\r\nconst MAXSIZELIMIT = 1e7;\r\n\r\n/**\r\n * A class to help manage undo snapshots\r\n */\r\nexport default class UndoSnapshots implements UndoSnapshotsService {\r\n    private snapshots: string[];\r\n    private totalSize: number;\r\n    private currentIndex: number;\r\n\r\n    constructor(private maxSize: number = MAXSIZELIMIT) {\r\n        this.snapshots = [];\r\n        this.totalSize = 0;\r\n        this.currentIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * Check whether can move current undo snapshot with the given step\r\n     * @param step The step to check, can be positive, negative or 0\r\n     * @returns True if can move current snapshot with the given step, otherwise false\r\n     */\r\n    public canMove(delta: number): boolean {\r\n        let newIndex = this.currentIndex + delta;\r\n        return newIndex >= 0 && newIndex < this.snapshots.length;\r\n    }\r\n\r\n    /**\r\n     * Move current snapshot with the given step if can move this step. Otherwise no action and return null\r\n     * @param step The step to move\r\n     * @returns If can move with the given step, returns the snapshot after move, otherwise null\r\n     */\r\n    public move(delta: number): string {\r\n        if (this.canMove(delta)) {\r\n            this.currentIndex += delta;\r\n            return this.snapshots[this.currentIndex];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new undo snapshot\r\n     * @param snapshot The snapshot to add\r\n     */\r\n    public addSnapshot(snapshot: string) {\r\n        if (this.currentIndex < 0 || snapshot != this.snapshots[this.currentIndex]) {\r\n            this.clearRedo();\r\n            this.snapshots.push(snapshot);\r\n            this.currentIndex++;\r\n            this.totalSize += snapshot.length;\r\n\r\n            let removeCount = 0;\r\n            while (removeCount < this.snapshots.length && this.totalSize > this.maxSize) {\r\n                this.totalSize -= this.snapshots[removeCount].length;\r\n                removeCount++;\r\n            }\r\n\r\n            if (removeCount > 0) {\r\n                this.snapshots.splice(0, removeCount);\r\n                this.currentIndex -= removeCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all undo snapshots after the current one\r\n     */\r\n    public clearRedo() {\r\n        if (this.canMove(1)) {\r\n            let removedSize = 0;\r\n            for (let i = this.currentIndex + 1; i < this.snapshots.length; i++) {\r\n                removedSize += this.snapshots[i].length;\r\n            }\r\n            this.snapshots.splice(this.currentIndex + 1);\r\n            this.totalSize -= removedSize;\r\n        }\r\n    }\r\n}\r\n","import EditorCore, { AttachDomEvent } from '../interfaces/EditorCore';\r\nimport isCharacterValue from '../eventApi/isCharacterValue';\r\nimport { PluginDomEvent, PluginEventType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Attach a DOM event to the editor content DIV\r\n * @param core The EditorCore object\r\n * @param eventName The DOM event name\r\n * @param pluginEventType Optional event type. When specified, editor will trigger a plugin event with this name when the DOM event is triggered\r\n * @param beforeDispatch Optional callback function to be invoked when the DOM event is triggered before trigger plugin event\r\n */\r\nexport const attachDomEvent: AttachDomEvent = (\r\n    core: EditorCore,\r\n    eventName: string,\r\n    pluginEventType?: PluginEventType,\r\n    beforeDispatch?: (event: UIEvent) => void\r\n) => {\r\n    let onEvent = (event: UIEvent) => {\r\n        // Stop propagation of a printable keyboard event (a keyboard event which is caused by printable char input).\r\n        // This detection is not 100% accurate. event.key is not fully supported by all browsers, and in some browsers (e.g. IE),\r\n        // event.key is longer than 1 for num pad input. But here we just want to improve performance as much as possible.\r\n        // So if we missed some case here it is still acceptable.\r\n        if (\r\n            (isKeyboardEvent(event) && isCharacterValue(event)) ||\r\n            pluginEventType == PluginEventType.Input\r\n        ) {\r\n            event.stopPropagation();\r\n        }\r\n\r\n        if (beforeDispatch) {\r\n            beforeDispatch(event);\r\n        }\r\n        if (pluginEventType != null) {\r\n            core.api.triggerEvent(\r\n                core,\r\n                <PluginDomEvent>{\r\n                    eventType: pluginEventType,\r\n                    rawEvent: event,\r\n                },\r\n                false /*broadcast*/\r\n            );\r\n        }\r\n    };\r\n    core.contentDiv.addEventListener(eventName, onEvent);\r\n    return () => {\r\n        core.contentDiv.removeEventListener(eventName, onEvent);\r\n    };\r\n};\r\n\r\nfunction isKeyboardEvent(e: UIEvent): e is KeyboardEvent {\r\n    return e.type == 'keydown' || e.type == 'keypress' || e.type == 'keyup';\r\n}\r\n","import EditorCore, { EditWithUndo } from '../interfaces/EditorCore';\r\nimport { Position } from 'roosterjs-editor-dom';\r\nimport {\r\n    ChangeSource,\r\n    ContentChangedEvent,\r\n    NodePosition,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Call an editing callback with adding undo snapshots around, and trigger a ContentChanged event if change source is specified.\r\n * Undo snapshot will not be added if this call is nested inside another editWithUndo() call.\r\n * @param core The EditorCore object\r\n * @param callback The editing callback, accepting current selection start and end position, returns an optional object used as the data field of ContentChangedEvent.\r\n * @param changeSource The ChangeSource string of ContentChangedEvent. @default ChangeSource.Format. Set to null to avoid triggering ContentChangedEvent\r\n */\r\nexport const editWithUndo: EditWithUndo = (\r\n    core: EditorCore,\r\n    callback: (start: NodePosition, end: NodePosition, snapshotBeforeCallback: string) => any,\r\n    changeSource: ChangeSource | string\r\n) => {\r\n    let isNested = core.currentUndoSnapshot !== null;\r\n    let data: any;\r\n\r\n    if (!isNested) {\r\n        core.currentUndoSnapshot = core.corePlugins.undo.addUndoSnapshot();\r\n    }\r\n\r\n    try {\r\n        if (callback) {\r\n            let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\r\n            data = callback(\r\n                range && Position.getStart(range).normalize(),\r\n                range && Position.getEnd(range).normalize(),\r\n                core.currentUndoSnapshot\r\n            );\r\n\r\n            if (!isNested) {\r\n                core.corePlugins.undo.addUndoSnapshot();\r\n            }\r\n        }\r\n    } finally {\r\n        if (!isNested) {\r\n            core.currentUndoSnapshot = null;\r\n        }\r\n    }\r\n\r\n    if (callback && changeSource) {\r\n        let event: ContentChangedEvent = {\r\n            eventType: PluginEventType.ContentChanged,\r\n            source: changeSource,\r\n            data: data,\r\n        };\r\n        core.api.triggerEvent(core, event, true /*broadcast*/);\r\n    }\r\n};\r\n","import EditorCore, { Focus } from '../interfaces/EditorCore';\r\nimport { createRange, getFirstLeafNode } from 'roosterjs-editor-dom';\r\nimport { PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Focus to editor. If there is a cached selection range, use it as current selection\r\n * @param core The EditorCore object\r\n */\r\nexport const focus: Focus = (core: EditorCore) => {\r\n    if (!core.api.hasFocus(core) || !core.api.getSelectionRange(core, false /*tryGetFromCache*/)) {\r\n        // Focus (document.activeElement indicates) and selection are mostly in sync, but could be out of sync in some extreme cases.\r\n        // i.e. if you programmatically change window selection to point to a non-focusable DOM element (i.e. tabindex=-1 etc.).\r\n        // On Chrome/Firefox, it does not change document.activeElement. On Edge/IE, it change document.activeElement to be body\r\n        // Although on Chrome/Firefox, document.activeElement points to editor, you cannot really type which we don't want (no cursor).\r\n        // So here we always do a live selection pull on DOM and make it point in Editor. The pitfall is, the cursor could be reset\r\n        // to very begin to of editor since we don't really have last saved selection (created on blur which does not fire in this case).\r\n        // It should be better than the case you cannot type\r\n        if (\r\n            !core.cachedSelectionRange ||\r\n            !core.api.selectRange(core, core.cachedSelectionRange, true /*skipSameRange*/)\r\n        ) {\r\n            let node = getFirstLeafNode(core.contentDiv) || core.contentDiv;\r\n            core.api.selectRange(\r\n                core,\r\n                createRange(node, PositionType.Begin),\r\n                true /*skipSameRange*/\r\n            );\r\n        }\r\n    }\r\n\r\n    // remember to clear cachedSelectionRange\r\n    core.cachedSelectionRange = null;\r\n\r\n    // This is more a fallback to ensure editor gets focus if it didn't manage to move focus to editor\r\n    if (!core.api.hasFocus(core)) {\r\n        core.contentDiv.focus();\r\n    }\r\n};\r\n","import EditorCore, { GetCustomData } from '../interfaces/EditorCore';\r\n\r\n/**\r\n * Get custom data related with this editor\r\n * @param core The EditorCore object\r\n * @param key Key of the custom data\r\n * @param getter Getter function. If custom data for the given key doesn't exist,\r\n * call this function to get one and store it if it is specified. Otherwise return undefined\r\n * @param disposer An optional disposer function to dispose this custom data when\r\n * dispose editor.\r\n */\r\nexport const getCustomData: GetCustomData = <T>(\r\n    core: EditorCore,\r\n    key: string,\r\n    getter: () => T,\r\n    disposer?: (value: T) => void\r\n): T => {\r\n    return (core.customData[key] = core.customData[key] || {\r\n        value: getter ? getter() : undefined,\r\n        disposer,\r\n    }).value as T;\r\n};\r\n","import EditorCore, { GetSelectionRange } from '../interfaces/EditorCore';\r\nimport { contains } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Get current or cached selection range\r\n * @param core The EditorCore object\r\n * @param tryGetFromCache Set to true to retrieve the selection range from cache if editor doesn't own the focus now\r\n * @returns A Range object of the selection range\r\n */\r\nexport const getSelectionRange: GetSelectionRange = (\r\n    core: EditorCore,\r\n    tryGetFromCache: boolean\r\n) => {\r\n    let result: Range = null;\r\n\r\n    if (!tryGetFromCache || core.api.hasFocus(core)) {\r\n        let selection = core.document.defaultView.getSelection();\r\n        if (selection && selection.rangeCount > 0) {\r\n            let range = selection.getRangeAt(0);\r\n            if (contains(core.contentDiv, range)) {\r\n                result = range;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!result && tryGetFromCache) {\r\n        result = core.cachedSelectionRange;\r\n    }\r\n\r\n    return result;\r\n};\r\n","import EditorCore, { InsertNode } from '../interfaces/EditorCore';\nimport {\n    ContentPosition,\n    InsertOption,\n    NodeType,\n    PositionType,\n    BlockElement,\n} from 'roosterjs-editor-types';\nimport {\n    Position,\n    getBlockElementAtNode,\n    getFirstLastBlockElement,\n    isBlockElement,\n    isVoidHtmlElement,\n    wrap,\n    adjustNodeInsertPosition,\n    createRange,\n} from 'roosterjs-editor-dom';\n\nfunction getInitialRange(\n    core: EditorCore,\n    option: InsertOption\n): { range: Range; rangeToRestore: Range } {\n    // Selection start replaces based on the current selection.\n    // Range inserts based on a provided range.\n    // Both have the potential to use the current selection to restore cursor position\n    // So in both cases we need to store the selection state.\n    let range = core.api.getSelectionRange(core, true /*tryGetFromCache*/);\n    let rangeToRestore = null;\n    if (option.position == ContentPosition.Range) {\n        rangeToRestore = range;\n        range = option.range;\n    } else if (range) {\n        rangeToRestore = range.cloneRange();\n    }\n\n    return { range, rangeToRestore };\n}\n\n/**\n * Insert a DOM node into editor content\n * @param core The EditorCore object. No op if null.\n * @param option An insert option object to specify how to insert the node\n */\nexport const insertNode: InsertNode = (core: EditorCore, node: Node, option: InsertOption) => {\n    option = option || {\n        position: ContentPosition.SelectionStart,\n        insertOnNewLine: false,\n        updateCursor: true,\n        replaceSelection: true,\n    };\n    let contentDiv = core.contentDiv;\n\n    if (option.updateCursor) {\n        core.api.focus(core);\n    }\n\n    switch (option.position) {\n        case ContentPosition.Begin:\n        case ContentPosition.End:\n            let isBegin = option.position == ContentPosition.Begin;\n            let block = getFirstLastBlockElement(contentDiv, isBegin);\n            let insertedNode: Node;\n            if (block) {\n                let refNode = isBegin ? block.getStartNode() : block.getEndNode();\n                if (\n                    option.insertOnNewLine ||\n                    refNode.nodeType == NodeType.Text ||\n                    isVoidHtmlElement(refNode)\n                ) {\n                    // For insert on new line, or refNode is text or void html element (HR, BR etc.)\n                    // which cannot have children, i.e. <div>hello<br>world</div>. 'hello', 'world' are the\n                    // first and last node. Insert before 'hello' or after 'world', but still inside DIV\n                    insertedNode = refNode.parentNode.insertBefore(\n                        node,\n                        isBegin ? refNode : refNode.nextSibling\n                    );\n                } else {\n                    // if the refNode can have child, use appendChild (which is like to insert as first/last child)\n                    // i.e. <div>hello</div>, the content will be inserted before/after hello\n                    insertedNode = refNode.insertBefore(node, isBegin ? refNode.firstChild : null);\n                }\n            } else {\n                // No first block, this can happen when editor is empty. Use appendChild to insert the content in contentDiv\n                insertedNode = contentDiv.appendChild(node);\n            }\n\n            // Final check to see if the inserted node is a block. If not block and the ask is to insert on new line,\n            // add a DIV wrapping\n            if (insertedNode && option.insertOnNewLine && !isBlockElement(insertedNode)) {\n                wrap(insertedNode);\n            }\n\n            break;\n        case ContentPosition.Range:\n        case ContentPosition.SelectionStart:\n            let { range, rangeToRestore } = getInitialRange(core, option);\n\n            if (!range) {\n                return;\n            }\n\n            // if to replace the selection and the selection is not collapsed, remove the the content at selection first\n            if (option.replaceSelection && !range.collapsed) {\n                range.deleteContents();\n            }\n\n            let pos = Position.getStart(range);\n            let blockElement: BlockElement;\n\n            if (\n                option.insertOnNewLine &&\n                (blockElement = getBlockElementAtNode(contentDiv, pos.normalize().node))\n            ) {\n                pos = new Position(blockElement.getEndNode(), PositionType.After);\n            } else {\n                pos = adjustNodeInsertPosition(contentDiv, node, pos);\n            }\n\n            let nodeForCursor = node.nodeType == NodeType.DocumentFragment ? node.lastChild : node;\n            range = createRange(pos);\n            range.insertNode(node);\n            if (option.updateCursor && nodeForCursor) {\n                rangeToRestore = createRange(\n                    new Position(nodeForCursor, PositionType.After).normalize()\n                );\n            }\n            core.api.selectRange(core, rangeToRestore);\n\n            break;\n        case ContentPosition.Outside:\n            core.contentDiv.parentNode.insertBefore(node, contentDiv.nextSibling);\n            break;\n    }\n\n    return true;\n};\n","import EditorCore, { Select, SelectRange } from '../interfaces/EditorCore';\nimport { Browser, contains, createRange } from 'roosterjs-editor-dom';\nimport { hasFocus } from './hasFocus';\n\n/**\n * Change the editor selection to the given range\n * @param core The EditorCore object\n * @param range The range to select\n * @param skipSameRange When set to true, do nothing if the given range is the same with current selection\n * in editor, otherwise it will always remove current selection ranage and set to the given one.\n * This parameter is always treat as true in Edge to avoid some weird runtime exception.\n */\nexport const selectRange: SelectRange = (\n    core: EditorCore,\n    range: Range,\n    skipSameRange?: boolean\n) => {\n    let selection: Selection;\n    let needAddRange = true;\n\n    if (\n        !contains(core.contentDiv, range) ||\n        !(selection = core.document.defaultView.getSelection())\n    ) {\n        return false;\n    }\n\n    if (selection.rangeCount > 0) {\n        // Workaround IE exception 800a025e\n        try {\n            let currentRange: Range;\n            // Do not remove/add range if current selection is the same with target range\n            // Without this check, execCommand() may fail in Edge since we changed the selection\n            if (\n                (skipSameRange || Browser.isEdge) &&\n                (currentRange = selection.rangeCount == 1 ? selection.getRangeAt(0) : null) &&\n                currentRange.startContainer == range.startContainer &&\n                currentRange.startOffset == range.startOffset &&\n                currentRange.endContainer == range.endContainer &&\n                currentRange.endOffset == range.endOffset\n            ) {\n                needAddRange = false;\n            } else {\n                selection.removeAllRanges();\n            }\n        } catch (e) {}\n    }\n\n    if (needAddRange) {\n        selection.addRange(range);\n    }\n\n    if (!hasFocus(core)) {\n        core.cachedSelectionRange = range;\n    }\n\n    if (range.collapsed) {\n        // If selected, and current selection is collapsed,\n        // need to restore pending format state if exists.\n        core.corePlugins.domEvent.restorePendingFormatState();\n    }\n\n    return true;\n};\n\n/**\n * @deprecated Only for compatibility with existing code, don't use ths function, use selectRange instead\n */\nexport const select: Select = (core: EditorCore, arg1: any, arg2?: any, arg3?: any, arg4?: any) => {\n    let range = arg1 instanceof Range ? arg1 : createRange(arg1, arg2, arg3, arg4);\n    return core.api.selectRange(core, range);\n};\n","import EditorCore, { TriggerEvent } from '../interfaces/EditorCore';\r\nimport EditorPlugin from '../interfaces/EditorPlugin';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * Trigger a plugin event\r\n * @param core The EditorCore object\r\n * @param pluginEvent The event object to trigger\r\n * @param broadcast Set to true to skip the shouldHandleEventExclusively check\r\n */\r\nexport const triggerEvent: TriggerEvent = (\r\n    core: EditorCore,\r\n    pluginEvent: PluginEvent,\r\n    broadcast: boolean\r\n) => {\r\n    if (\r\n        broadcast ||\r\n        !core.eventHandlerPlugins.some(plugin => handledExclusively(pluginEvent, plugin))\r\n    ) {\r\n        core.eventHandlerPlugins.forEach(plugin => {\r\n            if (plugin.onPluginEvent) {\r\n                plugin.onPluginEvent(pluginEvent);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nfunction handledExclusively(event: PluginEvent, plugin: EditorPlugin): boolean {\r\n    if (\r\n        plugin.onPluginEvent &&\r\n        plugin.willHandleEventExclusively &&\r\n        plugin.willHandleEventExclusively(event)\r\n    ) {\r\n        plugin.onPluginEvent(event);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { EditorCore } from '..';\r\nimport { PluginEventType } from 'roosterjs-editor-types';\r\n\r\nconst EVENT_MAPPING: { [domEvent: string]: PluginEventType } = {\r\n    keypress: PluginEventType.KeyPress,\r\n    keydown: PluginEventType.KeyDown,\r\n    keyup: PluginEventType.KeyUp,\r\n    mousedown: PluginEventType.MouseDown,\r\n    [Browser.isIE ? 'textinput' : 'input']: PluginEventType.Input,\r\n};\r\n\r\n/**\r\n * Map DOM events to editor plugin events\r\n * @param core The EditorCore object\r\n */\r\nexport default function mapPluginEvents(core: EditorCore): (() => void)[] {\r\n    return Object.keys(EVENT_MAPPING).map(pluginEvent =>\r\n        core.api.attachDomEvent(core, pluginEvent, EVENT_MAPPING[pluginEvent])\r\n    );\r\n}\r\n","/**\n * Converter for dark mode that runs all child elements of a node through the content transform function.\n * @param node The node containing HTML elements to convert.\n * @param skipRootElement Optional parameter to skip the root element of the Node passed in, if applicable.\n */\nexport function convertContentToDarkMode(node: Node, onExternalContentTransform?: (element: Element) => void, skipRootElement?: boolean): () => void {\n    let childElements: HTMLElement[] = [];\n\n    // Get a list of all the decendents of a node.\n    // querySelectorAll doesn't return a live list when called on an HTMLElement\n    // So we use getElementsByTagName instead for HTMLElement types.\n    if (node instanceof HTMLElement) {\n        childElements = Array.prototype.slice.call(node.getElementsByTagName('*'));\n        if (!skipRootElement) {\n            childElements.unshift(node);\n        }\n    } else if (node instanceof DocumentFragment) {\n        childElements = Array.prototype.slice.call(node.querySelectorAll('*'));\n    }\n\n    return childElements.length > 0\n        ? () => {\n            childElements.forEach(element => {\n                if (onExternalContentTransform) {\n                    onExternalContentTransform(element);\n                } else {\n                    element.style.color = null;\n                    element.style.backgroundColor = null;\n                }\n            });\n        }\n        : null;\n}","import cacheGetEventData from './cacheGetEventData';\r\nimport Editor from '../editor/Editor';\r\nimport { PluginEvent } from 'roosterjs-editor-types';\r\n\r\nconst CACHE_KEY_PREFIX = 'GET_ELEMENT_AT_CURSOR_';\r\n\r\n/**\r\n * Get an HTML element at cursor from event cache if it exists.\r\n * If an selector is specified, return the nearest ancestor of current node\r\n * which matches the selector, or null if no match found in editor.\r\n * @param editor The editor instance\r\n * @param event Event object to get cached object from\r\n * @param selector The expected selector. If null, return the element at cursor\r\n * @returns The element at cursor or the nearest ancestor with the tag name is specified\r\n */\r\nexport default function cacheGetElementAtCursor(\r\n    editor: Editor,\r\n    event: PluginEvent,\r\n    selector: string\r\n): HTMLElement {\r\n    return cacheGetEventData(event, CACHE_KEY_PREFIX + selector, () =>\r\n        editor.getElementAtCursor(selector)\r\n    );\r\n}\r\n","import { ChangeSource } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Insert an image to editor at current selection\r\n * @param editor The editor instance\r\n * @param imageFile The image file. There are at least 3 ways to obtain the file object:\r\n * From local file, from clipboard data, from drag-and-drop\r\n */\r\nexport default function insertImage(editor: Editor, imageFile: File) {\r\n    let reader = new FileReader();\r\n    reader.onload = (event: ProgressEvent) => {\r\n        if (!editor.isDisposed()) {\r\n            editor.addUndoSnapshot(() => {\r\n                let image = editor.getDocument().createElement('img');\r\n                image.src = (event.target as FileReader).result as string;\r\n                image.style.maxWidth = '100%';\r\n                editor.insertNode(image);\r\n            }, ChangeSource.Format);\r\n        }\r\n    };\r\n    reader.readAsDataURL(imageFile);\r\n}\r\n","import { ChangeSource, PositionType, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { Position, VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Insert table into editor at current selection\r\n * @param editor The editor instance\r\n * @param columns Number of columns in table, it also controls the default table cell width:\r\n * if columns &lt;= 4, width = 120px; if columns &lt;= 6, width = 100px; else width = 70px\r\n * @param rows Number of rows in table\r\n * @param format (Optional) The table format. If not passed, the default format will be applied:\r\n * background color: #FFF; border color: #ABABAB\r\n */\r\nexport default function insertTable(\r\n    editor: Editor,\r\n    columns: number,\r\n    rows: number,\r\n    format?: TableFormat\r\n) {\r\n    let document = editor.getDocument();\r\n    let fragment = document.createDocumentFragment();\r\n    let table = document.createElement('table') as HTMLTableElement;\r\n    fragment.appendChild(table);\r\n    table.cellSpacing = '0';\r\n    table.cellPadding = '1';\r\n    for (let i = 0; i < rows; i++) {\r\n        let tr = document.createElement('tr') as HTMLTableRowElement;\r\n        table.appendChild(tr);\r\n        for (let j = 0; j < columns; j++) {\r\n            let td = document.createElement('td') as HTMLTableCellElement;\r\n            tr.appendChild(td);\r\n            td.appendChild(document.createElement('br'));\r\n            td.style.width = getTableCellWidth(columns);\r\n        }\r\n    }\r\n\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        let vtable = new VTable(table);\r\n        vtable.applyFormat(\r\n            format || {\r\n                bgColorEven: '#FFF',\r\n                bgColorOdd: '#FFF',\r\n                topBorderColor: '#ABABAB',\r\n                bottomBorderColor: '#ABABAB',\r\n                verticalBorderColor: '#ABABAB',\r\n            }\r\n        );\r\n        vtable.writeBack();\r\n        editor.insertNode(fragment);\r\n        editor.runAsync(() => editor.select(new Position(table, PositionType.Begin).normalize()));\r\n    }, ChangeSource.Format);\r\n}\r\n\r\nfunction getTableCellWidth(columns: number): string {\r\n    if (columns <= 4) {\r\n        return '120px';\r\n    } else if (columns <= 6) {\r\n        return '100px';\r\n    } else {\r\n        return '70px';\r\n    }\r\n}\r\n","import { ChangeSource, TableOperation } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Edit table with given operation. If there is no table at cursor then no op.\r\n * @param editor The editor instance\r\n * @param operation Table operation\r\n */\r\nexport default function editTable(editor: Editor, operation: TableOperation) {\r\n    let td = editor.getElementAtCursor('TD,TH') as HTMLTableCellElement;\r\n    if (td) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(td);\r\n            vtable.edit(operation);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n\r\n            if (!editor.select(start, end)) {\r\n                editor.select(editor.contains(td) ? td : vtable.getCurrentTd());\r\n            }\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, TableFormat } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { VTable } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Format table\r\n * @param editor The editor which contains the table to format\r\n * @param format A TableFormat object contains format information we want to apply to the table\r\n * @param table The table to format. This is optional. When not passed, the current table (if any) will be formatted\r\n */\r\nexport default function formatTable(\r\n    editor: Editor,\r\n    format: Partial<TableFormat>,\r\n    table?: HTMLTableElement\r\n) {\r\n    table = table || (editor.getElementAtCursor('TABLE') as HTMLTableElement);\r\n    if (table) {\r\n        editor.addUndoSnapshot((start, end) => {\r\n            let vtable = new VTable(table);\r\n            vtable.applyFormat(format);\r\n            vtable.writeBack();\r\n            editor.focus();\r\n            editor.select(start, end);\r\n        }, ChangeSource.Format);\r\n    }\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { unwrap } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Remove link at selection. If no links at selection, do nothing.\r\n * If selection contains multiple links, all of the link styles will be removed.\r\n * If only part of a link is selected, the whole link style will be removed.\r\n * @param editor The editor instance\r\n */\r\nexport default function removeLink(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        editor.queryElements('a[href]', QueryScope.OnSelection, unwrap);\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ContentPosition } from 'roosterjs-editor-types';\nimport { Editor } from 'roosterjs-editor-core';\nimport { PositionContentSearcher } from 'roosterjs-editor-dom';\n\n/**\n * Replace text before current selection with a node, current selection will be kept if possible\n * @param editor The editor instance\n * @param text The text for matching. We will try to match the text with the text before cursor\n * @param node The node to replace the text with\n * @param exactMatch True if the text must appear exactly before selection,\n * otherwise there can be some text between the tearget text and selection\n * @param searcher Optional PositionContentSearcher of current selection to help search text\n */\nexport default function replaceWithNode(\n    editor: Editor,\n    text: string,\n    node: Node,\n    exactMatch: boolean,\n    searcher?: PositionContentSearcher\n): boolean;\n\n/**\n * Replace a given range with a node, current selection will be kept if possible\n * @param editor The editor instance\n * @param range The range to replace from\n * @param node The node to replace the text with\n * @param exactMatch True if the text must appear exactly before selection,\n * otherwise there can be some text between the tearget text and selection\n */\nexport default function replaceWithNode(\n    editor: Editor,\n    range: Range,\n    node: Node,\n    exactMatch: boolean\n): boolean;\n\nexport default function replaceWithNode(\n    editor: Editor,\n    textOrRange: string | Range,\n    node: Node,\n    exactMatch: boolean,\n    searcher?: PositionContentSearcher\n): boolean {\n    // Make sure the text and node is valid\n    if (!textOrRange || !node) {\n        return false;\n    }\n\n    let range: Range;\n\n    if (typeof textOrRange == 'string') {\n        searcher = searcher || editor.getContentSearcherOfCursor();\n        range = searcher && searcher.getRangeFromText(textOrRange, exactMatch);\n    } else {\n        range = textOrRange;\n    }\n\n    if (range) {\n        const backupRange = editor.getSelectionRange();\n\n        // If the range to replace is right before current cursor, it is actually an exact match\n        if (\n            backupRange.collapsed &&\n            range.endContainer == backupRange.startContainer &&\n            range.endOffset == backupRange.startOffset\n        ) {\n            exactMatch = true;\n        }\n\n        editor.insertNode(node, {\n            position: ContentPosition.Range,\n            updateCursor: exactMatch,\n            replaceSelection: true,\n            insertOnNewLine: false,\n            range: range,\n        });\n\n        return true;\n    }\n\n    return false;\n}\n","import execCommand from '../utils/execCommand';\r\nimport { Alignment, ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set content alignment\r\n * @param editor The editor instance\r\n * @param alignment The alignment option:\r\n * Alignment.Center, Alignment.Left, Alignment.Right\r\n */\r\nexport default function setAlignment(editor: Editor, alignment: Alignment) {\r\n    let command = DocumentCommand.JustifyLeft;\r\n    let align = 'left';\r\n\r\n    if (alignment == Alignment.Center) {\r\n        command = DocumentCommand.JustifyCenter;\r\n        align = 'center';\r\n    } else if (alignment == Alignment.Right) {\r\n        command = DocumentCommand.JustifyRight;\r\n        align = 'right';\r\n    }\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        execCommand(editor, command);\r\n        editor.queryElements(\r\n            '[align]',\r\n            QueryScope.OnSelection,\r\n            node => (node.style.textAlign = align)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import collapseSelectedBlocks from '../utils/collapseSelectedBlocks';\r\nimport { ChangeSource, Direction } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Change direction for the blocks/paragraph at selection\r\n * @param editor The editor instance\r\n * @param direction The direction option:\r\n * Direction.LeftToRight refers to 'ltr', Direction.RightToLeft refers to 'rtl'\r\n */\r\nexport default function setDirection(editor: Editor, direction: Direction) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot((start, end) => {\r\n        collapseSelectedBlocks(editor, element => {\r\n            element.setAttribute('dir', direction == Direction.LeftToRight ? 'ltr' : 'rtl');\r\n            element.style.textAlign = direction == Direction.LeftToRight ? 'left' : 'right';\r\n        });\r\n        editor.select(start, end);\r\n    }, ChangeSource.Format);\r\n}\r\n","import { ChangeSource, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set image alt text for all selected images at selection. If no images is contained\r\n * in selection, do nothing.\r\n * The alt attribute provides alternative information for an image if a user for some reason\r\n * cannot view it (because of slow connection, an error in the src attribute, or if the user\r\n * uses a screen reader). See https://www.w3schools.com/tags/att_img_alt.asp\r\n * @param editor The editor instance\r\n * @param altText The image alt text\r\n */\r\nexport default function setImageAltText(editor: Editor, altText: string) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(() => {\r\n        editor.queryElements('img', QueryScope.OnSelection, node =>\r\n            node.setAttribute('alt', altText)\r\n        );\r\n    }, ChangeSource.Format);\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand, Indentation, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Set indentation at selection\r\n * If selection contains bullet/numbering list, increase/decrease indentation will\r\n * increase/decrease the list level by one.\r\n * @param editor The editor instance\r\n * @param indentation The indentation option:\r\n * Indentation.Increase to increase indentation or Indentation.Decrease to decrease indentation\r\n */\r\nexport default function setIndentation(editor: Editor, indentation: Indentation) {\r\n    let command: DocumentCommand.Indent | DocumentCommand.Outdent =\r\n        indentation == Indentation.Increase ? DocumentCommand.Indent : DocumentCommand.Outdent;\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n        let listNode = editor.getElementAtCursor('OL,UL');\r\n        let newNode: Node;\r\n\r\n        if (listNode) {\r\n            // There is already list node, setIndentation() will increase/decrease the list level,\r\n            // so we need to process the list when change indentation\r\n            newNode = processList(editor, command);\r\n        } else {\r\n            // No existing list node, browser will create <Blockquote> node for indentation.\r\n            // We need to set top and bottom margin to 0 to avoid unnecessary spaces\r\n            editor.getDocument().execCommand(command, false, null);\r\n            editor.queryElements('BLOCKQUOTE', QueryScope.OnSelection, node => {\r\n                newNode = newNode || node;\r\n                node.style.marginTop = '0px';\r\n                node.style.marginBottom = '0px';\r\n            });\r\n        }\r\n\r\n        return newNode;\r\n    }, ChangeSource.Format);\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle bullet at selection\r\n * If selection contains bullet in deep level, toggle bullet will decrease the bullet level by one\r\n * If selection contains number list, toggle bullet will convert the number list into bullet list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleBullet(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(\r\n        () => processList(editor, DocumentCommand.InsertUnorderedList),\r\n        ChangeSource.Format\r\n    );\r\n}\r\n","import processList from '../utils/processList';\r\nimport { ChangeSource, DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle numbering at selection\r\n * If selection contains numbering in deep level, toggle numbering will decrease the numbering level by one\r\n * If selection contains bullet list, toggle numbering will convert the bullet list into number list\r\n * If selection contains both bullet/numbering and normal text, the behavior is decided by corresponding\r\n * realization of browser execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleNumbering(editor: Editor) {\r\n    editor.focus();\r\n    editor.addUndoSnapshot(\r\n        () => processList(editor, DocumentCommand.InsertOrderedList),\r\n        ChangeSource.Format\r\n    );\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\nconst BLOCKQUOTE_TAG = 'blockquote';\r\nconst DEFAULT_STYLER = (element: HTMLElement): void => {\r\n    element.style.borderLeft = '3px solid';\r\n    element.style.borderColor = '#C8C8C8';\r\n    element.style.paddingLeft = '10px';\r\n    element.style.color = '#666666';\r\n};\r\n\r\n/**\r\n * Toggle blockquote at selection, if selection already contains any blockquoted elements,\r\n * the blockquoted elements will be unblockquoted and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the blockquote element\r\n */\r\nexport default function toggleBlockQuote(editor: Editor, styler?: (element: HTMLElement) => void) {\r\n    toggleTagCore(editor, BLOCKQUOTE_TAG, styler || DEFAULT_STYLER);\r\n}\r\n","import toggleTagCore from '../utils/toggleTagCore';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { getTagOfNode, unwrap, wrap } from 'roosterjs-editor-dom';\r\n\r\nconst PRE_TAG = 'pre';\r\nconst CODE_TAG = 'code';\r\nconst CODE_NODE_TAG = 'CODE';\r\n\r\n/**\r\n * Toggle code block at selection, if selection already contains any code blocked elements,\r\n * the code block elements will be no longer be code blocked and other elements will take no affect\r\n * @param editor The editor instance\r\n * @param styler (Optional) The custom styler for setting the style for the code block element\r\n */\r\nexport default function toggleCodeBlock(\r\n    editor: Editor,\r\n    styler?: (element: HTMLElement) => void\r\n): void {\r\n    toggleTagCore(editor, PRE_TAG, styler, wrapFunction, unwrapFunction);\r\n}\r\n\r\nfunction wrapFunction(nodes: Node[]): HTMLElement {\r\n    let codeBlock = wrap(nodes, CODE_TAG);\r\n    return wrap(codeBlock, PRE_TAG);\r\n}\r\n\r\nfunction unwrapFunction(node: HTMLElement): Node {\r\n    if (!node) {\r\n        return null;\r\n    }\r\n\r\n    let firstChild = node.childNodes[0];\r\n    if (node.childNodes.length == 1 && getTagOfNode(firstChild) == CODE_NODE_TAG) {\r\n        unwrap(firstChild);\r\n    }\r\n\r\n    return unwrap(node);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle strikethrough at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only strikethrough text, the strikethrough style will be removed\r\n * If selection contains only normal text, strikethrough style will be added to the whole selected text\r\n * If selection contains both strikethrough and normal text, strikethrough stlye will be added to the whole selected text\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleStrikethrough(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.StrikeThrough);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle subscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only subscript text, the subscript style will be removed\r\n * If selection contains only normal text, subscript style will be added to the whole selected text\r\n * If selection contains both subscript and normal text, the subscript style will be removed from whole selected text\r\n * If selection contains any superscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSubscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Subscript);\r\n}\r\n","import execCommand from '../utils/execCommand';\r\nimport { DocumentCommand } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\n\r\n/**\r\n * Toggle superscript at selection\r\n * If selection is collapsed, it will only affect the input after caret\r\n * If selection contains only superscript text, the superscript style will be removed\r\n * If selection contains only normal text, superscript style will be added to the whole selected text\r\n * If selection contains both superscript and normal text, the superscript style will be removed from whole selected text\r\n * If selection contains any subscript text, the behavior is determined by corresponding realization of browser\r\n * execCommand API\r\n * @param editor The editor instance\r\n */\r\nexport default function toggleSuperscript(editor: Editor) {\r\n    execCommand(editor, DocumentCommand.Superscript);\r\n}\r\n","import { ChangeSource, DocumentCommand, QueryScope } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { findClosestElementAncestor } from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Toggle header at selection\r\n * @param editor The editor instance\r\n * @param level The header level, can be a number from 0 to 6, in which 1 ~ 6 refers to\r\n * the HTML header element &lt;H1&gt; to &lt;H6&gt;, 0 means no header\r\n * if passed in param is outside the range, will be rounded to nearest number in the range\r\n */\r\nexport default function toggleHeader(editor: Editor, level: number) {\r\n    level = Math.min(Math.max(Math.round(level), 0), 6);\r\n\r\n    editor.addUndoSnapshot(() => {\r\n        editor.focus();\r\n\r\n        let wrapped = false;\r\n        editor.queryElements('H1,H2,H3,H4,H5,H6', QueryScope.OnSelection, header => {\r\n            if (!wrapped) {\r\n                editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, '<DIV>');\r\n                wrapped = true;\r\n            }\r\n\r\n            let div = editor.getDocument().createElement('div');\r\n            while (header.firstChild) {\r\n                div.appendChild(header.firstChild);\r\n            }\r\n            editor.replaceNode(header, div);\r\n        });\r\n\r\n        if (level > 0) {\r\n            let traverser = editor.getSelectionTraverser();\r\n            let inlineElement = traverser ? traverser.currentInlineElement : null;\r\n            while (inlineElement) {\r\n                let element = findClosestElementAncestor(inlineElement.getContainerNode());\r\n                if (element) {\r\n                    element.style.fontSize = '';\r\n                }\r\n                inlineElement = traverser.getNextInlineElement();\r\n            }\r\n            editor.getDocument().execCommand(DocumentCommand.FormatBlock, false, `<H${level}>`);\r\n        }\r\n    }, ChangeSource.Format);\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\nimport { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { FontSizeChange, PluginEventType, PluginKeyboardEvent } from 'roosterjs-editor-types';\r\nimport {\r\n    changeFontSize,\r\n    toggleBold,\r\n    toggleItalic,\r\n    toggleUnderline,\r\n    toggleBullet,\r\n    toggleNumbering,\r\n} from 'roosterjs-editor-api';\r\n\r\ninterface ShortcutCommand {\r\n    winKey: number;\r\n    macKey: number;\r\n    action: (editor: Editor) => any;\r\n}\r\n\r\nfunction createCommand(winKey: number, macKey: number, action: (editor: Editor) => any) {\r\n    return {\r\n        winKey,\r\n        macKey,\r\n        action,\r\n    };\r\n}\r\n\r\nconst commands: ShortcutCommand[] = [\r\n    createCommand(Keys.Ctrl | Keys.B, Keys.Meta | Keys.B, toggleBold),\r\n    createCommand(Keys.Ctrl | Keys.I, Keys.Meta | Keys.I, toggleItalic),\r\n    createCommand(Keys.Ctrl | Keys.U, Keys.Meta | Keys.U, toggleUnderline),\r\n    createCommand(Keys.Ctrl | Keys.Z, Keys.Meta | Keys.Z, editor => editor.undo()),\r\n    createCommand(Keys.Ctrl | Keys.Y, Keys.Meta | Keys.Shift | Keys.Z, editor => editor.redo()),\r\n    createCommand(Keys.Ctrl | Keys.PERIOD, Keys.Meta | Keys.PERIOD, toggleBullet),\r\n    createCommand(Keys.Ctrl | Keys.FORWARDSLASH, Keys.Meta | Keys.FORWARDSLASH, toggleNumbering),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.PERIOD,\r\n        Keys.Meta | Keys.Shift | Keys.PERIOD,\r\n        editor => changeFontSize(editor, FontSizeChange.Increase)\r\n    ),\r\n    createCommand(\r\n        Keys.Ctrl | Keys.Shift | Keys.COMMA,\r\n        Keys.Meta | Keys.Shift | Keys.COMMA,\r\n        editor => changeFontSize(editor, FontSizeChange.Decrease)\r\n    ),\r\n];\r\n\r\n/**\r\n * DefaultShortcut edit feature, provides shortcuts for the following features:\r\n * Ctrl/Meta+B: toggle bold style\r\n * Ctrl/Meta+I: toggle italic style\r\n * Ctrl/Meta+U: toggle underline style\r\n * Ctrl/Meta+Z: undo\r\n * Ctrl+Y/Meta+Shift+Z: redo\r\n * Ctrl/Meta+PERIOD: toggle bullet list\r\n * Ctrl/Meta+/: toggle numbering list\r\n * Ctrl/Meta+Shift+>: increase font size\r\n * Ctrl/Meta+Shift+<: decrease font size\r\n */\r\nexport const DefaultShortcut: ContentEditFeature = {\r\n    allowFunctionKeys: true,\r\n    keys: [Keys.B, Keys.I, Keys.U, Keys.Y, Keys.Z, Keys.COMMA, Keys.PERIOD, Keys.FORWARDSLASH],\r\n    shouldHandleEvent: cacheGetCommand,\r\n    handleEvent: (event, editor) => {\r\n        let command = cacheGetCommand(event);\r\n        if (command) {\r\n            command.action(editor);\r\n            event.rawEvent.preventDefault();\r\n            event.rawEvent.stopPropagation();\r\n        }\r\n    },\r\n};\r\n\r\nfunction cacheGetCommand(event: PluginKeyboardEvent) {\r\n    return cacheGetEventData(event, 'DEFAULT_SHORT_COMMAND', () => {\r\n        let e = event.rawEvent;\r\n        let key =\r\n            // Need to check ALT key to be false since in some language (e.g. Polski) uses AltGr to input some special charactors\r\n            // In that case, ctrlKey and altKey are both true in Edge, but we should not trigger any shortcut function here\r\n            event.eventType == PluginEventType.KeyDown && !e.altKey\r\n                ? e.which |\r\n                  (e.metaKey && Keys.Meta) |\r\n                  (e.shiftKey && Keys.Shift) |\r\n                  (e.ctrlKey && Keys.Ctrl)\r\n                : 0;\r\n        return key && commands.filter(cmd => (Browser.isMac ? cmd.macKey : cmd.winKey) == key)[0];\r\n    });\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    fromHtml,\r\n    isPositionAtBeginningOf,\r\n    Position,\r\n    getTagOfNode,\r\n} from 'roosterjs-editor-dom';\r\n\r\n// Edge can sometimes lose current format when Enter to new line.\r\n// So here we add an extra SPAN for Edge to workaround this bug\r\nconst NEWLINE_HTML = Browser.isEdge ? '<div><span><br></span></div>' : '<div><br></div>';\r\nconst CHILD_PARENT_TAG_MAP: { [childTag: string]: string } = {\r\n    TD: 'TABLE',\r\n    TH: 'TABLE',\r\n    LI: 'OL,UL',\r\n};\r\nconst CHILD_SELECTOR = Object.keys(CHILD_PARENT_TAG_MAP).join(',');\r\n\r\n/**\r\n * InsertLineBeforeStructuredNode edit feature, provides the ability to insert an empty line before\r\n * a structured element (bullet/numbering list, blockquote, table) if the element is at beginning of\r\n * document\r\n */\r\nexport const InsertLineBeforeStructuredNodeFeature: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: cacheGetStructuredElement,\r\n    handleEvent: (event, editor) => {\r\n        let element = cacheGetStructuredElement(event, editor);\r\n        let div = fromHtml(NEWLINE_HTML, editor.getDocument())[0] as HTMLElement;\r\n        editor.addUndoSnapshot(() => {\r\n            element.parentNode.insertBefore(div, element);\r\n            // Select the new line when we are in table. This is the same behavior with Word\r\n            if (getTagOfNode(element) == 'TABLE') {\r\n                editor.select(new Position(div, PositionType.Begin).normalize());\r\n            }\r\n        });\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\nfunction cacheGetStructuredElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    return cacheGetEventData(event, 'FIRST_STRUCTURE', () => {\r\n        // Provide a chance to keep browser default behavior by pressing SHIFT\r\n        let element = event.rawEvent.shiftKey ? null : editor.getElementAtCursor(CHILD_SELECTOR);\r\n\r\n        if (element) {\r\n            let range = editor.getSelectionRange();\r\n            if (\r\n                range &&\r\n                range.collapsed &&\r\n                isPositionAtBeginningOf(Position.getStart(range), element) &&\r\n                !editor.getBodyTraverser(element).getPreviousBlockElement()\r\n            ) {\r\n                return editor.getElementAtCursor(CHILD_PARENT_TAG_MAP[getTagOfNode(element)]);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport {\r\n    contains,\r\n    getTagOfNode,\r\n    isVoidHtmlElement,\r\n    Position,\r\n    VTable\r\n    } from 'roosterjs-editor-dom';\r\nimport { NodeType, PluginEvent, PositionType } from 'roosterjs-editor-types';\r\n\r\n/**\r\n * TabInTable edit feature, provides the ability to jump between cells when user press TAB in table\r\n */\r\nexport const TabInTable: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let shift = event.rawEvent.shiftKey;\r\n        let td = cacheGetTableCell(event, editor);\r\n        for (\r\n            let vtable = new VTable(td),\r\n                step = shift ? -1 : 1,\r\n                row = vtable.row,\r\n                col = vtable.col + step;\r\n            ;\r\n            col += step\r\n        ) {\r\n            if (col < 0 || col >= vtable.cells[row].length) {\r\n                row += step;\r\n                if (row < 0 || row >= vtable.cells.length) {\r\n                    editor.select(vtable.table, shift ? PositionType.Before : PositionType.After);\r\n                    break;\r\n                }\r\n                col = shift ? vtable.cells[row].length - 1 : 0;\r\n            }\r\n            let cell = vtable.getCell(row, col);\r\n            if (cell.td) {\r\n                editor.select(cell.td, PositionType.Begin);\r\n                break;\r\n            }\r\n        }\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * UpDownInTable edit feature, provides the ability to jump to cell above/below when user press UP/DOWN\r\n * in table\r\n */\r\nexport const UpDownInTable: ContentEditFeature = {\r\n    keys: [Keys.UP, Keys.DOWN],\r\n    shouldHandleEvent: cacheGetTableCell,\r\n    handleEvent: (event, editor) => {\r\n        let td = cacheGetTableCell(event, editor);\r\n        let vtable = new VTable(td);\r\n        let isUp = event.rawEvent.which == Keys.UP;\r\n        let step = isUp ? -1 : 1;\r\n        let targetTd: HTMLTableCellElement = null;\r\n        let hasShiftKey = event.rawEvent.shiftKey;\r\n        let { anchorNode, anchorOffset } = editor.getSelection();\r\n\r\n        for (let row = vtable.row; row >= 0 && row < vtable.cells.length; row += step) {\r\n            let cell = vtable.getCell(row, vtable.col);\r\n            if (cell.td && cell.td != td) {\r\n                targetTd = cell.td;\r\n                break;\r\n            }\r\n        }\r\n\r\n        editor.runAsync(() => {\r\n            let newContainer = editor.getElementAtCursor();\r\n            if (\r\n                contains(vtable.table, newContainer) &&\r\n                !contains(td, newContainer, true /*treatSameNodeAsContain*/)\r\n            ) {\r\n                let newPos = targetTd\r\n                    ? new Position(targetTd, PositionType.Begin)\r\n                    : new Position(vtable.table, isUp ? PositionType.Before : PositionType.After);\r\n                if (hasShiftKey) {\r\n                    newPos =\r\n                        newPos.node.nodeType == NodeType.Element && isVoidHtmlElement(newPos.node)\r\n                            ? new Position(\r\n                                  newPos.node,\r\n                                  newPos.isAtEnd ? PositionType.After : PositionType.Before\r\n                              )\r\n                            : newPos;\r\n                    editor\r\n                        .getSelection()\r\n                        .setBaseAndExtent(anchorNode, anchorOffset, newPos.node, newPos.offset);\r\n                } else {\r\n                    editor.select(newPos);\r\n                }\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nfunction cacheGetTableCell(event: PluginEvent, editor: Editor): HTMLTableCellElement {\r\n    return cacheGetEventData(event, 'TABLECELL_FOR_TABLE_FEATURES', () => {\r\n        let pos = editor.getFocusedPosition();\r\n        let firstTd = editor.getElementAtCursor('TD,TH,LI', pos.node);\r\n        return getTagOfNode(firstTd) == 'LI' ? null : (firstTd as HTMLTableCellElement);\r\n    });\r\n}\r\n","import { setIndentation, toggleBullet, toggleNumbering } from 'roosterjs-editor-api';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    cacheGetElementAtCursor,\r\n    Editor,\r\n    ContentEditFeature,\r\n    GenericContentEditFeature,\r\n    Keys,\r\n} from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    Indentation,\r\n    PluginKeyboardEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    Browser,\r\n    Position,\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    isPositionAtBeginningOf,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * IndentWhenTab edit feature, provides the ability to indent current list when user press TAB\r\n */\r\nexport const IndentWhenTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        !event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Increase);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * OutdentWhenShiftTab edit feature, provides the ability to outdent current list when user press Shift+TAB\r\n */\r\nexport const OutdentWhenShiftTab: ContentEditFeature = {\r\n    keys: [Keys.TAB],\r\n    shouldHandleEvent: (event, editor) =>\r\n        event.rawEvent.shiftKey && cacheGetListElement(event, editor),\r\n    handleEvent: (event, editor) => {\r\n        setIndentation(editor, Indentation.Decrease);\r\n        event.rawEvent.preventDefault();\r\n    },\r\n};\r\n\r\n/**\r\n * MergeInNewLine edit feature, provides the ability to merge current line into a new line when user press\r\n * BACKSPACE at beginning of a list item\r\n */\r\nexport const MergeInNewLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        let range = editor.getSelectionRange();\r\n        return li && range && isPositionAtBeginningOf(Position.getStart(range), li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        if (li.previousSibling) {\r\n            editor.runAsync(() => {\r\n                let br = editor.getDocument().createElement('BR');\r\n                editor.insertNode(br);\r\n                editor.select(br, PositionType.After);\r\n            });\r\n        } else {\r\n            toggleListAndPreventDefault(event, editor);\r\n        }\r\n    },\r\n};\r\n\r\n/**\r\n * OutdentWhenBackOn1stEmptyLine edit feature, provides the ability to outdent current item if user press\r\n * BACKSPACE at the first and empty line of a list\r\n */\r\nexport const OutdentWhenBackOn1stEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return li && isNodeEmpty(li) && !li.previousSibling;\r\n    },\r\n    handleEvent: toggleListAndPreventDefault,\r\n};\r\n\r\n/**\r\n * OutdentWhenEnterOnEmptyLine edit feature, provides the ability to outdent current item if user press\r\n * ENTER at the beginning of an empty line of a list\r\n */\r\nexport const OutdentWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let li = cacheGetElementAtCursor(editor, event, 'LI');\r\n        return !event.rawEvent.shiftKey && li && isNodeEmpty(li);\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.performAutoComplete(() => toggleListAndPreventDefault(event, editor));\r\n    },\r\n};\r\n\r\n/**\r\n * AutoBullet edit feature, provides the ablility to automatically convert current line into a list.\r\n * When user input \"1. \", convert into a numbering list\r\n * When user input \"- \" or \"* \", convert into a bullet list\r\n */\r\nexport const AutoBullet: ContentEditFeature = {\r\n    keys: [Keys.SPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        if (!cacheGetListElement(event, editor)) {\r\n            let searcher = cacheGetContentSearcher(event, editor);\r\n            let textBeforeCursor = searcher.getSubStringBefore(3);\r\n\r\n            // Auto list is triggered if:\r\n            // 1. Text before cursor exactly mathces '*', '-' or '1.'\r\n            // 2. There's no non-text inline entities before cursor\r\n            return (\r\n                ['*', '-', '1.'].indexOf(textBeforeCursor) >= 0 &&\r\n                !searcher.getNearestNonTextInlineElement()\r\n            );\r\n        }\r\n        return false;\r\n    },\r\n    handleEvent: (event, editor) => {\r\n        editor.runAsync(() => {\r\n            editor.performAutoComplete(() => {\r\n                let searcher = editor.getContentSearcherOfCursor();\r\n                let textBeforeCursor = searcher.getSubStringBefore(3);\r\n                let rangeToDelete = searcher.getRangeFromText(\r\n                    textBeforeCursor,\r\n                    true /*exactMatch*/\r\n                );\r\n\r\n                if (rangeToDelete) {\r\n                    rangeToDelete.deleteContents();\r\n                }\r\n\r\n                // If not explicitly insert br, Chrome/Safari/IE will operate on the previous line\r\n                let tempBr = editor.getDocument().createElement('BR');\r\n                if (Browser.isChrome || Browser.isSafari || Browser.isIE11OrGreater) {\r\n                    editor.insertNode(tempBr);\r\n                }\r\n\r\n                if (textBeforeCursor.indexOf('1.') == 0) {\r\n                    toggleNumbering(editor);\r\n                } else {\r\n                    toggleBullet(editor);\r\n                }\r\n\r\n                editor.deleteNode(tempBr);\r\n            });\r\n        });\r\n    },\r\n};\r\n\r\n/**\r\n * Get an instance of SmartOrderedList edit feature. This feature provides the ability to use different\r\n * number style for different level of numbering list.\r\n * @param styleList The list of number styles used for this feature.\r\n * See https://www.w3schools.com/cssref/pr_list-style-type.asp for more information\r\n */\r\nexport function getSmartOrderedList(\r\n    styleList: string[]\r\n): GenericContentEditFeature<ContentChangedEvent> {\r\n    return {\r\n        keys: [Keys.CONTENTCHANGED], // Triggered by ContentChangedEvent\r\n        shouldHandleEvent: (event, editor) => event.data instanceof HTMLOListElement,\r\n        handleEvent: (event, editor) => {\r\n            let ol = event.data as HTMLOListElement;\r\n            let parentOl = editor.getElementAtCursor('OL', ol.parentNode) as HTMLOListElement;\r\n            if (parentOl) {\r\n                // The style list must has at least one value. If no value is passed in, fallback to decimal\r\n                let styles = styleList && styleList.length > 0 ? styleList : ['decimal'];\r\n                ol.style.listStyle =\r\n                    styles[(styles.indexOf(parentOl.style.listStyle) + 1) % styles.length];\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\nfunction toggleListAndPreventDefault(event: PluginKeyboardEvent, editor: Editor) {\r\n    let listInfo = cacheGetListElement(event, editor);\r\n    if (listInfo) {\r\n        let listElement = listInfo[0];\r\n        let tag = getTagOfNode(listElement);\r\n        if (tag == 'UL') {\r\n            toggleBullet(editor);\r\n        } else if (tag == 'OL') {\r\n            toggleNumbering(editor);\r\n        }\r\n        editor.focus();\r\n        event.rawEvent.preventDefault();\r\n    }\r\n}\r\n\r\nfunction cacheGetListElement(event: PluginKeyboardEvent, editor: Editor) {\r\n    let li = cacheGetElementAtCursor(editor, event, 'LI,TABLE');\r\n    let listElement = li && getTagOfNode(li) == 'LI' && editor.getElementAtCursor('UL,OL', li);\r\n    return listElement ? [listElement, li] : null;\r\n}\r\n","import { cacheGetEventData, ContentEditFeature, Editor, Keys } from 'roosterjs-editor-core';\r\nimport { PluginKeyboardEvent, PositionType } from 'roosterjs-editor-types';\r\nimport {\r\n    getTagOfNode,\r\n    isNodeEmpty,\r\n    splitBalancedNodeRange,\r\n    unwrap,\r\n    wrap,\r\n} from 'roosterjs-editor-dom';\r\n\r\nconst QUOTE_TAG = 'BLOCKQUOTE';\r\nconst STRUCTURED_TAGS = [QUOTE_TAG, 'LI', 'TD', 'TH'].join(',');\r\n\r\n/**\r\n * UnquoteWhenBackOnEmpty1stLine edit feature, provides the ability to Unquote current line when\r\n * user press BACKSPACE on first and empty line of a BLOCKQUOTE\r\n */\r\nexport const UnquoteWhenBackOnEmpty1stLine: ContentEditFeature = {\r\n    keys: [Keys.BACKSPACE],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        return childOfQuote && isNodeEmpty(childOfQuote) && !childOfQuote.previousSibling;\r\n    },\r\n    handleEvent: splitQuote,\r\n};\r\n\r\n/**\r\n * UnquoteWhenEnterOnEmptyLine edit feature, provides the ability to Unquote current line when\r\n * user press ENTER on an empty line of a BLOCKQUOTE\r\n */\r\nexport const UnquoteWhenEnterOnEmptyLine: ContentEditFeature = {\r\n    keys: [Keys.ENTER],\r\n    shouldHandleEvent: (event, editor) => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let shift = event.rawEvent.shiftKey;\r\n        return !shift && childOfQuote && isNodeEmpty(childOfQuote);\r\n    },\r\n    handleEvent: (event, editor) => editor.performAutoComplete(() => splitQuote(event, editor)),\r\n};\r\n\r\nfunction cacheGetQuoteChild(event: PluginKeyboardEvent, editor: Editor): Node {\r\n    return cacheGetEventData(event, 'QUOTE_CHILD', () => {\r\n        let quote = editor.getElementAtCursor(STRUCTURED_TAGS);\r\n        if (quote && getTagOfNode(quote) == QUOTE_TAG) {\r\n            let pos = editor.getFocusedPosition();\r\n            let block = pos && editor.getBlockElementAtNode(pos.normalize().node);\r\n            if (block) {\r\n                let node =\r\n                    block.getStartNode() == quote\r\n                        ? block.getStartNode()\r\n                        : block.collapseToSingleElement();\r\n                return isNodeEmpty(node) ? node : null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    });\r\n}\r\n\r\nfunction splitQuote(event: PluginKeyboardEvent, editor: Editor) {\r\n    editor.addUndoSnapshot(() => {\r\n        let childOfQuote = cacheGetQuoteChild(event, editor);\r\n        let parent: Node;\r\n        if (getTagOfNode(childOfQuote) == QUOTE_TAG) {\r\n            childOfQuote = wrap([].slice.call(childOfQuote.childNodes));\r\n        }\r\n        parent = splitBalancedNodeRange(childOfQuote);\r\n        unwrap(parent);\r\n        editor.select(childOfQuote, PositionType.Begin);\r\n    });\r\n    event.rawEvent.preventDefault();\r\n}\r\n","import buildClipboardData from './buildClipboardData';\r\nimport fragmentHandler from './fragmentHandler';\r\nimport textToHtml from './textToHtml';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport { getFormatState } from 'roosterjs-editor-api';\r\nimport { insertImage } from 'roosterjs-editor-api';\r\nimport {\r\n    AttributeCallbackMap,\r\n    getInheritableStyles,\r\n    HtmlSanitizer,\r\n    htmlToDom,\r\n} from 'roosterjs-html-sanitizer';\r\nimport {\r\n    BeforePasteEvent,\r\n    ChangeSource,\r\n    ClipboardData,\r\n    DefaultFormat,\r\n    NodeType,\r\n    PasteOption,\r\n    PluginEventType,\r\n} from 'roosterjs-editor-types';\r\nimport {\r\n    applyFormat,\r\n    fromHtml,\r\n    getFirstLeafNode,\r\n    getNextLeafSibling,\r\n    Position,\r\n} from 'roosterjs-editor-dom';\r\n\r\n/**\r\n * Paste plugin, handles onPaste event and paste content into editor\r\n */\r\nexport default class Paste implements EditorPlugin {\r\n    private editor: Editor;\r\n    private pasteDisposer: () => void;\r\n    private sanitizer: HtmlSanitizer;\r\n\r\n    /**\r\n     * Create an instance of Paste\r\n     * @param preserved Not used. Preserved parameter only used for compatibility with old code\r\n     * @param attributeCallbacks A set of callbacks to help handle html attribute during sanitization\r\n     */\r\n    constructor(preserved?: any, attributeCallbacks?: AttributeCallbackMap) {\r\n        this.sanitizer = new HtmlSanitizer({\r\n            attributeCallbacks,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Paste';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.pasteDisposer = editor.addDomEventHandler('paste', this.onPaste);\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.pasteDisposer();\r\n        this.pasteDisposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    private onPaste = (event: Event) => {\r\n        buildClipboardData(<ClipboardEvent>event, this.editor, items => {\r\n            this.pasteOriginal({\r\n                snapshotBeforePaste: null,\r\n                originalFormat: this.getCurrentFormat(),\r\n                types: items.types,\r\n                image: items.image,\r\n                text: items.text,\r\n                rawHtml: items.html,\r\n                html: items.html ? this.sanitizeHtml(items.html) : textToHtml(items.text),\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with original format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteOriginal(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData));\r\n    }\r\n\r\n    /**\r\n     * Paste plain text into editor using passed in clipboardData\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteText(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, PasteOption.PasteText);\r\n    }\r\n\r\n    /**\r\n     * Paste into editor using passed in clipboardData with curent format\r\n     * @param clipboardData The clipboardData to paste\r\n     */\r\n    public pasteAndMergeFormat(clipboardData: ClipboardData) {\r\n        this.paste(clipboardData, this.detectPasteOption(clipboardData), true /*mergeFormat*/);\r\n    }\r\n\r\n    private detectPasteOption(clipboardData: ClipboardData): PasteOption {\r\n        return clipboardData.text || !clipboardData.image\r\n            ? PasteOption.PasteHtml\r\n            : PasteOption.PasteImage;\r\n    }\r\n\r\n    private paste(\r\n        clipboardData: ClipboardData,\r\n        pasteOption: PasteOption,\r\n        mergeCurrentFormat?: boolean\r\n    ) {\r\n        let document = this.editor.getDocument();\r\n        let fragment = document.createDocumentFragment();\r\n\r\n        if (pasteOption == PasteOption.PasteHtml) {\r\n            let html = clipboardData.html;\r\n            let nodes = fromHtml(html, document);\r\n\r\n            for (let node of nodes) {\r\n                if (mergeCurrentFormat) {\r\n                    this.applyToElements(node, this.applyFormatting(clipboardData.originalFormat, this.editor.isDarkMode()));\r\n                }\r\n                fragment.appendChild(node);\r\n            }\r\n        }\r\n\r\n        let event = this.editor.triggerPluginEvent(\r\n            PluginEventType.BeforePaste,\r\n            {\r\n                clipboardData,\r\n                fragment,\r\n                pasteOption,\r\n            },\r\n            true /*broadcast*/\r\n        );\r\n        this.internalPaste(event);\r\n    }\r\n\r\n    private internalPaste(event: BeforePasteEvent) {\r\n        let { clipboardData, fragment, pasteOption } = event;\r\n        this.editor.focus();\r\n        this.editor.addUndoSnapshot(() => {\r\n            if (clipboardData.snapshotBeforePaste == null) {\r\n                clipboardData.snapshotBeforePaste = this.editor.getContent(\r\n                    false /*triggerExtractContentEvent*/,\r\n                    true /*markSelection*/\r\n                );\r\n            } else {\r\n                this.editor.setContent(clipboardData.snapshotBeforePaste);\r\n            }\r\n\r\n            switch (pasteOption) {\r\n                case PasteOption.PasteHtml:\r\n                    this.editor.insertNode(fragment);\r\n                    break;\r\n\r\n                case PasteOption.PasteText:\r\n                    let html = textToHtml(clipboardData.text);\r\n                    this.editor.insertContent(html);\r\n                    break;\r\n\r\n                case PasteOption.PasteImage:\r\n                    insertImage(this.editor, clipboardData.image);\r\n                    break;\r\n            }\r\n\r\n            return clipboardData;\r\n        }, ChangeSource.Paste);\r\n    }\r\n\r\n    private applyFormatting = (format: DefaultFormat, isDarkMode: boolean) => (element: HTMLElement) => {\r\n        applyFormat(element, format, isDarkMode);\r\n    }\r\n\r\n    private applyToElements(node: Node, elementTransform: (element: HTMLElement) => void) {\r\n        let leaf = getFirstLeafNode(node);\r\n        let parents: HTMLElement[] = [];\r\n        while (leaf) {\r\n            if (\r\n                leaf.nodeType == NodeType.Text &&\r\n                leaf.parentNode &&\r\n                parents.indexOf(<HTMLElement>leaf.parentNode) < 0\r\n            ) {\r\n                parents.push(<HTMLElement>leaf.parentNode);\r\n            }\r\n            leaf = getNextLeafSibling(node, leaf);\r\n        }\r\n        parents.push(<HTMLElement>node);\r\n        for (let parent of parents) {\r\n            elementTransform(parent);\r\n        }\r\n    }\r\n\r\n    private getCurrentFormat(): DefaultFormat {\r\n        let format = getFormatState(this.editor);\r\n        return format\r\n            ? {\r\n                fontFamily: format.fontName,\r\n                fontSize: format.fontSize,\r\n                textColor: format.textColor,\r\n                backgroundColor: format.backgroundColor,\r\n                bold: format.isBold,\r\n                italic: format.isItalic,\r\n                underline: format.isUnderline,\r\n            }\r\n            : {};\r\n    }\r\n\r\n    private sanitizeHtml(html: string): string {\r\n        let doc = htmlToDom(html, true /*preserveFragmentOnly*/, fragmentHandler);\r\n        if (doc && doc.body) {\r\n            this.sanitizer.convertGlobalCssToInlineCss(doc);\r\n\r\n            let range = this.editor.getSelectionRange();\r\n            let element = range && Position.getStart(range).normalize().element;\r\n            let currentStyles = getInheritableStyles(element);\r\n            this.sanitizer.sanitize(doc.body, currentStyles);\r\n            return doc.body.innerHTML;\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","import { ClipboardItems, ContentPosition } from 'roosterjs-editor-types';\r\nimport { Editor } from 'roosterjs-editor-core';\r\nimport { extractClipboardEvent, fromHtml } from 'roosterjs-editor-dom';\r\n\r\nconst CONTAINER_HTML =\r\n    '<div contenteditable style=\"width: 1px; height: 1px; overflow: hidden; position: fixed; top: 0; left; 0; -webkit-user-select: text\"></div>';\r\n\r\n/**\r\n * Build ClipboardData from a paste event\r\n * @param event The paste event\r\n * @param editor The editor\r\n * @param callback Callback function when data is ready\r\n */\r\nexport default function buildClipboardData(\r\n    event: ClipboardEvent,\r\n    editor: Editor,\r\n    callback: (items: ClipboardItems) => void\r\n) {\r\n    extractClipboardEvent(event, items => {\r\n        if (items.html === undefined) {\r\n            retrieveHtmlViaTempDiv(editor, html => {\r\n                items.html = html;\r\n                callback(items);\r\n            });\r\n        } else {\r\n            callback(items);\r\n        }\r\n    });\r\n}\r\n\r\nfunction retrieveHtmlViaTempDiv(editor: Editor, callback: (html: string) => void) {\r\n    // cache original selection range in editor\r\n    let originalSelectionRange = editor.getSelectionRange();\r\n    let tempDiv = getTempDivForPaste(editor);\r\n    tempDiv.focus();\r\n\r\n    editor.runAsync(() => {\r\n        // restore original selection range in editor\r\n        editor.select(originalSelectionRange);\r\n        callback(tempDiv.innerHTML);\r\n        tempDiv.style.display = 'none';\r\n        tempDiv.innerHTML = '';\r\n    });\r\n}\r\n\r\nfunction getTempDivForPaste(editor: Editor): HTMLElement {\r\n    let tempDiv = editor.getCustomData(\r\n        'PasteDiv',\r\n        () => {\r\n            let pasteDiv = fromHtml(CONTAINER_HTML, editor.getDocument())[0] as HTMLElement;\r\n            editor.insertNode(pasteDiv, {\r\n                position: ContentPosition.Outside,\r\n                updateCursor: false,\r\n                replaceSelection: false,\r\n                insertOnNewLine: false,\r\n            });\r\n            return pasteDiv;\r\n        },\r\n        pasteDiv => {\r\n            pasteDiv.parentNode.removeChild(pasteDiv);\r\n        }\r\n    );\r\n    tempDiv.style.display = '';\r\n    return tempDiv;\r\n}\r\n","import convertPastedContentFromExcel from './excelConverter/convertPastedContentFromExcel';\r\nimport convertPastedContentFromWord from './wordConverter/convertPastedContentFromWord';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { splitWithFragment } from 'roosterjs-html-sanitizer';\r\n\r\nconst WORD_ATTRIBUTE_NAME = 'xmlns:w';\r\nconst WORD_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:word';\r\nconst EXCEL_ATTRIBUTE_NAME = 'xmlns:x';\r\nconst EXCEL_ATTRIBUTE_VALUE = 'urn:schemas-microsoft-com:office:excel';\r\n\r\nconst LAST_TD_END_REGEX = /<\\/\\s*td\\s*>((?!<\\/\\s*tr\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_END_REGEX = /<\\/\\s*tr\\s*>((?!<\\/\\s*table\\s*>)[\\s\\S])*$/i;\r\nconst LAST_TR_REGEX = /<tr[^>]*>[^<]*/i;\r\nconst LAST_TABLE_REGEX = /<table[^>]*>[^<]*/i;\r\n\r\nexport default function fragmentHandler(doc: HTMLDocument, source: string) {\r\n    let [html, before] = splitWithFragment(source);\r\n    let firstNode = doc && doc.body && (doc.querySelector('html') as HTMLElement);\r\n    if (getTagOfNode(firstNode) == 'HTML') {\r\n        if (firstNode.getAttribute(WORD_ATTRIBUTE_NAME) == WORD_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Word\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromWord(doc);\r\n        } else if (firstNode.getAttribute(EXCEL_ATTRIBUTE_NAME) == EXCEL_ATTRIBUTE_VALUE) {\r\n            // Handle HTML copied from MS Excel\r\n            if (html.match(LAST_TD_END_REGEX)) {\r\n                let trMatch = before.match(LAST_TR_REGEX);\r\n                let tr = trMatch ? trMatch[0] : '<TR>';\r\n                html = tr + html + '</TR>';\r\n            }\r\n            if (html.match(LAST_TR_END_REGEX)) {\r\n                let tableMatch = before.match(LAST_TABLE_REGEX);\r\n                let table = tableMatch ? tableMatch[0] : '<TABLE>';\r\n                html = table + html + '</TABLE>';\r\n            }\r\n            doc.body.innerHTML = html;\r\n            convertPastedContentFromExcel(doc);\r\n        } else {\r\n            // Handle HTML copied from other places\r\n            doc.body.innerHTML = html;\r\n        }\r\n    }\r\n}\r\n","import { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\n\r\n/**\r\n * Convert pasted content from Excel, add borders when source doc doesn't have a border\r\n * @param doc HTML Document which contains the content from Excel\r\n */\r\nexport default function convertPastedContentFromExcel(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        styleCallbacks: {\r\n            border: (value, element) => value != 'none' || element.style.border != 'none',\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let styleNode = doc.createElement('style');\r\n    doc.body.appendChild(styleNode);\r\n    styleNode.innerHTML = 'td {border: solid 1px #d4d4d4}';\r\n    sanitizer.convertGlobalCssToInlineCss(doc);\r\n}\r\n","import getInheritableStyles from '../utils/getInheritableStyles';\r\nimport HtmlSanitizerOptions from '../types/HtmlSanitizerOptions';\r\nimport htmlToDom from '../utils/htmlToDom';\r\nimport SanitizeHtmlOptions from '../types/SanitizeHtmlOptions';\r\nimport { cloneObject } from '../utils/cloneObject';\r\nimport {\r\n    StringMap,\r\n    StyleCallbackMap,\r\n    ElementCallbackMap,\r\n    AttributeCallbackMap,\r\n} from '../types/maps';\r\nimport {\r\n    getAllowedAttributes,\r\n    getAllowedTags,\r\n    getDefaultStyleValues,\r\n    getStyleCallbacks,\r\n} from '../utils/getAllowedValues';\r\n\r\n/**\r\n * HTML sanitizer class provides two featuers:\r\n * 1. Convert global CSS to inline CSS\r\n * 2. Sanitize an HTML document, remove unnecessary/dangerous attribute/nodes\r\n */\r\nexport default class HtmlSanitizer {\r\n    /**\r\n     * Convert global CSS to inline CSS if any\r\n     * @param html HTML source\r\n     * @param additionalStyleNodes (Optional) additional HTML STYLE elements used as global CSS\r\n     */\r\n    static convertInlineCss(html: string, additionalStyleNodes?: HTMLStyleElement[]) {\r\n        let sanitizer = new HtmlSanitizer({\r\n            additionalGlobalStyleNodes: additionalStyleNodes,\r\n        });\r\n        return sanitizer.exec(html, true /*convertCssOnly*/);\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string, remove any unuseful HTML node/attribute/CSS.\r\n     * @param html HTML source string\r\n     * @param options Options used for this sanitizing process\r\n     */\r\n    static sanitizeHtml(html: string, options?: SanitizeHtmlOptions) {\r\n        options = options || {};\r\n        let sanitizer = new HtmlSanitizer(options);\r\n        let currentStyles =\r\n            options.currentElementOrStyle instanceof HTMLElement\r\n                ? getInheritableStyles(options.currentElementOrStyle)\r\n                : options.currentElementOrStyle;\r\n        return sanitizer.exec(\r\n            html,\r\n            options.convertCssOnly,\r\n            options.preserveFragmentOnly,\r\n            currentStyles\r\n        );\r\n    }\r\n\r\n    private elementCallbacks: ElementCallbackMap;\r\n    private styleCallbacks: StyleCallbackMap;\r\n    private attributeCallbacks: AttributeCallbackMap;\r\n    private allowedTags: string[];\r\n    private allowedAttributes: string[];\r\n    private defaultStyleValues: StringMap;\r\n    private additionalGlobalStyleNodes: HTMLStyleElement[];\r\n    private allowPreserveWhiteSpace: boolean;\r\n\r\n    /**\r\n     * Construct a new instance of HtmlSanitizer\r\n     * @param options Options for HtmlSanitizer\r\n     */\r\n    constructor(options?: HtmlSanitizerOptions) {\r\n        options = options || {};\r\n        this.elementCallbacks = cloneObject(options.elementCallbacks);\r\n        this.styleCallbacks = getStyleCallbacks(options.styleCallbacks);\r\n        this.attributeCallbacks = cloneObject(options.attributeCallbacks);\r\n        this.allowedTags = getAllowedTags(options.additionalAllowedTags);\r\n        this.allowedAttributes = getAllowedAttributes(options.additionalAllowAttributes);\r\n        this.defaultStyleValues = getDefaultStyleValues(options.additionalDefaultStyleValues);\r\n        this.additionalGlobalStyleNodes = options.additionalGlobalStyleNodes || [];\r\n        this.allowPreserveWhiteSpace = options.allowPreserveWhiteSpace;\r\n    }\r\n\r\n    /**\r\n     * Sanitize HTML string\r\n     * This function will do the following work:\r\n     * 1. Convert global CSS into inline CSS\r\n     * 2. Remove dangerous HTML tags and attributes\r\n     * 3. Remove useless CSS properties\r\n     * @param html The input HTML\r\n     * @param convertInlineCssOnly Whether only convert inline css and skip html content sanitizing\r\n     * @param preserveFragmentOnly If set to true, only preserve the html content between &lt;!--StartFragment--&gt; and &lt;!--Endfragment--&gt;\r\n     * @param currentStyles Current inheritable CSS styles\r\n     */\r\n    exec(\r\n        html: string,\r\n        convertCssOnly?: boolean,\r\n        preserveFragmentOnly?: boolean,\r\n        currentStyles?: StringMap\r\n    ): string {\r\n        let doc = htmlToDom(html, preserveFragmentOnly);\r\n        if (doc) {\r\n            this.convertGlobalCssToInlineCss(doc);\r\n            if (!convertCssOnly) {\r\n                this.sanitize(doc.body, currentStyles);\r\n            }\r\n        }\r\n        return (doc && doc.body && doc.body.innerHTML) || '';\r\n    }\r\n\r\n    /**\r\n     * Sanitize an HTML element, remove unnecessary or dangerous elements/attribute/CSS rules\r\n     * @param rootNode Root node to sanitize\r\n     * @param currentStyles Current CSS styles. Inheritable styles in the given node which has\r\n     * the same value with current styles will be ignored.\r\n     */\r\n    sanitize(rootNode: HTMLElement, currentStyles?: StringMap) {\r\n        if (!rootNode) {\r\n            return '';\r\n        }\r\n        currentStyles = cloneObject(currentStyles, getInheritableStyles(null));\r\n        this.processNode(rootNode, currentStyles, {});\r\n    }\r\n\r\n    /**\r\n     * Convert global CSS into inline CSS\r\n     * @param rootNode The HTML Document\r\n     */\r\n    convertGlobalCssToInlineCss(rootNode: HTMLDocument) {\r\n        let styleNodes = toArray(rootNode.querySelectorAll('style'));\r\n        let styleSheets = this.additionalGlobalStyleNodes\r\n            .reverse()\r\n            .map(node => node.sheet as CSSStyleSheet)\r\n            .concat(styleNodes.map(node => node.sheet as CSSStyleSheet).reverse())\r\n            .filter(sheet => sheet);\r\n        for (let styleSheet of styleSheets) {\r\n            for (let j = styleSheet.cssRules.length - 1; j >= 0; j--) {\r\n                // Skip any none-style rule, i.e. @page\r\n                let styleRule = styleSheet.cssRules[j] as CSSStyleRule;\r\n                let text = styleRule && styleRule.style ? styleRule.style.cssText : null;\r\n                if (styleRule.type != CSSRule.STYLE_RULE || !text || !styleRule.selectorText) {\r\n                    continue;\r\n                }\r\n                // Make sure the selector is not empty\r\n                for (let selector of styleRule.selectorText.split(',')) {\r\n                    if (!selector || !selector.trim() || selector.indexOf(':') >= 0) {\r\n                        continue;\r\n                    }\r\n                    let nodes = toArray(rootNode.querySelectorAll(selector));\r\n                    // Always put existing styles after so that they have higher priority\r\n                    // Which means if both global style and inline style apply to the same element,\r\n                    // inline style will have higher priority\r\n                    nodes.forEach(node =>\r\n                        node.setAttribute('style', text + (node.getAttribute('style') || ''))\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        styleNodes.forEach(node => {\r\n            if (node.parentNode) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    private processNode(node: Node, currentStyle: StringMap, context: Object) {\r\n        let nodeType = node.nodeType;\r\n        let isElement = nodeType == Node.ELEMENT_NODE;\r\n        let isText = nodeType == Node.TEXT_NODE;\r\n        let element = <HTMLElement>node;\r\n        let tag = isElement ? element.tagName.toUpperCase() : '';\r\n\r\n        if (\r\n            (isElement && !this.allowElement(element, tag, context)) ||\r\n            (isText && /^[\\r\\n]*$/g.test(node.nodeValue) && !currentStyle.insidePRE) ||\r\n            (!isElement && !isText)\r\n        ) {\r\n            node.parentNode.removeChild(node);\r\n        } else if (\r\n            isText &&\r\n            !this.allowPreserveWhiteSpace &&\r\n            currentStyle['white-space'] == 'pre'\r\n        ) {\r\n            node.nodeValue = node.nodeValue.replace(/^ /gm, '\\u00A0').replace(/ {2}/g, ' \\u00A0');\r\n        } else if (isElement) {\r\n            let thisStyle = cloneObject(currentStyle);\r\n            this.processAttributes(element, context);\r\n            this.processCss(element, tag, thisStyle, context);\r\n\r\n            // Special handling for PRE tag, need to preserve \\r\\n inside PRE\r\n            if (tag == 'PRE') {\r\n                thisStyle.insidePRE = 'true';\r\n            }\r\n\r\n            let child: Node = element.firstChild;\r\n            let next: Node;\r\n            for (; child; child = next) {\r\n                next = child.nextSibling;\r\n                this.processNode(child, thisStyle, context);\r\n            }\r\n        }\r\n    }\r\n\r\n    private processCss(element: HTMLElement, tag: string, thisStyle: StringMap, context: Object) {\r\n        let styleNode = element.getAttributeNode('style');\r\n        if (!styleNode) {\r\n            return;\r\n        }\r\n\r\n        let source = styleNode.value.split(';');\r\n        let result = source.filter(style => {\r\n            let pair: string[];\r\n\r\n            if (!style || style.trim() == '' || (pair = style.split(':')).length != 2) {\r\n                return false;\r\n            }\r\n\r\n            let name = pair[0].trim().toLowerCase();\r\n            let value = pair[1].trim().toLowerCase();\r\n            let callback = this.styleCallbacks[name];\r\n            let isInheritable = thisStyle[name] != undefined;\r\n            let keep =\r\n                (!callback || callback(value, element, context)) &&\r\n                value != 'inherit' &&\r\n                value.indexOf('expression') < 0 &&\r\n                name.substr(0, 1) != '-' &&\r\n                this.defaultStyleValues[name] != value &&\r\n                ((isInheritable && value != thisStyle[name]) ||\r\n                    (!isInheritable && value != 'initial' && value != 'normal'));\r\n            if (keep && isInheritable) {\r\n                thisStyle[name] = value;\r\n            }\r\n            return keep && (this.allowPreserveWhiteSpace || name != 'white-space');\r\n        });\r\n\r\n        if (source.length != result.length) {\r\n            if (result.length > 0) {\r\n                element.setAttribute('style', result.map(s => s.trim()).join('; '));\r\n            } else {\r\n                element.removeAttribute('style');\r\n            }\r\n        }\r\n    }\r\n\r\n    private processAttributes(element: HTMLElement, context: Object) {\r\n        for (let i = element.attributes.length - 1; i >= 0; i--) {\r\n            let attribute = element.attributes[i];\r\n            let name = attribute.name.toLowerCase().trim();\r\n            let value = attribute.value;\r\n            let callback = this.attributeCallbacks[name];\r\n\r\n            if (callback) {\r\n                value = callback(value, element, context);\r\n            } else if (this.allowedAttributes.indexOf(name) < 0) {\r\n                value = null;\r\n            }\r\n\r\n            if (\r\n                value === null ||\r\n                value === undefined ||\r\n                value.toLowerCase().indexOf('script:') >= 0\r\n            ) {\r\n                element.removeAttribute(name);\r\n            } else {\r\n                attribute.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    private allowElement(element: HTMLElement, tag: string, context: Object): boolean {\r\n        let callback = this.elementCallbacks[tag];\r\n        return callback\r\n            ? callback(element, context)\r\n            : this.allowedTags.indexOf(tag) >= 0 || tag.indexOf(':') > 0;\r\n    }\r\n}\r\n\r\nfunction toArray<T extends Node>(list: NodeListOf<T>): T[] {\r\n    return [].slice.call(list) as T[];\r\n}\r\n","import { cloneObject } from './cloneObject';\r\nimport { StringMap, StyleCallbackMap } from '../types/maps';\r\n\r\nconst ALLOWED_HTML_TAGS = (\r\n    'BODY,H1,H2,H3,H4,H5,H6,FORM,P,BR,NOBR,HR,ACRONYM,ABBR,ADDRESS,B,' +\r\n    'BDI,BDO,BIG,BLOCKQUOTE,CENTER,CITE,CODE,DEL,DFN,EM,FONT,I,INS,KBD,MARK,METER,PRE,PROGRESS,' +\r\n    'Q,RP,RT,RUBY,S,SAMP,SMALL,STRIKE,STRONG,SUB,SUP,TEMPLATE,TIME,TT,U,VAR,WBR,XMP,INPUT,TEXTAREA,' +\r\n    'BUTTON,SELECT,OPTGROUP,OPTION,LABEL,FIELDSET,LEGEND,DATALIST,OUTPUT,IMG,MAP,AREA,CANVAS,FIGCAPTION,' +\r\n    'FIGURE,PICTURE,A,NAV,UL,OL,LI,DIR,UL,DL,DT,DD,MENU,MENUITEM,TABLE,CAPTION,TH,TR,TD,THEAD,TBODY,' +\r\n    'TFOOT,COL,COLGROUP,DIV,SPAN,HEADER,FOOTER,MAIN,SECTION,ARTICLE,ASIDE,DETAILS,DIALOG,SUMMARY,DATA'\r\n).split(',');\r\n\r\nconst ALLOWED_HTML_ATTRIBUTES = (\r\n    'accept,align,alt,checked,cite,color,cols,colspan,contextmenu,' +\r\n    'coords,datetime,default,dir,dirname,disabled,download,face,headers,height,hidden,high,href,' +\r\n    'hreflang,ismap,kind,label,lang,list,low,max,maxlength,media,min,multiple,open,optimum,pattern,' +\r\n    'placeholder,readonly,rel,required,reversed,rows,rowspan,scope,selected,shape,size,sizes,span,' +\r\n    'spellcheck,src,srclang,srcset,start,step,style,tabindex,target,title,translate,type,usemap,value,' +\r\n    'width,wrap'\r\n).split(',');\r\n\r\nconst DEFAULT_STYLE_VALUES: { [name: string]: string } = {\r\n    'background-color': 'transparent',\r\n    'border-bottom-color': 'rgb(0, 0, 0)',\r\n    'border-bottom-style': 'none',\r\n    'border-bottom-width': '0px',\r\n    'border-image-outset': '0',\r\n    'border-image-repeat': 'stretch',\r\n    'border-image-slice': '100%',\r\n    'border-image-source': 'none',\r\n    'border-image-width': '1',\r\n    'border-left-color': 'rgb(0, 0, 0)',\r\n    'border-left-style': 'none',\r\n    'border-left-width': '0px',\r\n    'border-right-color': 'rgb(0, 0, 0)',\r\n    'border-right-style': 'none',\r\n    'border-right-width': '0px',\r\n    'border-top-color': 'rgb(0, 0, 0)',\r\n    'border-top-style': 'none',\r\n    'border-top-width': '0px',\r\n    'outline-color': 'transparent',\r\n    'outline-style': 'none',\r\n    'outline-width': '0px',\r\n    overflow: 'visible',\r\n    'text-decoration': 'none',\r\n    '-webkit-text-stroke-width': '0px',\r\n    'word-wrap': 'break-word',\r\n    'margin-left': '0px',\r\n    'margin-right': '0px',\r\n    padding: '0px',\r\n    'padding-top': '0px',\r\n    'padding-left': '0px',\r\n    'padding-right': '0px',\r\n    'padding-bottom': '0px',\r\n    border: '0px',\r\n    'border-top': '0px',\r\n    'border-left': '0px',\r\n    'border-right': '0px',\r\n    'border-bottom': '0px',\r\n    'vertical-align': 'baseline',\r\n    float: 'none',\r\n};\r\n\r\nexport function getAllowedTags(additionalTags: string[]): string[] {\r\n    return unique(ALLOWED_HTML_TAGS.concat(additionalTags || [])).map(tag => tag.toUpperCase());\r\n}\r\n\r\nexport function getAllowedAttributes(additionalAttributes: string[]): string[] {\r\n    return unique(ALLOWED_HTML_ATTRIBUTES.concat(additionalAttributes || [])).map(attr =>\r\n        attr.toLocaleLowerCase()\r\n    );\r\n}\r\n\r\nexport function getDefaultStyleValues(additionalDefaultStyles: StringMap): StringMap {\r\n    let result = cloneObject(DEFAULT_STYLE_VALUES);\r\n    if (additionalDefaultStyles) {\r\n        Object.keys(additionalDefaultStyles).forEach(name => {\r\n            let value = additionalDefaultStyles[name];\r\n            if (value !== null && value !== undefined) {\r\n                result[name] = value;\r\n            } else {\r\n                delete result[name];\r\n            }\r\n        });\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function getStyleCallbacks(callbacks: StyleCallbackMap): StyleCallbackMap {\r\n    let result = cloneObject(callbacks);\r\n    result.position = result.position || removeValue;\r\n    result.width = result.width || removeWidthForLiAndDiv;\r\n    return result;\r\n}\r\n\r\nfunction removeValue(): null {\r\n    return null;\r\n}\r\n\r\nfunction removeWidthForLiAndDiv(value: string, element: HTMLElement) {\r\n    let tag = element.tagName;\r\n    return !(tag == 'LI' || tag == 'DIV');\r\n}\r\n\r\nfunction unique<T>(array: T[]): T[] {\r\n    return array.filter((value, index, self) => self.indexOf(value) == index);\r\n}\r\n","import { createWordConverter } from './wordConverter';\r\nimport { createWordConverterArguments } from './WordConverterArguments';\r\nimport { HtmlSanitizer } from 'roosterjs-html-sanitizer';\r\nimport { processNodeConvert, processNodesDiscovery } from './converterUtils';\r\n\r\n/** Converts all the Word generated list items in the specified node into standard HTML UL and OL tags */\r\nexport default function convertPastedContentFromWord(doc: HTMLDocument) {\r\n    let sanitizer = new HtmlSanitizer({\r\n        elementCallbacks: {\r\n            ['O:P']: () => false,\r\n        },\r\n        additionalAllowAttributes: ['class'],\r\n    });\r\n    sanitizer.sanitize(doc.body);\r\n\r\n    let wordConverter = createWordConverter();\r\n\r\n    // First find all the nodes that we need to check for list item information\r\n    // This call will return all the p and header elements under the root node.. These are the elements that\r\n    // Word uses a list items, so we'll only process them and avoid walking the whole tree.\r\n    let elements = doc.querySelectorAll('p');\r\n    if (elements.length > 0) {\r\n        wordConverter.wordConverterArgs = createWordConverterArguments(elements);\r\n        if (processNodesDiscovery(wordConverter)) {\r\n            processNodeConvert(wordConverter);\r\n        }\r\n    }\r\n}\r\n","import CustomData, { createCustomData } from './CustomData';\r\nimport WordConverterArguments from './WordConverterArguments';\r\n\r\n/** Processes HTML generated by Word, converting Word Lists into standard HTML UL and OL tags */\r\nexport default interface WordConverter {\r\n    /** Next unique id to be assigned to a list */\r\n    nextUniqueId: number;\r\n\r\n    /** Number of bullets converted */\r\n    numBulletsConverted: number;\r\n\r\n    /** Number of numbering converted */\r\n    numNumberedConverted: number;\r\n\r\n    /** The structure that records the status of the conversion */\r\n    wordConverterArgs: WordConverterArguments;\r\n\r\n    /** Custom data storage for list items */\r\n    customData: CustomData;\r\n}\r\n\r\n/** create an empty WordConverter */\r\nexport function createWordConverter(): WordConverter {\r\n    return {\r\n        nextUniqueId: 1,\r\n        numBulletsConverted: 0,\r\n        numNumberedConverted: 0,\r\n        wordConverterArgs: null,\r\n        customData: createCustomData(),\r\n    };\r\n}\r\n","import LevelLists, { createLevelLists } from './LevelLists';\r\nimport ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\n\r\n/** Contains the state of the WordConverter when called back after yielding */\r\nexport default interface WordConverterArguments {\r\n    /** The list of element nodes being processed */\r\n    nodes: NodeListOf<HTMLElement>;\r\n\r\n    /** The index of the element currently being processed */\r\n    currentIndex: number;\r\n\r\n    /**\r\n     * Holds the metadata for all the lists we have found\r\n     * key: unique list id, value: list metadata\r\n     */\r\n    lists: { [key: string]: ListMetadata };\r\n\r\n    /**\r\n     * Stores the list item metatada of the items we\r\n     * have found that need to be converted\r\n     */\r\n    listItems: ListItemMetadata[];\r\n\r\n    /**\r\n     * This array holds the list id of the lists we are processing\r\n     * that are next to each other.. This list will be used to determine\r\n     * if list items are next to each other or if they are separated...\r\n     * Separated items are ignored from the conversion\r\n     */\r\n\r\n    currentListIdsByLevels: LevelLists[];\r\n\r\n    /** Remembers the item that was last processed  */\r\n    lastProcessedItem: HTMLElement;\r\n}\r\n\r\n/** create an empty WordConverterArguments */\r\nexport function createWordConverterArguments(\r\n    nodes: NodeListOf<HTMLElement>\r\n): WordConverterArguments {\r\n    return {\r\n        nodes: nodes,\r\n        currentIndex: 0,\r\n        lists: {},\r\n        listItems: [],\r\n        currentListIdsByLevels: [createLevelLists()],\r\n        lastProcessedItem: null,\r\n    };\r\n}\r\n","import ListItemMetadata from './ListItemMetadata';\r\nimport ListMetadata from './ListMetadata';\r\nimport WordConverter from './wordConverter';\r\nimport WordConverterArguments from './WordConverterArguments';\r\nimport { createLevelLists } from './LevelLists';\r\nimport { getObject, setObject } from './CustomData';\r\nimport { getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { NodeType } from 'roosterjs-editor-types';\r\n\r\n/** Word list metadata style name */\r\nconst LOOKUP_DEPTH = 5;\r\n\r\n/** Name for the word list id property in the custom data */\r\nconst UNIQUE_LIST_ID_CUSTOM_DATA = 'UniqueListId';\r\n\r\n/** Word list metadata style name */\r\nconst MSO_LIST_STYLE_NAME = 'mso-list';\r\n\r\n/** Regular expression to match line breaks */\r\nconst LINE_BREAKS = /[\\n|\\r]/gi;\r\n\r\n/**\r\n * Handles the pass 1: Discovery\r\n * During discovery, we'll parse the metadata out of the elements and store it in the list items dictionary.\r\n * We'll detect cases where the list items for a particular ordered list are not next to each other. Word does these\r\n * for numbered headers, and we don't want to convert those, because the numbering would be completely wrong.\r\n */\r\nexport function processNodesDiscovery(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    while (args.currentIndex < args.nodes.length) {\r\n        let node = args.nodes.item(args.currentIndex);\r\n\r\n        // Try to get the list metadata for the specified node\r\n        let itemMetadata = getListItemMetadata(node);\r\n        if (itemMetadata) {\r\n            let levelInfo =\r\n                args.currentListIdsByLevels[itemMetadata.level - 1] || createLevelLists();\r\n            args.currentListIdsByLevels[itemMetadata.level - 1] = levelInfo;\r\n\r\n            // We need to drop some list information if this is not an item next to another\r\n            if (args.lastProcessedItem && getRealPreviousSibling(node) != args.lastProcessedItem) {\r\n                // This list item is not next to the previous one. This means that there is some content in between them\r\n                // so we need to reset our list of list ids per level\r\n                resetCurrentLists(args);\r\n            }\r\n\r\n            // Get the list metadata for the list that will hold this item\r\n            let listMetadata = levelInfo.listsMetadata[itemMetadata.wordListId];\r\n            if (!listMetadata) {\r\n                // Get the first item fake bullet.. This will be used later to check what is the right type of list\r\n                let firstFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n\r\n                // This is a the first item of a list.. We'll create the list metadata using the information\r\n                // we already have from this first item\r\n                listMetadata = {\r\n                    numberOfItems: 0,\r\n                    uniqueListId: wordConverter.nextUniqueId++,\r\n                    firstFakeBullet: firstFakeBullet,\r\n\r\n                    // If the bullet we got is emtpy or not found, we ignore the list out.. this means\r\n                    // that this is not an item we need to convert of that the format doesn't match what\r\n                    // we are expecting\r\n                    ignore: !firstFakeBullet || firstFakeBullet.length == 0,\r\n\r\n                    // We'll use the first fake bullet to try to figure out which type of list we create. If this list has a second\r\n                    // item, we'll perform a better comparasion, but for one item lists, this will be check that will determine the list type\r\n                    tagName: getFakeBulletTagName(firstFakeBullet),\r\n                };\r\n                levelInfo.listsMetadata[itemMetadata.wordListId] = listMetadata;\r\n                args.lists[listMetadata.uniqueListId.toString()] = listMetadata;\r\n            } else if (!listMetadata.ignore && listMetadata.numberOfItems == 1) {\r\n                // This is the second item we've seen for this list.. we'll compare the 2 fake bullet\r\n                // items we have an decide if we create ordered or unordered lists based on this.\r\n                // This is the best way we can do this since we cannot read the metadata that Word\r\n                // puts in the head of the HTML...\r\n                let secondFakeBullet = getFakeBulletText(node, LOOKUP_DEPTH);\r\n                listMetadata.tagName =\r\n                    listMetadata.firstFakeBullet == secondFakeBullet ? 'UL' : 'OL';\r\n            }\r\n\r\n            // Set the unique id to the list\r\n            itemMetadata.uniqueListId = listMetadata.uniqueListId;\r\n\r\n            // Check if we need to ignore this list... we'll either know already that we need to ignore\r\n            // it, or we'll know it because the previous list items are not next to this one\r\n            if (\r\n                listMetadata.ignore ||\r\n                (listMetadata.tagName == 'OL' &&\r\n                    listMetadata.numberOfItems > 0 &&\r\n                    levelInfo.currentUniqueListId != itemMetadata.uniqueListId)\r\n            ) {\r\n                // We need to ignore this item... and we also need to forget about the lists that\r\n                // are not at the root level\r\n                listMetadata.ignore = true;\r\n                args.currentListIdsByLevels[0].currentUniqueListId = -1;\r\n                args.currentListIdsByLevels = args.currentListIdsByLevels.slice(0, 1);\r\n            } else {\r\n                // This is an item we don't need to ignore... If added lists deep under this one before\r\n                // we'll drop their ids from the list of ids per level.. this is because this list item\r\n                // breaks the deeper lists.\r\n                if (args.currentListIdsByLevels.length > itemMetadata.level) {\r\n                    args.currentListIdsByLevels = args.currentListIdsByLevels.slice(\r\n                        0,\r\n                        itemMetadata.level\r\n                    );\r\n                }\r\n\r\n                levelInfo.currentUniqueListId = itemMetadata.uniqueListId;\r\n\r\n                // Add the list item into the list of items to be processed\r\n                args.listItems.push(itemMetadata);\r\n                listMetadata.numberOfItems++;\r\n            }\r\n\r\n            args.lastProcessedItem = node;\r\n        } else {\r\n            // Here, we know that this is not a list item, but we'll want to check if it is one \"no bullet\" list items...\r\n            // these can be created by creating a bullet and hitting delete on it it... The content will continue to be indented, but there will\r\n            // be no bullet and the list will continue correctly after that. Visually, it looks like the previous item has multiple lines, but\r\n            // the HTML generated has multiple paragraphs with the same class. We'll merge these when we find them, so the logic doesn't skips\r\n            // the list conversion thinking that the list items are not together...\r\n            let last = args.lastProcessedItem;\r\n            if (\r\n                last &&\r\n                getRealPreviousSibling(node) == last &&\r\n                node.tagName == last.tagName &&\r\n                node.className == last.className\r\n            ) {\r\n                // Add 2 line breaks and move all the nodes to the last item\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                last.appendChild(last.ownerDocument.createElement('br'));\r\n                while (node.firstChild != null) {\r\n                    last.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Remove the item that we don't need anymore\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        }\r\n\r\n        // Move to the next element are return true if more elements need to be processed\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return args.listItems.length > 0;\r\n}\r\n\r\n/**\r\n * Handles the pass 2: Conversion\r\n * During conversion, we'll go over the elements that belong to a list that we've marked as a list to convert, and we'll perform the\r\n * conversion needed\r\n */\r\nexport function processNodeConvert(wordConverter: WordConverter): boolean {\r\n    let args = wordConverter.wordConverterArgs;\r\n    args.currentIndex = 0;\r\n\r\n    while (args.currentIndex < args.listItems.length) {\r\n        let metadata = args.listItems[args.currentIndex];\r\n        let node = metadata.originalNode;\r\n        let listMetadata = args.lists[metadata.uniqueListId.toString()];\r\n        if (!listMetadata.ignore) {\r\n            // We have a list item that we need to convert, get or create the list\r\n            // that hold this item out\r\n            let list = getOrCreateListForNode(wordConverter, node, metadata, listMetadata);\r\n            if (list) {\r\n                // Clean the element out.. this call gets rid of the fake bullet and unneeded nodes\r\n                cleanupListIgnore(node, LOOKUP_DEPTH);\r\n\r\n                // Create a new list item and transfer the children\r\n                let li = node.ownerDocument.createElement('LI');\r\n                while (node.firstChild) {\r\n                    li.appendChild(node.firstChild);\r\n                }\r\n\r\n                // Append the list item into the list\r\n                list.appendChild(li);\r\n\r\n                // Remove the node we just converted\r\n                node.parentNode.removeChild(node);\r\n\r\n                if (listMetadata.tagName == 'UL') {\r\n                    wordConverter.numBulletsConverted++;\r\n                } else {\r\n                    wordConverter.numNumberedConverted++;\r\n                }\r\n            }\r\n        }\r\n\r\n        args.currentIndex++;\r\n    }\r\n\r\n    return wordConverter.numBulletsConverted > 0 || wordConverter.numNumberedConverted > 0;\r\n}\r\n\r\n/**\r\n * Gets or creates the list (UL or OL) that holds this item out based on the\r\n * items content and the specified metadata\r\n */\r\nfunction getOrCreateListForNode(\r\n    wordConverter: WordConverter,\r\n    node: HTMLElement,\r\n    metadata: ListItemMetadata,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // First get the last list next to this node under the specified level. This code\r\n    // path will return the list or will create lists if needed\r\n    let list = recurringGetOrCreateListAtNode(node, metadata.level, listMetadata);\r\n\r\n    // Here use the unique list ID to detect if we have the right list...\r\n    // it is possible to have 2 different lists next to each other with different formats, so\r\n    // we want to detect this an create separate lists for those cases\r\n    let listId = getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA);\r\n\r\n    // If we have a list with and ID, but the ID is different than the ID for this list item, this\r\n    // is a completely new list, so we'll append a new list for that\r\n    if ((listId && listId != metadata.uniqueListId) || (!listId && list.firstChild)) {\r\n        let newList = node.ownerDocument.createElement(listMetadata.tagName);\r\n        list.parentNode.insertBefore(newList, list.nextSibling);\r\n        list = newList;\r\n    }\r\n\r\n    // Set the list id into the custom data\r\n    setObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA, metadata.uniqueListId);\r\n\r\n    // This call will convert the list if needed to the right type of list required. This can happen\r\n    // on the cases where the first list item for this list is located after a deeper list. for that\r\n    // case, we will have created a UL for it, and we may need to convert it\r\n    return convertListIfNeeded(wordConverter, list, listMetadata);\r\n}\r\n\r\n/**\r\n * Converts the list between UL and OL if needed, by using the fake bullet and\r\n * information already stored in the list itself\r\n */\r\nfunction convertListIfNeeded(\r\n    wordConverter: WordConverter,\r\n    list: Node,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    // Check if we need to convert the list out\r\n    if (listMetadata.tagName != getTagOfNode(list)) {\r\n        // We have the wrong list type.. convert it, set the id again and tranfer all the childs\r\n        let newList = list.ownerDocument.createElement(listMetadata.tagName);\r\n        setObject(\r\n            wordConverter.customData,\r\n            newList,\r\n            UNIQUE_LIST_ID_CUSTOM_DATA,\r\n            getObject(wordConverter.customData, list, UNIQUE_LIST_ID_CUSTOM_DATA)\r\n        );\r\n        while (list.firstChild) {\r\n            newList.appendChild(list.firstChild);\r\n        }\r\n        list.parentNode.insertBefore(newList, list);\r\n        list.parentNode.removeChild(list);\r\n        list = newList;\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\n/**\r\n * Gets or creates the specified list\r\n */\r\nfunction recurringGetOrCreateListAtNode(\r\n    node: HTMLElement,\r\n    level: number,\r\n    listMetadata: ListMetadata\r\n): Node {\r\n    let parent: Node = null;\r\n    let possibleList: Node;\r\n    if (level == 1) {\r\n        // Root case, we'll check if the list is the previous sibling of the node\r\n        possibleList = getRealPreviousSibling(node);\r\n    } else {\r\n        // If we get here, we are looking for level 2 or deeper... get the upper list\r\n        // and check if the last element is a list\r\n        parent = recurringGetOrCreateListAtNode(node, level - 1, null);\r\n        possibleList = parent.lastChild;\r\n    }\r\n\r\n    // Check the element that we got and verify that it is a list\r\n    if (possibleList && possibleList.nodeType == NodeType.Element) {\r\n        let tag = getTagOfNode(possibleList);\r\n        if (tag == 'UL' || tag == 'OL') {\r\n            // We have a list.. use it\r\n            return possibleList;\r\n        }\r\n    }\r\n\r\n    // If we get here, it means we don't have a list and we need to create one\r\n    // this code path will always create new lists as UL lists\r\n    let newList = node.ownerDocument.createElement(listMetadata ? listMetadata.tagName : 'UL');\r\n    if (level == 1) {\r\n        // For level 1, we'll insert the list beofre the node\r\n        node.parentNode.insertBefore(newList, node);\r\n    } else {\r\n        // Any level 2 or above, we insert the list as the last\r\n        // child of the upper level list\r\n        parent.appendChild(newList);\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\n/**\r\n * Cleans up the node children by removing the childs marked as mso-list: Ignore.\r\n * This nodes hold the fake bullet information that Word puts in and when\r\n * conversion is happening, we want to get rid of these elements\r\n */\r\nfunction cleanupListIgnore(node: Node, levels: number) {\r\n    let nodesToRemove: Node[] = [];\r\n\r\n    for (let child: Node = node.firstChild; child; child = child.nextSibling) {\r\n        // Clean up the item internally first if we need to based on the number of levels\r\n        if (child.nodeType == NodeType.Element && levels > 1) {\r\n            cleanupListIgnore(child, levels - 1);\r\n        }\r\n\r\n        // Try to convert word comments into ignore elements if we haven't done so for this element\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if we can remove this item out\r\n        if (isEmptySpan(child) || isIgnoreNode(child)) {\r\n            nodesToRemove.push(child);\r\n        }\r\n    }\r\n\r\n    nodesToRemove.forEach(child => node.removeChild(child));\r\n}\r\n\r\n/**\r\n * Reads the word list metadada out of the specified node. If the node\r\n * is not a Word list item, it returns null.\r\n */\r\nfunction getListItemMetadata(node: HTMLElement): ListItemMetadata {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0) {\r\n            try {\r\n                // Word mso-list property holds 3 space separated values in the following format: lst1 level1 lfo0\r\n                // Where:\r\n                // (0) List identified for the metadata in the &lt;head&gt; of the document. We cannot read the &lt;head&gt; metada\r\n                // (1) Level of the list. This also maps to the &lt;head&gt; metadata that we cannot read, but\r\n                // for almost all cases, it maps to the list identation (or level). We'll use it as the\r\n                // list indentation value\r\n                // (2) Contains a specific list identifier.\r\n                // Example value: \"l0 level1 lfo1\"\r\n                let listprops = listatt.split(' ');\r\n                if (listprops.length == 3) {\r\n                    return <ListItemMetadata>{\r\n                        level: parseInt(listprops[1].substr('level'.length)),\r\n                        wordListId: listatt,\r\n                        originalNode: node,\r\n                        uniqueListId: 0,\r\n                    };\r\n                }\r\n            } catch (e) {}\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isFakeBullet(fakeBullet: string): boolean {\r\n    return ['o', '·', '§', '-'].indexOf(fakeBullet) >= 0;\r\n}\r\n\r\n/** Given a fake bullet text, returns the type of list that should be used for it */\r\nfunction getFakeBulletTagName(fakeBullet: string): string {\r\n    return isFakeBullet(fakeBullet) ? 'UL' : 'OL';\r\n}\r\n\r\n/**\r\n * Finds the fake bullet text out of the specified node and returns it. For images, it will return\r\n * a bullet string. If not found, it returns null...\r\n */\r\nfunction getFakeBulletText(node: Node, levels: number): string {\r\n    // Word uses the following format for their bullets:\r\n    // &lt;p style=\"mso-list:l1 level1 lfo2\"&gt;\r\n    // &lt;span style=\"...\"&gt;\r\n    // &lt;span style=\"mso-list:Ignore\"&gt;1.&lt;span style=\"...\"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/span&gt;&lt;/span&gt;\r\n    // &lt;/span&gt;\r\n    // Content here...\r\n    // &lt;/p&gt;\r\n    //\r\n    // Basically, we need to locate the mso-list:Ignore SPAN, which holds either one text or image node. That\r\n    // text or image node will be the fake bullet we are looking for\r\n    let result: string = null;\r\n    let child: Node = node.firstChild;\r\n    while (!result && child) {\r\n        // First, check if we need to convert the Word list comments into real elements\r\n        child = fixWordListComments(child, true /*removeComments*/);\r\n\r\n        // Check if this is the node that holds the fake bullets (mso-list: Ignore)\r\n        if (isIgnoreNode(child)) {\r\n            // Yes... this is the node that holds either the text or image data\r\n            result = child.textContent.trim();\r\n\r\n            // This is the case for image case\r\n            if (result.length == 0) {\r\n                result = 'o';\r\n            }\r\n        } else if (child.nodeType == NodeType.Element && levels > 1) {\r\n            // If this is an element and we are not in the last level, try to get the fake bullet\r\n            // out of the child\r\n            result = getFakeBulletText(child, levels - 1);\r\n        }\r\n\r\n        child = child.nextSibling;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * If the specified element is a Word List comments, this code verifies and fixes\r\n * the markup when needed to ensure that Chrome bullet conversions work as expected\r\n * -----\r\n * We'll convert &lt;!--[if !supportLists]--&gt; and &lt;!--[endif]--&gt; comments into\r\n * &lt;span style=\"mso-list:Ignore\"&gt;&lt;/span&gt;... Chrome has a bug where it drops the\r\n * styles of the span, but we'll use these comments to recreate them out\r\n */\r\nfunction fixWordListComments(child: Node, removeComments: boolean): Node {\r\n    if (child.nodeType == NodeType.Comment) {\r\n        let value = (child as Comment).data;\r\n        if (value && value.trim().toLowerCase() == '[if !supportlists]') {\r\n            // We have a list ignore start, find the end.. We know is not more than\r\n            // 3 nodes away, so we'll optimize our checks\r\n            let nextElement = child;\r\n            let endComment: Node = null;\r\n            for (let j = 0; j < 4; j++) {\r\n                nextElement = getRealNextSibling(nextElement);\r\n                if (!nextElement) {\r\n                    break;\r\n                }\r\n                if (nextElement.nodeType == NodeType.Comment) {\r\n                    value = (nextElement as Comment).data;\r\n                    if (value && value.trim().toLowerCase() == '[endif]') {\r\n                        endComment = nextElement;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if we found the end node, wrap everything out\r\n            if (endComment) {\r\n                let newSpan = child.ownerDocument.createElement('span');\r\n                newSpan.setAttribute('style', 'mso-list: ignore');\r\n                nextElement = getRealNextSibling(child);\r\n                while (nextElement != endComment) {\r\n                    nextElement = nextElement.nextSibling as HTMLElement;\r\n                    newSpan.appendChild(nextElement.previousSibling);\r\n                }\r\n\r\n                // Insert the element out and use that one as the current child\r\n                endComment.parentNode.insertBefore(newSpan, endComment);\r\n\r\n                // Remove the comments out if the call specified it out\r\n                if (removeComments) {\r\n                    child.parentNode.removeChild(child);\r\n                    endComment.parentNode.removeChild(endComment);\r\n                }\r\n\r\n                // Last, make sure we return the new element out instead of the comment\r\n                child = newSpan;\r\n            }\r\n        }\r\n    }\r\n\r\n    return child;\r\n}\r\n\r\n/** Finds the real previous sibling, ignoring emtpy text nodes */\r\nfunction getRealPreviousSibling(node: Node): Node {\r\n    let prevSibling = node;\r\n    do {\r\n        prevSibling = prevSibling.previousSibling;\r\n    } while (prevSibling && isEmptyTextNode(prevSibling));\r\n    return prevSibling;\r\n}\r\n\r\n/** Finds the real next sibling, ignoring empty text nodes */\r\nfunction getRealNextSibling(node: Node): Node {\r\n    let nextSibling = node;\r\n    do {\r\n        nextSibling = nextSibling.nextSibling;\r\n    } while (nextSibling && isEmptyTextNode(nextSibling));\r\n\r\n    return nextSibling;\r\n}\r\n\r\n/**\r\n * Checks if the specified node is marked as a mso-list: Ignore. These\r\n * nodes need to be ignored when a list item is converted into standard\r\n * HTML lists\r\n */\r\nfunction isIgnoreNode(node: Node): boolean {\r\n    if (node.nodeType == NodeType.Element) {\r\n        let listatt = getStyleValue(node as HTMLElement, MSO_LIST_STYLE_NAME);\r\n        if (listatt && listatt.length > 0 && listatt.trim().toLowerCase() == 'ignore') {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Checks if the specified node is an empty span. */\r\nfunction isEmptySpan(node: Node): boolean {\r\n    return getTagOfNode(node) == 'SPAN' && !node.firstChild;\r\n}\r\n\r\n/** Reads the specified style value from the node */\r\nfunction getStyleValue(node: HTMLElement, styleName: string): string {\r\n    // Word uses non-standard names for the metadata that puts in the style of the element...\r\n    // Most browsers will not provide the information for those unstandard values throug the node.style\r\n    // property, so the only reliable way to read them is to get the attribute directly and do\r\n    // the required parsing..\r\n    let textStyle = node.getAttribute('style');\r\n    if (textStyle && textStyle.length > 0 && textStyle.indexOf(styleName) >= 0) {\r\n        // Split all the CSS name: value pairs\r\n        let inStyles = textStyle.split(';');\r\n        for (let i = 0; i < inStyles.length; i++) {\r\n            // Split the name and value\r\n            let nvpair = inStyles[i].split(':');\r\n            if (nvpair.length == 2 && nvpair[0].trim() == styleName) {\r\n                return nvpair[1].trim();\r\n            }\r\n        }\r\n    }\r\n\r\n    // As a backup mechanism, we'll still try to get the value from the style object\r\n    // Dictionary styles = (Dictionary)(object)node.Style;\r\n    // return (string)styles[styleName];\r\n    return null;\r\n}\r\n\r\n/** Checks if the node is an empty text node that can be ignored */\r\nfunction isEmptyTextNode(node: Node): boolean {\r\n    // No node is empty\r\n    if (!node) {\r\n        return true;\r\n    }\r\n\r\n    // Empty text node is empty\r\n    if (node.nodeType == NodeType.Text) {\r\n        let value = node.nodeValue;\r\n        value = value.replace(LINE_BREAKS, '');\r\n        return value.trim().length == 0;\r\n    }\r\n\r\n    // Span or Font with an empty child node is empty\r\n    let tagName = getTagOfNode(node);\r\n    if (node.firstChild == node.lastChild && (tagName == 'SPAN' || tagName == 'FONT')) {\r\n        return isEmptyTextNode(node.firstChild);\r\n    }\r\n\r\n    // If not found, then this is not empty\r\n    return false;\r\n}\r\n\r\n/** Resets the list */\r\nfunction resetCurrentLists(args: WordConverterArguments) {\r\n    for (let i = 0; i < args.currentListIdsByLevels.length; i++) {\r\n        let ll = args.currentListIdsByLevels[i];\r\n        if (ll) {\r\n            ll.currentUniqueListId = -1;\r\n        }\r\n    }\r\n}\r\n","import { Browser } from 'roosterjs-editor-dom';\r\n\r\nvar ZERO_WIDTH_SPACE = '&#8203;';\r\n\r\n/**\r\n * Convert plain to HTML\r\n * @param text The plain text to convert\r\n * @returns HTML string to present the input text\r\n */\r\nexport default function textToHtml(text: string): string {\r\n    text = (text || '')\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/'/g, '&#39;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/^ /gm, '&nbsp;')\r\n        .replace(/\\r/g, '');\r\n    let lines = text.split('\\n');\r\n    if (lines.length == 2) {\r\n        text = `<span>${lines[0]}<br></span><span>${lines[1]}</span>`;\r\n    } else if (lines.length > 2) {\r\n        text = '';\r\n        let lineEnd = Browser.isIEOrEdge ? ZERO_WIDTH_SPACE : '<br>';\r\n        lines.forEach((line, i) => {\r\n            if (i == 0) {\r\n                text += `<span>${line}<br></span>`;\r\n            } else if (i == lines.length - 1) {\r\n                text += `<span>${line}</span>`;\r\n            } else {\r\n                text += `<div>${line}${lineEnd}</div>`;\r\n            }\r\n        });\r\n    }\r\n    text = text.replace(/\\s\\s/g, ' &nbsp;');\r\n    return text;\r\n}\r\n","import { applyFormat, wrap } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ChangeSource,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ContentPosition,\r\n    ContentChangedEvent,\r\n    ExtractContentEvent,\r\n    DefaultFormat,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst WATERMARK_SPAN_ID = '_rooster_watermarkSpan';\r\nconst WATERMARK_REGEX = new RegExp(\r\n    `<span[^>]*id=['\"]?${WATERMARK_SPAN_ID}['\"]?[^>]*>[^<]*</span>`,\r\n    'ig'\r\n);\r\n\r\n/**\r\n * A watermark plugin to manage watermark string for roosterjs\r\n */\r\nexport default class Watermark implements EditorPlugin {\r\n    private editor: Editor;\r\n    private isWatermarkShowing: boolean;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create an instance of Watermark plugin\r\n     * @param watermark The watermark string\r\n     */\r\n    constructor(private watermark: string, private format?: DefaultFormat) {\r\n        this.format = this.format || {\r\n            fontSize: '14px',\r\n            textColor: '#aaa',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'Watermark';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n        this.disposer = this.editor.addDomEventHandler({\r\n            focus: this.handleWatermark,\r\n            blur: this.handleWatermark,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.hideWatermark();\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (event.eventType == PluginEventType.ContentChanged) {\r\n            // When content is changed from setContent() API, current cached state\r\n            // may not be accurate, so we ignore it\r\n            this.showHideWatermark((<ContentChangedEvent>event).source == ChangeSource.SetContent);\r\n        } else if (event.eventType == PluginEventType.ExtractContent && this.isWatermarkShowing) {\r\n            this.removeWartermarkFromHtml(event as ExtractContentEvent);\r\n        }\r\n    }\r\n\r\n    private handleWatermark = () => {\r\n        this.showHideWatermark(false /*ignoreCachedState*/);\r\n    };\r\n\r\n    private showHideWatermark(ignoreCachedState: boolean) {\r\n        if (this.editor.hasFocus() && (ignoreCachedState || this.isWatermarkShowing)) {\r\n            this.hideWatermark();\r\n            this.editor.focus();\r\n        } else if (\r\n            !this.editor.hasFocus() &&\r\n            (ignoreCachedState || !this.isWatermarkShowing) &&\r\n            this.editor.isEmpty(true /*trim*/)\r\n        ) {\r\n            this.showWatermark();\r\n        }\r\n    }\r\n\r\n    private showWatermark() {\r\n        let document = this.editor.getDocument();\r\n        let watermarkNode = wrap(\r\n            document.createTextNode(this.watermark),\r\n            `<span id=\"${WATERMARK_SPAN_ID}\"></span>`\r\n        ) as HTMLElement;\r\n        applyFormat(watermarkNode, this.format, this.editor.isDarkMode());\r\n        this.editor.insertNode(watermarkNode, {\r\n            position: ContentPosition.Begin,\r\n            updateCursor: false,\r\n            replaceSelection: false,\r\n            insertOnNewLine: false,\r\n        });\r\n        this.isWatermarkShowing = true;\r\n    }\r\n\r\n    private hideWatermark() {\r\n        this.editor.queryElements(`span[id=\"${WATERMARK_SPAN_ID}\"]`, span =>\r\n            this.editor.deleteNode(span)\r\n        );\r\n        this.isWatermarkShowing = false;\r\n    }\r\n\r\n    private removeWartermarkFromHtml(event: ExtractContentEvent) {\r\n        let content = event.content;\r\n        content = content.replace(WATERMARK_REGEX, '');\r\n        event.content = content;\r\n    }\r\n}\r\n","import { contains, fromHtml, getComputedStyle, VTable } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentPosition,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PluginMouseEvent,\r\n    ChangeSource,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst TABLE_RESIZE_HANDLE_KEY = 'TABLE_RESIZE_HANDLE';\r\nconst HANDLE_WIDTH = 6;\r\nconst CONTAINER_HTML = `<div style=\"position: fixed; cursor: col-resize; width: ${HANDLE_WIDTH}px; border: solid 0 #C6C6C6;\"></div>`;\r\n\r\n/**\r\n * TableResize plugin, provides the ability to resize a table by drag-and-drop\r\n */\r\nexport default class TableResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private onMouseOverDisposer: () => void;\r\n    private td: HTMLTableCellElement;\r\n    private pageX = -1;\r\n    private initialPageX: number;\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.onMouseOverDisposer = this.editor.addDomEventHandler('mouseover', this.onMouseOver);\r\n    }\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'TableResize';\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        this.detachMouseEvents();\r\n        this.editor = null;\r\n        this.onMouseOverDisposer();\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            this.td &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.ContentChanged ||\r\n                (event.eventType == PluginEventType.MouseDown && !this.clickIntoCurrentTd(event)))\r\n        ) {\r\n            this.td = null;\r\n            this.calcAndShowHandle();\r\n        }\r\n    }\r\n\r\n    private clickIntoCurrentTd(event: PluginMouseEvent) {\r\n        let mouseEvent = event.rawEvent;\r\n        let target = mouseEvent.target;\r\n        return (\r\n            target instanceof Node &&\r\n            contains(this.td, <Node>target, true /*treatSameNodeAsContain*/)\r\n        );\r\n    }\r\n\r\n    private onMouseOver = (e: MouseEvent) => {\r\n        let node = <HTMLElement>(e.srcElement || e.target);\r\n        if (\r\n            this.pageX < 0 &&\r\n            node &&\r\n            (node.tagName == 'TD' || node.tagName == 'TH') &&\r\n            node != this.td\r\n        ) {\r\n            this.td = <HTMLTableCellElement>node;\r\n            this.calcAndShowHandle();\r\n        }\r\n    };\r\n\r\n    private calcAndShowHandle() {\r\n        if (this.td) {\r\n            let tr = <HTMLTableRowElement>this.editor.getElementAtCursor('TR', this.td);\r\n            let table = <HTMLTableElement>this.editor.getElementAtCursor('TABLE', tr);\r\n            if (tr && table) {\r\n                let [left, top] = this.getPosition(table);\r\n                let handle = this.getResizeHandle();\r\n\r\n                left +=\r\n                    this.td.offsetLeft +\r\n                    (this.isRtl(table) ? 0 : this.td.offsetWidth - HANDLE_WIDTH);\r\n                handle.style.display = '';\r\n                handle.style.top = top + 'px';\r\n                handle.style.height = table.offsetHeight + 'px';\r\n                handle.style.left = left + 'px';\r\n            }\r\n        } else {\r\n            this.getResizeHandle().style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private adjustHandle(pageX: number) {\r\n        let handle = this.getResizeHandle();\r\n        handle.style.left = handle.offsetLeft + pageX - this.pageX + 'px';\r\n        this.pageX = pageX;\r\n    }\r\n\r\n    private getPosition(e: HTMLElement): [number, number] {\r\n        let parent = <HTMLElement>e.offsetParent;\r\n        let [left, top] = parent ? this.getPosition(parent) : [0, 0];\r\n        return [left + e.offsetLeft - e.scrollLeft, top + e.offsetTop - e.scrollTop];\r\n    }\r\n\r\n    private getResizeHandle() {\r\n        return this.editor.getCustomData(\r\n            TABLE_RESIZE_HANDLE_KEY,\r\n            () => {\r\n                let document = this.editor.getDocument();\r\n                let handle = fromHtml(CONTAINER_HTML, document)[0] as HTMLElement;\r\n                this.editor.insertNode(handle, {\r\n                    position: ContentPosition.Outside,\r\n                    updateCursor: false,\r\n                    replaceSelection: false,\r\n                    insertOnNewLine: false,\r\n                });\r\n                handle.addEventListener('mousedown', this.onMouseDown);\r\n                return handle;\r\n            },\r\n            handle => {\r\n                handle.removeEventListener('mousedown', this.onMouseDown);\r\n                handle.parentNode.removeChild(handle);\r\n            }\r\n        );\r\n    }\r\n\r\n    private cancelEvent(e: MouseEvent) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n\r\n    private onMouseDown = (e: MouseEvent) => {\r\n        if (!this.editor || this.editor.isDisposed()) {\r\n            return;\r\n        }\r\n\r\n        this.pageX = e.pageX;\r\n        this.initialPageX = e.pageX;\r\n        this.attachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0 1px';\r\n\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseMove = (e: MouseEvent) => {\r\n        this.adjustHandle(e.pageX);\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private onMouseUp = (e: MouseEvent) => {\r\n        this.detachMouseEvents();\r\n\r\n        let handle = this.getResizeHandle();\r\n        handle.style.borderWidth = '0';\r\n\r\n        let table = this.editor.getElementAtCursor('TABLE', this.td) as HTMLTableElement;\r\n        let cellPadding = parseInt(table.cellPadding);\r\n        cellPadding = isNaN(cellPadding) ? 0 : cellPadding;\r\n\r\n        if (e.pageX != this.initialPageX) {\r\n            let newWidth =\r\n                this.td.clientWidth -\r\n                cellPadding * 2 +\r\n                (e.pageX - this.initialPageX) * (this.isRtl(table) ? -1 : 1);\r\n            this.editor.addUndoSnapshot((start, end) => {\r\n                this.setTableColumnWidth(newWidth + 'px');\r\n                this.editor.select(start, end);\r\n            }, ChangeSource.Format);\r\n        }\r\n\r\n        this.pageX = -1;\r\n        this.calcAndShowHandle();\r\n        this.editor.focus();\r\n        this.cancelEvent(e);\r\n    };\r\n\r\n    private attachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.onMouseMove, true);\r\n            document.addEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private detachMouseEvents() {\r\n        if (this.editor && !this.editor.isDisposed()) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.onMouseMove, true);\r\n            document.removeEventListener('mouseup', this.onMouseUp, true);\r\n        }\r\n    }\r\n\r\n    private setTableColumnWidth(width: string) {\r\n        let vtable = new VTable(this.td);\r\n        vtable.table.style.width = '';\r\n        vtable.table.width = '';\r\n        vtable.forEachCellOfCurrentColumn(cell => {\r\n            if (cell.td) {\r\n                cell.td.style.width = cell.td == this.td ? width : '';\r\n            }\r\n        });\r\n        vtable.writeBack();\r\n        return this.editor.contains(this.td) ? this.td : vtable.getCurrentTd();\r\n    }\r\n\r\n    private isRtl(element: HTMLElement) {\r\n        return getComputedStyle(element, 'direction') == 'rtl';\r\n    }\r\n}\r\n","import { cacheGetContentSearcher, Editor, EditorPlugin } from 'roosterjs-editor-core';\nimport { PluginEvent, PluginEventType, PositionType } from 'roosterjs-editor-types';\n\n/**\n * An interface to define a replacement rule for CustomReplace plugin\n */\nexport type Replacement = {\n    /**\n     * Source string to replace from\n     */\n    sourceString: string;\n\n    /**\n     * HTML string to replace to\n     */\n    replacementHTML: string;\n\n    /**\n     * Whether the matching should be case sensitive\n     */\n    matchSourceCaseSensitive: boolean;\n};\n\nconst makeReplacement = (\n    sourceString: string,\n    replacementHTML: string,\n    matchSourceCaseSensitive: boolean\n): Replacement => ({ sourceString, replacementHTML, matchSourceCaseSensitive });\n\nconst defaultReplacements: Replacement[] = [\n    makeReplacement(':)', '🙂', true),\n    makeReplacement(';)', '😉', true),\n    makeReplacement(':O', '😲', true),\n    makeReplacement(':o', '😯', true),\n    makeReplacement('<3', '❤️', true),\n];\n\n/**\n * Wrapper for CustomReplaceContentEditFeature that provides an API for updating the\n * content edit feature\n */\nexport default class CustomReplacePlugin implements EditorPlugin {\n    private longestReplacementLength: number;\n    private editor: Editor;\n    private replacements: Replacement[];\n    private replacementEndCharacters: Set<string>;\n\n    /**\n     * Create instance of CustomReplace plugin\n     * @param replacements Replacement rules. If not passed, a default replacement rule set will be applied\n     */\n    constructor(replacements: Replacement[] = defaultReplacements) {\n        this.updateReplacements(replacements);\n    }\n\n    /**\n     * Set the replacements that this plugin is looking for.\n     * @param newReplacements new set of replacements for this plugin\n     */\n    updateReplacements(newReplacements: Replacement[]) {\n        this.replacements = newReplacements;\n        this.longestReplacementLength = getLongestReplacementSourceLength(this.replacements);\n        this.replacementEndCharacters = getReplacementEndCharacters(this.replacements);\n    }\n\n    /**\n     * Get a friendly name of  this plugin\n     */\n    getName() {\n        return 'CustomReplace';\n    }\n\n    /**\n     * Initialize this plugin\n     * @param editor The editor instance\n     */\n    public initialize(editor: Editor): void {\n        this.editor = editor;\n    }\n\n    /**\n     * Dispose this plugin\n     */\n    public dispose(): void {\n        this.editor = null;\n    }\n\n    public onPluginEvent(event: PluginEvent) {\n        if (this.editor.isInIME() || event.eventType != PluginEventType.Input) {\n            return;\n        }\n\n        // Exit early on input events that do not insert a replacement's final character.\n        if (event.rawEvent.data && !this.replacementEndCharacters.has(event.rawEvent.data)) {\n            return;\n        }\n\n        // Get the matching replacement\n        const range = this.editor.getSelectionRange();\n        if (range == null) {\n            return;\n        }\n        const searcher = cacheGetContentSearcher(event, this.editor);\n        const stringToSearch = searcher.getSubStringBefore(this.longestReplacementLength);\n\n        const replacement = this.getMatchingReplacement(stringToSearch);\n        if (replacement == null) {\n            return;\n        }\n\n        // Reconstruct a selection of the text on the document that matches the\n        // replacement we selected.\n        const matchingText = searcher.getSubStringBefore(replacement.sourceString.length);\n        const matchingRange = searcher.getRangeFromText(matchingText, true /* exactMatch */);\n\n        // parse the html string off the dom and inline the resulting element.\n        const parsingSpan = document.createElement('span');\n        parsingSpan.innerHTML = replacement.replacementHTML;\n        const nodeToInsert =\n            parsingSpan.childNodes.length == 1 ? parsingSpan.childNodes[0] : parsingSpan;\n\n        // Switch the node for the selection range\n        this.editor.performAutoComplete(() => {\n            matchingRange.deleteContents();\n            matchingRange.insertNode(nodeToInsert);\n            this.editor.select(nodeToInsert, PositionType.End);\n        });\n    }\n\n    private getMatchingReplacement(stringToSearch: string): Replacement | null {\n        if (stringToSearch.length == 0) {\n            return null;\n        }\n        const lowerCaseStringToSearch = stringToSearch.toLocaleLowerCase();\n        for (const replacement of this.replacements) {\n            const [sourceMatch, replacementMatch] = replacement.matchSourceCaseSensitive\n                ? [stringToSearch, replacement.sourceString]\n                : [lowerCaseStringToSearch, replacement.sourceString.toLocaleLowerCase()];\n\n            if (\n                sourceMatch.substring(sourceMatch.length - replacementMatch.length) ==\n                replacementMatch\n            ) {\n                return replacement;\n            }\n        }\n        return null;\n    }\n}\n\nfunction getLongestReplacementSourceLength(replacements: Replacement[]): number {\n    return Math.max.apply(null, replacements.map(replacement => replacement.sourceString.length));\n}\n\nfunction getReplacementEndCharacters(replacements: Replacement[]): Set<string> {\n    const endChars = new Set<string>();\n    for (let replacement of replacements) {\n        const sourceString = replacement.sourceString;\n        if (sourceString.length == 0) {\n            continue;\n        }\n        const lastChar = sourceString[sourceString.length - 1];\n        if (!replacement.matchSourceCaseSensitive) {\n            endChars.add(lastChar.toLocaleLowerCase());\n            endChars.add(lastChar.toLocaleUpperCase());\n        } else {\n            endChars.add(lastChar);\n        }\n    }\n    return endChars;\n}\n","export { default as ImageResize } from './ImageResize';\r\n","import { contains, getTagOfNode } from 'roosterjs-editor-dom';\r\nimport { Editor, EditorPlugin } from 'roosterjs-editor-core';\r\nimport {\r\n    ContentChangedEvent,\r\n    ChangeSource,\r\n    NodeType,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    ExtractContentEvent,\r\n    PositionType,\r\n} from 'roosterjs-editor-types';\r\n\r\nconst BEGIN_TAG = 'RoosterJsImageResizingBegin';\r\nconst END_TAG = 'RoosterJsImageResizingEnd';\r\nconst EXTRACT_HTML_REGEX = new RegExp(\r\n    `<!--${BEGIN_TAG}-->[\\\\s\\\\S]*(<img\\\\s[^>]+>)[\\\\s\\\\S]*<!--${END_TAG}-->`,\r\n    'gim'\r\n);\r\nconst DELETE_KEYCODE = 46;\r\nconst BACKSPACE_KEYCODE = 8;\r\nconst SHIFT_KEYCODE = 16;\r\nconst CTRL_KEYCODE = 17;\r\nconst ALT_KEYCODE = 18;\r\n\r\n/**\r\n * ImageResize plugin provides the ability to resize an inline image in editor\r\n */\r\nexport default class ImageResize implements EditorPlugin {\r\n    private editor: Editor;\r\n    private startPageX: number;\r\n    private startPageY: number;\r\n    private startWidth: number;\r\n    private startHeight: number;\r\n    private resizeDiv: HTMLElement;\r\n    private direction: string;\r\n    private disposer: () => void;\r\n\r\n    /**\r\n     * Create a new instance of ImageResize\r\n     * @param minWidth Minimum width of image when resize in pixel, default value is 10\r\n     * @param minHeight Minimum height of image when resize in pixel, default value is 10\r\n     * @param selectionBorderColor Color of resize border and handles, default value is #DB626C\r\n     * @param forcePreserveRatio Whether always preserve width/height ratio when resize, default value is false\r\n     * @param resizableImageSelector Selector for picking which image is resizable (e.g. for all images not placeholders), note\r\n     * that the tag must be IMG regardless what the selector is\r\n     */\r\n    constructor(\r\n        private minWidth: number = 10,\r\n        private minHeight: number = 10,\r\n        private selectionBorderColor: string = '#DB626C',\r\n        private forcePreserveRatio: boolean = false,\r\n        private resizableImageSelector: string = 'img'\r\n    ) {}\r\n\r\n    /**\r\n     * Get a friendly name of  this plugin\r\n     */\r\n    getName() {\r\n        return 'ImageResize';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.disposer = editor.addDomEventHandler({\r\n            dragstart: this.onDragStart,\r\n            blur: this.onBlur,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    dispose() {\r\n        if (this.resizeDiv) {\r\n            this.hideResizeHandle();\r\n        }\r\n        this.disposer();\r\n        this.disposer = null;\r\n        this.editor = null;\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    onPluginEvent(e: PluginEvent) {\r\n        if (e.eventType == PluginEventType.MouseDown) {\r\n            const event = e.rawEvent;\r\n            const target = <HTMLElement>(event.srcElement || event.target);\r\n\r\n            if (getTagOfNode(target) == 'IMG') {\r\n                const parent = target.parentNode as HTMLElement;\r\n                const elements = parent\r\n                    ? ([].slice.call(\r\n                          parent.querySelectorAll(this.resizableImageSelector)\r\n                      ) as HTMLElement[])\r\n                    : [];\r\n                if (elements.indexOf(target) < 0) {\r\n                    return;\r\n                }\r\n\r\n                target.contentEditable = 'false';\r\n                const currentImg = this.getSelectedImage();\r\n                if (currentImg && currentImg != target) {\r\n                    this.hideResizeHandle();\r\n                }\r\n\r\n                if (!this.resizeDiv) {\r\n                    this.showResizeHandle(<HTMLImageElement>target);\r\n                }\r\n            } else if (this.resizeDiv && !contains(this.resizeDiv, target)) {\r\n                this.hideResizeHandle();\r\n            }\r\n        } else if (e.eventType == PluginEventType.KeyDown && this.resizeDiv) {\r\n            const event = e.rawEvent;\r\n            if (event.which == DELETE_KEYCODE || event.which == BACKSPACE_KEYCODE) {\r\n                this.editor.addUndoSnapshot(() => {\r\n                    this.removeResizeDiv(this.resizeDiv);\r\n                });\r\n                this.resizeDiv = null;\r\n                event.preventDefault();\r\n                this.resizeDiv = null;\r\n            } else if (\r\n                event.which != SHIFT_KEYCODE &&\r\n                event.which != CTRL_KEYCODE &&\r\n                event.which != ALT_KEYCODE\r\n            ) {\r\n                this.hideResizeHandle(true /*selectImage*/);\r\n            }\r\n        } else if (\r\n            e.eventType == PluginEventType.ContentChanged &&\r\n            (<ContentChangedEvent>e).source != ChangeSource.ImageResize\r\n        ) {\r\n            this.editor.queryElements('img', this.removeResizeDivIfAny);\r\n            this.resizeDiv = null;\r\n        } else if (e.eventType == PluginEventType.ExtractContent) {\r\n            const event = <ExtractContentEvent>e;\r\n            event.content = this.extractHtml(event.content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select a given IMG element, show the resize handle\r\n     * @param img The IMG element to select\r\n     */\r\n    showResizeHandle(img: HTMLImageElement) {\r\n        this.resizeDiv = this.createResizeDiv(img);\r\n        img.contentEditable = 'false';\r\n        this.editor.select(this.resizeDiv, PositionType.After);\r\n    }\r\n\r\n    /**\r\n     * Hide resize handle of current selected image\r\n     * @param selectImageAfterUnSelect Optional, when set to true, select the image element after hide the resize handle\r\n     */\r\n    hideResizeHandle(selectImageAfterUnSelect?: boolean) {\r\n        let img = this.getSelectedImage();\r\n        let parent = this.resizeDiv && this.resizeDiv.parentNode;\r\n        if (parent) {\r\n            if (img) {\r\n                img.removeAttribute('contentEditable');\r\n                let referenceNode =\r\n                    this.resizeDiv.previousSibling &&\r\n                    this.resizeDiv.previousSibling.nodeType == NodeType.Comment\r\n                        ? this.resizeDiv.previousSibling\r\n                        : this.resizeDiv;\r\n                parent.insertBefore(img, referenceNode);\r\n\r\n                if (selectImageAfterUnSelect) {\r\n                    this.editor.select(img);\r\n                } else {\r\n                    this.editor.select(img, PositionType.After);\r\n                }\r\n            }\r\n            this.removeResizeDiv(this.resizeDiv);\r\n            this.resizeDiv = null;\r\n        }\r\n    }\r\n\r\n    private startResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            this.startPageX = e.pageX;\r\n            this.startPageY = e.pageY;\r\n            this.startWidth = img.clientWidth;\r\n            this.startHeight = img.clientHeight;\r\n            this.editor.addUndoSnapshot();\r\n\r\n            let document = this.editor.getDocument();\r\n            document.addEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.addEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            this.direction = (<HTMLElement>(e.srcElement || e.target)).style.cursor;\r\n        }\r\n\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private doResize = (e: MouseEvent) => {\r\n        let img = this.getSelectedImage();\r\n        if (this.editor && img) {\r\n            let widthChange = e.pageX - this.startPageX;\r\n            let heightChange = e.pageY - this.startPageY;\r\n            let newWidth = Math.max(\r\n                this.startWidth + (this.isWest(this.direction) ? -widthChange : widthChange),\r\n                this.minWidth\r\n            );\r\n            let newHeight = Math.max(\r\n                this.startHeight + (this.isNorth(this.direction) ? -heightChange : heightChange),\r\n                this.minHeight\r\n            );\r\n\r\n            if (this.forcePreserveRatio || e.shiftKey) {\r\n                let ratio =\r\n                    this.startWidth > 0 && this.startHeight > 0\r\n                        ? (this.startWidth * 1.0) / this.startHeight\r\n                        : 0;\r\n                if (ratio > 0) {\r\n                    if (newWidth < newHeight * ratio) {\r\n                        newWidth = newHeight * ratio;\r\n                    } else {\r\n                        newHeight = newWidth / ratio;\r\n                    }\r\n                }\r\n            }\r\n\r\n            img.style.width = newWidth + 'px';\r\n            img.style.height = newHeight + 'px';\r\n        }\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private finishResize = (e: MouseEvent) => {\r\n        var img = this.getSelectedImage() as HTMLImageElement;\r\n        if (this.editor && img) {\r\n            let document = this.editor.getDocument();\r\n            document.removeEventListener('mousemove', this.doResize, true /*useCapture*/);\r\n            document.removeEventListener('mouseup', this.finishResize, true /*useCapture*/);\r\n            let width = img.clientWidth;\r\n            let height = img.clientHeight;\r\n            img.style.width = width + 'px';\r\n            img.style.height = height + 'px';\r\n            img.width = width;\r\n            img.height = height;\r\n            this.resizeDiv.style.width = '';\r\n            this.resizeDiv.style.height = '';\r\n        }\r\n        this.direction = null;\r\n        this.editor.addUndoSnapshot();\r\n        this.editor.triggerContentChangedEvent(ChangeSource.ImageResize);\r\n        this.stopEvent(e);\r\n    };\r\n\r\n    private createResizeDiv(target: HTMLElement) {\r\n        let document = this.editor.getDocument();\r\n        let resizeDiv = document.createElement('DIV');\r\n        let parent = target.parentNode;\r\n        parent.insertBefore(resizeDiv, target);\r\n        parent.insertBefore(document.createComment(BEGIN_TAG), resizeDiv);\r\n        parent.insertBefore(document.createComment(END_TAG), resizeDiv.nextSibling);\r\n\r\n        resizeDiv.style.position = 'relative';\r\n        resizeDiv.style.display = 'inline-flex';\r\n        resizeDiv.contentEditable = 'false';\r\n        resizeDiv.addEventListener('click', this.stopEvent);\r\n        resizeDiv.appendChild(target);\r\n        ['nw', 'ne', 'sw', 'se'].forEach(pos => {\r\n            let div = document.createElement('DIV');\r\n            resizeDiv.appendChild(div);\r\n            div.style.position = 'absolute';\r\n            div.style.width = '7px';\r\n            div.style.height = '7px';\r\n            div.style.backgroundColor = this.selectionBorderColor;\r\n            div.style.cursor = pos + '-resize';\r\n            if (this.isNorth(pos)) {\r\n                div.style.top = '-3px';\r\n            } else {\r\n                div.style.bottom = '-3px';\r\n            }\r\n            if (this.isWest(pos)) {\r\n                div.style.left = '-3px';\r\n            } else {\r\n                div.style.right = '-3px';\r\n            }\r\n            div.addEventListener('mousedown', this.startResize);\r\n        });\r\n        let div = document.createElement('DIV');\r\n        resizeDiv.appendChild(div);\r\n        div.style.position = 'absolute';\r\n        div.style.top = '0';\r\n        div.style.left = '0';\r\n        div.style.right = '0';\r\n        div.style.bottom = '0';\r\n        div.style.border = 'solid 1px ' + this.selectionBorderColor;\r\n        div.style.pointerEvents = 'none';\r\n        return resizeDiv;\r\n    }\r\n\r\n    private stopEvent = (e: UIEvent) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    };\r\n\r\n    private removeResizeDiv(resizeDiv: HTMLElement) {\r\n        if (this.editor && this.editor.contains(resizeDiv)) {\r\n            [resizeDiv.previousSibling, resizeDiv.nextSibling].forEach(comment => {\r\n                if (comment && comment.nodeType == NodeType.Comment) {\r\n                    this.editor.deleteNode(comment);\r\n                }\r\n            });\r\n            this.editor.deleteNode(resizeDiv);\r\n        }\r\n    }\r\n\r\n    private removeResizeDivIfAny = (img: HTMLImageElement) => {\r\n        let div = img && (img.parentNode as HTMLElement);\r\n        let previous = div && div.previousSibling;\r\n        let next = div && div.nextSibling;\r\n        if (\r\n            previous &&\r\n            previous.nodeType == NodeType.Comment &&\r\n            previous.nodeValue == BEGIN_TAG &&\r\n            next &&\r\n            next.nodeType == NodeType.Comment &&\r\n            next.nodeValue == END_TAG\r\n        ) {\r\n            div.parentNode.insertBefore(img, div);\r\n            this.removeResizeDiv(div);\r\n        }\r\n    };\r\n\r\n    private onBlur = (e: FocusEvent) => {\r\n        this.hideResizeHandle();\r\n    };\r\n\r\n    private extractHtml(html: string): string {\r\n        return html.replace(EXTRACT_HTML_REGEX, (...groups: string[]) => {\r\n            return groups[1].replace(\r\n                /(\\s*contenteditable=\"false\"(\\/?>)|contenteditable=\"false\"\\s*)/im,\r\n                '$2'\r\n            );\r\n        });\r\n    }\r\n\r\n    private getSelectedImage(): HTMLElement {\r\n        return this.resizeDiv ? <HTMLElement>this.resizeDiv.getElementsByTagName('IMG')[0] : null;\r\n    }\r\n\r\n    private isNorth(direction: string): boolean {\r\n        return direction && direction.substr(0, 1) == 'n';\r\n    }\r\n\r\n    private isWest(direction: string): boolean {\r\n        return direction && direction.substr(1, 1) == 'w';\r\n    }\r\n\r\n    private onDragStart = (e: DragEvent) => {\r\n        if ((e.srcElement || e.target) == this.getSelectedImage()) {\r\n            this.hideResizeHandle(true);\r\n        }\r\n    };\r\n}\r\n","export { default as PickerPlugin, EditorPickerPluginInterface } from './PickerPlugin';\r\nexport { PickerPluginOptions, PickerDataProvider } from './PickerDataProvider';\r\n","import { Browser, createRange, PartialInlineElement } from 'roosterjs-editor-dom';\r\nimport { PickerDataProvider, PickerPluginOptions } from './PickerDataProvider';\r\nimport { replaceWithNode } from 'roosterjs-editor-api';\r\nimport {\r\n    cacheGetContentSearcher,\r\n    Editor,\r\n    EditorPlugin,\r\n    isCharacterValue,\r\n    isModifierKey,\r\n} from 'roosterjs-editor-core';\r\nimport {\r\n    NodePosition,\r\n    PluginKeyboardEvent,\r\n    PluginEvent,\r\n    PluginEventType,\r\n    PositionType,\r\n    ChangeSource,\r\n} from 'roosterjs-editor-types';\r\n\r\n// Character codes.\r\n// IE11 uses different character codes. which are noted below.\r\n// If adding a new key, test in IE to figure out what the code is.\r\nconst BACKSPACE_CHARCODE = 'Backspace';\r\nconst TAB_CHARCODE = 'Tab';\r\nconst ENTER_CHARCODE = 'Enter';\r\nconst ESC_CHARCODE = !Browser.isIE ? 'Escape' : 'Esc';\r\nconst LEFT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowLeft' : 'Left';\r\nconst UP_ARROW_CHARCODE = !Browser.isIE ? 'ArrowUp' : 'Up';\r\nconst RIGHT_ARROW_CHARCODE = !Browser.isIE ? 'ArrowRight' : 'Right';\r\nconst DOWN_ARROW_CHARCODE = !Browser.isIE ? 'ArrowDown' : 'Down';\r\nconst DELETE_CHARCODE = !Browser.isIE ? 'Delete' : 'Del';\r\n\r\n/**\r\n * Interface for PickerPlugin\r\n */\r\nexport interface EditorPickerPluginInterface<T extends PickerDataProvider = PickerDataProvider>\r\n    extends EditorPlugin {\r\n    dataProvider: T;\r\n}\r\n\r\n/**\r\n * PickerPlugin represents a plugin of editor which can handle picker related behaviors, including\r\n * - Show picker when special trigger key is pressed\r\n * - Hide picker\r\n * - Change selection in picker by Up/Down/Left/Right\r\n * - Apply selected item in picker\r\n *\r\n * PickerPlugin doesn't provide any UI, it just wraps related DOM events and invoke callback functions.\r\n * To show a picker UI, you need to build your own UI component. Please reference to\r\n * https://github.com/microsoft/roosterjs/tree/master/publish/samplesite/scripts/controls/samplepicker\r\n */\r\nexport default class PickerPlugin<T extends PickerDataProvider = PickerDataProvider>\r\n    implements EditorPickerPluginInterface<T> {\r\n    private editor: Editor;\r\n    private eventHandledOnKeyDown: boolean;\r\n    private blockSuggestions: boolean;\r\n    private isSuggesting: boolean;\r\n    private lastKnownRange: Range;\r\n\r\n    constructor(public readonly dataProvider: T, private pickerOptions: PickerPluginOptions) {}\r\n\r\n    /**\r\n     * Get a friendly name\r\n     */\r\n    getName() {\r\n        return 'Picker';\r\n    }\r\n\r\n    /**\r\n     * Initialize this plugin. This should only be called from Editor\r\n     * @param editor Editor instance\r\n     */\r\n    public initialize(editor: Editor) {\r\n        this.editor = editor;\r\n        this.dataProvider.onInitalize(\r\n            (htmlNode: Node) => {\r\n                this.editor.focus();\r\n\r\n                let wordToReplace = this.getWord(null);\r\n\r\n                // Safari drops our focus out so we get an empty word to replace when we call getWord.\r\n                // We fall back to using the lastKnownRange to try to get around this.\r\n                if ((!wordToReplace || wordToReplace.length == 0) && this.lastKnownRange) {\r\n                    this.editor.select(this.lastKnownRange);\r\n                    wordToReplace = this.getWord(null);\r\n                }\r\n\r\n                let insertNode = () => {\r\n                    if (wordToReplace) {\r\n                        replaceWithNode(\r\n                            this.editor,\r\n                            wordToReplace,\r\n                            htmlNode,\r\n                            true /* exactMatch */\r\n                        );\r\n                    } else {\r\n                        this.editor.insertNode(htmlNode);\r\n                    }\r\n                    this.setIsSuggesting(false);\r\n                };\r\n\r\n                if (this.pickerOptions.handleAutoComplete) {\r\n                    this.editor.performAutoComplete(insertNode, this.pickerOptions.changeSource);\r\n                } else {\r\n                    this.editor.addUndoSnapshot(insertNode, this.pickerOptions.changeSource);\r\n                }\r\n            },\r\n            (isSuggesting: boolean) => {\r\n                this.setIsSuggesting(isSuggesting);\r\n            },\r\n            editor\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dispose this plugin\r\n     */\r\n    public dispose() {\r\n        this.editor = null;\r\n        this.dataProvider.onDispose();\r\n    }\r\n\r\n    /**\r\n     * Check if the plugin should handle the given event exclusively.\r\n     * Handle an event exclusively means other plugin will not receive this event in\r\n     * onPluginEvent method.\r\n     * If two plugins will return true in willHandleEventExclusively() for the same event,\r\n     * the final result depends on the order of the plugins are added into editor\r\n     * @param event The event to check\r\n     */\r\n    public willHandleEventExclusively(event: PluginEvent) {\r\n        return (\r\n            this.isSuggesting &&\r\n            (event.eventType == PluginEventType.KeyDown ||\r\n                event.eventType == PluginEventType.KeyUp ||\r\n                event.eventType == PluginEventType.Input)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle events triggered from editor\r\n     * @param event PluginEvent object\r\n     */\r\n    public onPluginEvent(event: PluginEvent) {\r\n        if (\r\n            event.eventType == PluginEventType.ContentChanged &&\r\n            event.source == ChangeSource.SetContent &&\r\n            this.dataProvider.onContentChanged\r\n        ) {\r\n            // Stop suggesting since content is fully changed\r\n            if (this.isSuggesting) {\r\n                this.setIsSuggesting(false);\r\n            }\r\n\r\n            // Undos and other major changes to document content fire this type of event.\r\n            // Inform the data provider of the current picker placed elements in the body.\r\n            let elementIds: string[] = [];\r\n            this.editor.queryElements(\r\n                \"[id^='\" + this.pickerOptions.elementIdPrefix + \"']\",\r\n                element => {\r\n                    if (element.id) {\r\n                        elementIds.push(element.id);\r\n                    }\r\n                }\r\n            );\r\n            this.dataProvider.onContentChanged(elementIds);\r\n        }\r\n        if (event.eventType == PluginEventType.KeyDown) {\r\n            this.eventHandledOnKeyDown = false;\r\n            this.onKeyDownEvent(event);\r\n        }\r\n        if (\r\n            event.eventType == PluginEventType.KeyUp &&\r\n            !this.eventHandledOnKeyDown &&\r\n            (isCharacterValue(event.rawEvent) ||\r\n                (!isModifierKey(event.rawEvent) && this.isSuggesting))\r\n        ) {\r\n            this.onKeyUpDomEvent(event);\r\n        } else if (event.eventType == PluginEventType.MouseUp) {\r\n            if (this.isSuggesting) {\r\n                this.setIsSuggesting(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setLastKnownRange(range: Range) {\r\n        this.lastKnownRange = range;\r\n    }\r\n\r\n    private setIsSuggesting(isSuggesting: boolean) {\r\n        this.isSuggesting = isSuggesting;\r\n\r\n        if (!isSuggesting) {\r\n            this.setLastKnownRange(null);\r\n        }\r\n        this.dataProvider.onIsSuggestingChanged(isSuggesting);\r\n\r\n        this.setAriaOwns(isSuggesting);\r\n        this.setAriaActiveDescendant(isSuggesting ? 0 : null);\r\n    }\r\n\r\n    private handleKeyDownEvent(event: PluginKeyboardEvent) {\r\n        this.eventHandledOnKeyDown = true;\r\n        event.rawEvent.preventDefault();\r\n        event.rawEvent.stopImmediatePropagation();\r\n    }\r\n\r\n    private getIdValue(node: Node): string {\r\n        let element = node as Element;\r\n        return element.attributes && element.attributes.getNamedItem('id')\r\n            ? (element.attributes.getNamedItem('id').value as string)\r\n            : null;\r\n    }\r\n\r\n    private getWordBeforeCursor(event: PluginKeyboardEvent): string {\r\n        let searcher = cacheGetContentSearcher(event, this.editor);\r\n        return searcher ? searcher.getWordBefore() : null;\r\n    }\r\n\r\n    private replaceNode(currentNode: Node, replacementNode: Node) {\r\n        if (currentNode) {\r\n            this.editor.deleteNode(currentNode);\r\n        }\r\n        if (replacementNode) {\r\n            this.editor.insertNode(replacementNode);\r\n        }\r\n    }\r\n\r\n    private getRangeUntilAt(event: PluginKeyboardEvent): Range {\r\n        let PositionContentSearcher = cacheGetContentSearcher(event, this.editor);\r\n        let startPos: NodePosition;\r\n        let endPos: NodePosition;\r\n        PositionContentSearcher.forEachTextInlineElement(textInline => {\r\n            let hasMatched = false;\r\n            let nodeContent = textInline.getTextContent();\r\n            let nodeIndex = nodeContent ? nodeContent.length : -1;\r\n            while (nodeIndex >= 0) {\r\n                if (nodeContent[nodeIndex] == this.pickerOptions.triggerCharacter) {\r\n                    startPos = textInline.getStartPosition().move(nodeIndex);\r\n                    hasMatched = true;\r\n                    break;\r\n                }\r\n                nodeIndex--;\r\n            }\r\n\r\n            if (hasMatched) {\r\n                endPos = textInline.getEndPosition();\r\n            }\r\n\r\n            return hasMatched;\r\n        });\r\n        return createRange(startPos, endPos) || this.editor.getDocument().createRange();\r\n    }\r\n\r\n    private onKeyUpDomEvent(event: PluginKeyboardEvent) {\r\n        if (this.isSuggesting) {\r\n            // Word before cursor represents the text prior to the cursor, up to and including the trigger symbol.\r\n            const wordBeforeCursor = this.getWord(event);\r\n            const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\r\n            const trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\r\n\r\n            // If we hit a case where wordBeforeCursor is just the trigger character,\r\n            // that means we've gotten a onKeyUp event right after it's been typed.\r\n            // Otherwise, update the query string when:\r\n            // 1. There's an actual value\r\n            // 2. That actual value isn't just pure whitespace\r\n            // 3. That actual value isn't more than 4 words long (at which point we assume the person kept typing)\r\n            // Otherwise, we want to dismiss the picker plugin's UX.\r\n            if (\r\n                wordBeforeCursor == this.pickerOptions.triggerCharacter ||\r\n                (trimmedWordBeforeCursor &&\r\n                    trimmedWordBeforeCursor.length > 0 &&\r\n                    trimmedWordBeforeCursor.split(' ').length <= 4)\r\n            ) {\r\n                this.dataProvider.queryStringUpdated(\r\n                    trimmedWordBeforeCursor,\r\n                    wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\r\n                );\r\n                this.setLastKnownRange(this.editor.getSelectionRange());\r\n            } else {\r\n                this.setIsSuggesting(false);\r\n            }\r\n        } else {\r\n            let wordBeforeCursor = this.getWordBeforeCursor(event);\r\n            if (!this.blockSuggestions) {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor.split(' ').length <= 4 &&\r\n                    wordBeforeCursor[0] == this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.setIsSuggesting(true);\r\n                    const wordBeforeCursorWithoutTriggerChar = wordBeforeCursor.substring(1);\r\n                    let trimmedWordBeforeCursor = wordBeforeCursorWithoutTriggerChar.trim();\r\n                    this.dataProvider.queryStringUpdated(\r\n                        trimmedWordBeforeCursor,\r\n                        wordBeforeCursorWithoutTriggerChar == trimmedWordBeforeCursor\r\n                    );\r\n                    this.setLastKnownRange(this.editor.getSelectionRange());\r\n                    if (this.dataProvider.setCursorPoint) {\r\n                        // Determine the bounding rectangle for the @mention\r\n                        let searcher = cacheGetContentSearcher(event, this.editor);\r\n                        let rangeNode = this.editor.getDocument().createRange();\r\n                        let nodeBeforeCursor = searcher.getInlineElementBefore().getContainerNode();\r\n                        let rangeStartSuccessfullySet = this.setRangeStart(\r\n                            rangeNode,\r\n                            nodeBeforeCursor,\r\n                            wordBeforeCursor\r\n                        );\r\n                        if (!rangeStartSuccessfullySet) {\r\n                            // VSO 24891: Out of range error is occurring because nodeBeforeCursor\r\n                            // is not including the trigger character. In this case, the node before\r\n                            // the node before cursor is the trigger character, and this is where the range should start.\r\n                            let nodeBeforeNodeBeforeCursor = nodeBeforeCursor.previousSibling;\r\n                            this.setRangeStart(\r\n                                rangeNode,\r\n                                nodeBeforeNodeBeforeCursor,\r\n                                this.pickerOptions.triggerCharacter\r\n                            );\r\n                        }\r\n                        let rect = rangeNode.getBoundingClientRect();\r\n\r\n                        // Safari's support for range.getBoundingClientRect is incomplete.\r\n                        // We perform this check to fall back to getClientRects in case it's at the page origin.\r\n                        if (rect.left == 0 && rect.bottom == 0 && rect.top == 0) {\r\n                            rect = rangeNode.getClientRects()[0];\r\n                        }\r\n\r\n                        if (rect) {\r\n                            rangeNode.detach();\r\n\r\n                            // Display the @mention popup in the correct place\r\n                            let targetPoint = { x: rect.left, y: (rect.bottom + rect.top) / 2 };\r\n                            let bufferZone = (rect.bottom - rect.top) / 2;\r\n                            this.dataProvider.setCursorPoint(targetPoint, bufferZone);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (\r\n                    wordBeforeCursor != null &&\r\n                    wordBeforeCursor[0] != this.pickerOptions.triggerCharacter\r\n                ) {\r\n                    this.blockSuggestions = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onKeyDownEvent(event: PluginKeyboardEvent) {\r\n        let keyboardEvent = event.rawEvent;\r\n        if (this.isSuggesting) {\r\n            if (keyboardEvent.key == ESC_CHARCODE) {\r\n                this.setIsSuggesting(false);\r\n                this.blockSuggestions = true;\r\n                this.handleKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.shiftHighlight &&\r\n                (this.pickerOptions.isHorizontal\r\n                    ? keyboardEvent.key == LEFT_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                    : keyboardEvent.key == UP_ARROW_CHARCODE ||\r\n                      keyboardEvent.key == DOWN_ARROW_CHARCODE)\r\n            ) {\r\n                this.dataProvider.shiftHighlight(\r\n                    this.pickerOptions.isHorizontal\r\n                        ? keyboardEvent.key == RIGHT_ARROW_CHARCODE\r\n                        : keyboardEvent.key == DOWN_ARROW_CHARCODE\r\n                );\r\n\r\n                if (this.dataProvider.getSelectedIndex) {\r\n                    this.setAriaActiveDescendant(this.dataProvider.getSelectedIndex());\r\n                }\r\n\r\n                this.handleKeyDownEvent(event);\r\n            } else if (\r\n                this.dataProvider.selectOption &&\r\n                (keyboardEvent.key == ENTER_CHARCODE || keyboardEvent.key == TAB_CHARCODE)\r\n            ) {\r\n                this.dataProvider.selectOption();\r\n                this.handleKeyDownEvent(event);\r\n            } else {\r\n                // Currently no op.\r\n            }\r\n        } else {\r\n            if (keyboardEvent.key == BACKSPACE_CHARCODE) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let nodeBeforeCursor = searcher.getInlineElementBefore()\r\n                    ? searcher.getInlineElementBefore().getContainerNode()\r\n                    : null;\r\n                let nodeId = nodeBeforeCursor ? this.getIdValue(nodeBeforeCursor) : null;\r\n                if (\r\n                    nodeId &&\r\n                    nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0 &&\r\n                    (searcher.getInlineElementAfter() == null ||\r\n                        !(searcher.getInlineElementAfter() instanceof PartialInlineElement))\r\n                ) {\r\n                    let replacementNode = this.dataProvider.onRemove(nodeBeforeCursor, true);\r\n                    this.replaceNode(nodeBeforeCursor, replacementNode);\r\n                    this.editor.select(replacementNode, PositionType.After);\r\n                    this.handleKeyDownEvent(event);\r\n                }\r\n            } else if (keyboardEvent.key == DELETE_CHARCODE) {\r\n                let searcher = cacheGetContentSearcher(event, this.editor);\r\n                let nodeAfterCursor = searcher.getInlineElementAfter()\r\n                    ? searcher.getInlineElementAfter().getContainerNode()\r\n                    : null;\r\n                let nodeId = nodeAfterCursor ? this.getIdValue(nodeAfterCursor) : null;\r\n                if (nodeId && nodeId.indexOf(this.pickerOptions.elementIdPrefix) == 0) {\r\n                    let replacementNode = this.dataProvider.onRemove(nodeAfterCursor, false);\r\n                    this.replaceNode(nodeAfterCursor, replacementNode);\r\n                    this.handleKeyDownEvent(event);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getWord(event: PluginKeyboardEvent) {\r\n        let wordFromRange = this.getRangeUntilAt(event).toString();\r\n        let wordFromCache = this.getWordBeforeCursor(event);\r\n        // VSO 24891: In picker, trigger and mention are separated into two nodes.\r\n        // In this case, wordFromRange is the trigger character while wordFromCache is the whole string,\r\n        // so wordFromCache is what we want to return.\r\n        if (\r\n            wordFromRange == this.pickerOptions.triggerCharacter &&\r\n            wordFromRange != wordFromCache\r\n        ) {\r\n            return wordFromCache;\r\n        }\r\n        return wordFromRange;\r\n    }\r\n\r\n    private setRangeStart(rangeNode: Range, node: Node, target: string) {\r\n        let nodeOffset = node ? node.textContent.lastIndexOf(target) : -1;\r\n        if (nodeOffset > -1) {\r\n            rangeNode.setStart(node, nodeOffset);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private setAriaOwns(isSuggesting: boolean) {\r\n        this.editor.setEditorDomAttribute(\r\n            'aria-owns',\r\n            isSuggesting && this.pickerOptions.suggestionsLabel\r\n                ? this.pickerOptions.suggestionsLabel\r\n                : null\r\n        );\r\n    }\r\n\r\n    private setAriaActiveDescendant(selectedIndex: number) {\r\n        this.editor.setEditorDomAttribute(\r\n            'aria-activedescendant',\r\n            selectedIndex != null && this.pickerOptions.suggestionLabelPrefix\r\n                ? this.pickerOptions.suggestionLabelPrefix + selectedIndex.toString()\r\n                : null\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}